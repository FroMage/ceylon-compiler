package com.redhat.ceylon.compiler.java.test.interop;

class OptionalInterface implements .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface {
    
    OptionalInterface(.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface x) {
        this.prop1 = x;
        this.prop2 = null;
        this.prop3 = x;
        this.prop4 = x;
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface method(final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface x) {
        final .java.lang.Object o1 = .com.redhat.ceylon.compiler.java.Util.checkNull(x.getProp1());
        final .java.lang.Object o2 = .com.redhat.ceylon.compiler.java.Util.checkNull(x.method(x));
        x.setProp1(x);
        x.setProp1(null);
        return .com.redhat.ceylon.compiler.java.Util.checkNull(.com.redhat.ceylon.compiler.java.Util.checkNull(x.getProp1()).getProp1());
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface method2(final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface x) {
        .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $x$1;
        if (($x$1 = x) != null) {
            final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $x$2 = $x$1;
            .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $z$4;
            if (($z$4 = $x$2.getProp1()) != null) {
                final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $z$5 = $z$4;
            }
            final boolean b1 = $x$2.getProp1() != null;
            final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> existsInComprehension1 = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface>(){
                
                public final .ceylon.language.Iterator<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> getIterator() {
                    return new .ceylon.language.Iterator<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface>(){
                        private final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> iter$0 = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .ceylon.language.Empty>($x$2, .ceylon.language.empty_.getEmpty$()).getIterator();
                        private .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface obj;
                        private boolean obj$exhausted;
                        
                        private final boolean obj() {
                            final .java.lang.Object $ceylontmpitem6 = iter$0.next();
                            obj$exhausted = $ceylontmpitem6 == .ceylon.language.exhausted_.getExhausted$();
                            if (obj$exhausted) {
                                return false;
                            } else {
                                obj = (.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface)$ceylontmpitem6;
                                return true;
                            }
                        }
                        private .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $z$8;
                        
                        private final boolean next1() {
                            while (true) {
                                if (!this.obj()) break;
                                .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $z$7 = null;
                                if (($z$7 = obj.getProp1()) != null) {
                                    $z$8 = $z$7;
                                    break;
                                }
                            }
                            return !obj$exhausted;
                        }
                        
                        public final .java.lang.Object next() {
                            return this.next1() ? $z$8 : .ceylon.language.exhausted_.getExhausted$();
                        }
                    };
                }
            }.getSequence();
            .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $z$10;
            if (($z$10 = $x$2.method($x$2)) != null) {
                final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $z$11 = $z$10;
            }
            final boolean b2 = $x$2.method($x$2) != null;
            final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> existsInComprehension2 = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface>(){
                
                public final .ceylon.language.Iterator<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> getIterator() {
                    return new .ceylon.language.Iterator<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface>(){
                        private final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> iter$0 = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .ceylon.language.Empty>($x$2, .ceylon.language.empty_.getEmpty$()).getIterator();
                        private .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface obj;
                        private boolean obj$exhausted;
                        
                        private final boolean obj() {
                            final .java.lang.Object $ceylontmpitem12 = iter$0.next();
                            obj$exhausted = $ceylontmpitem12 == .ceylon.language.exhausted_.getExhausted$();
                            if (obj$exhausted) {
                                return false;
                            } else {
                                obj = (.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface)$ceylontmpitem12;
                                return true;
                            }
                        }
                        private .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $z$14;
                        
                        private final boolean next1() {
                            while (true) {
                                if (!this.obj()) break;
                                .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $z$13 = null;
                                if (($z$13 = obj.method($x$2)) != null) {
                                    $z$14 = $z$13;
                                    break;
                                }
                            }
                            return !obj$exhausted;
                        }
                        
                        public final .java.lang.Object next() {
                            return this.next1() ? $z$14 : .ceylon.language.exhausted_.getExhausted$();
                        }
                    };
                }
            }.getSequence();
            final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface elseOp1 = (
                let
                {
                    .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $ceylontmp15 = $x$2.getProp1();
                }
                returning $ceylontmp15 != null ? $ceylontmp15 : $x$2;
            );
            final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface elseOp2 = (
                let
                {
                    .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface $ceylontmp16 = $x$2.method($x$2);
                }
                returning $ceylontmp16 != null ? $ceylontmp16 : $x$2;
            );
            final .java.lang.Object correspondenceCheck = .com.redhat.ceylon.compiler.java.Util.checkNull($x$2.getCorrespondence()).item($x$2);
            final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> seqCheck = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .ceylon.language.Empty>(.com.redhat.ceylon.compiler.java.Util.checkNull($x$2.getProp1()), .ceylon.language.empty_.getEmpty$());
            final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> seqNoCheck = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .ceylon.language.Empty>(.com.redhat.ceylon.compiler.java.Util.checkNull($x$2.getProp1()), .ceylon.language.empty_.getEmpty$());
            final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> seqCheckSpread = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .ceylon.language.Empty>(.com.redhat.ceylon.compiler.java.Util.checkNull($x$2.getProp1()), .ceylon.language.empty_.getEmpty$());
            final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> seqNoCheckSpread = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface, .ceylon.language.Empty>(.com.redhat.ceylon.compiler.java.Util.checkNull($x$2.getProp1()), .ceylon.language.empty_.getEmpty$());
            final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> comprehensionCheck = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface>(){
                
                public final .ceylon.language.Iterator<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> getIterator() {
                    return new .ceylon.language.Iterator<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface>(){
                        private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).getIterator();
                        private .ceylon.language.Integer i;
                        private boolean i$exhausted;
                        
                        private final boolean i() {
                            final .java.lang.Object $ceylontmpitem17 = iter$0.next();
                            i$exhausted = $ceylontmpitem17 == .ceylon.language.exhausted_.getExhausted$();
                            if (i$exhausted) {
                                return false;
                            } else {
                                i = (.ceylon.language.Integer)$ceylontmpitem17;
                                return true;
                            }
                        }
                        
                        public final .java.lang.Object next() {
                            return this.i() ? .com.redhat.ceylon.compiler.java.Util.checkNull($x$2.getProp1()) : .ceylon.language.exhausted_.getExhausted$();
                        }
                    };
                }
            }.getSequence();
            final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> comprehensionNoCheck = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface>(){
                
                public final .ceylon.language.Iterator<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface> getIterator() {
                    return new .ceylon.language.Iterator<.com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface>(){
                        private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).getIterator();
                        private .ceylon.language.Integer i;
                        private boolean i$exhausted;
                        
                        private final boolean i() {
                            final .java.lang.Object $ceylontmpitem18 = iter$0.next();
                            i$exhausted = $ceylontmpitem18 == .ceylon.language.exhausted_.getExhausted$();
                            if (i$exhausted) {
                                return false;
                            } else {
                                i = (.ceylon.language.Integer)$ceylontmpitem18;
                                return true;
                            }
                        }
                        
                        public final .java.lang.Object next() {
                            return this.i() ? .com.redhat.ceylon.compiler.java.Util.checkNull($x$2.getProp1()) : .ceylon.language.exhausted_.getExhausted$();
                        }
                    };
                }
            }.getSequence();
            return .com.redhat.ceylon.compiler.java.Util.checkNull($x$2.getProp1()).getProp1();
        }
        return null;
    }
    private .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface prop1;
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface getProp1() {
        return prop1;
    }
    
    @.java.lang.Override
    public final void setProp1(final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface prop1) {
        this.prop1 = prop1;
    }
    private .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface prop2;
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface getProp2() {
        return prop2;
    }
    
    @.java.lang.Override
    public final void setProp2(final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface prop2) {
        this.prop2 = prop2;
    }
    private final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface prop3;
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface getProp3() {
        return prop3;
    }
    private final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface prop4;
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.interop.JavaOptionalInterface getProp4() {
        return prop4;
    }
    
    public final .ceylon.language.Correspondence<? super .java.lang.Object, ? extends .java.lang.Object> getCorrespondence() {
        return (.ceylon.language.Correspondence<? super .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Correspondence).ceylon.language.bottom_.getBottom$();
    }
}