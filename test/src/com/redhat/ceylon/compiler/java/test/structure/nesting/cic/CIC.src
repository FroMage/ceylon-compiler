package com.redhat.ceylon.compiler.java.test.structure.nesting.cic;

interface C$CI<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> {
    
    public .com.redhat.ceylon.compiler.java.test.structure.nesting.cic.C$CI<T, X> $com$redhat$ceylon$compiler$java$test$structure$nesting$cic$C$CI$impl();
}
class C<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> {
    
    C() {
    }
    
    private final <U>T m1$priv(final X b) {
        return (
            let
            {
                U $ceylontmp$u$1 = m1$u(b);
            }
            returning m1$priv(b, $ceylontmp$u$1);
        );
    }
    
    private final <U>U m1$u(final X b) {
        return null;
    }
    
    private final <U>T m1$priv(final X b, final U u) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    final class CI$impl {
        
        CI$impl(.com.redhat.ceylon.compiler.java.test.structure.nesting.cic.C$CI<? extends T, ? super X> $this) {
            this.$this = $this;
        }
        private final .com.redhat.ceylon.compiler.java.test.structure.nesting.cic.C$CI<? extends T, ? super X> $this;
        
        class CIC {
            
            CIC() {
            }
            
            private final T m2$priv() {
                return m1$priv(null);
            }
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.cic.C();
    }
}