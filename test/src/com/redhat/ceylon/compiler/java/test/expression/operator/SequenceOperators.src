package com.redhat.ceylon.compiler.java.test.expression.operator;

public class SequenceOperators {
    
    public SequenceOperators() {
        this.c1 = new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>(.ceylon.language.String.instance(""));
        this.c2 = new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>(.ceylon.language.String.instance(""));
        this.sequence = (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    private final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> c1;
    
    private final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> getC1() {
        return c1;
    }
    private final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> c2;
    
    private final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> getC2() {
        return c2;
    }
    private final .ceylon.language.Sequential<? extends .ceylon.language.String> sequence;
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.String> getSequence() {
        return sequence;
    }
    
    private final <T>T box(final T x) {
        return x;
    }
    
    private final void testSequence(final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> c1, final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> c2, final .ceylon.language.List<? extends .ceylon.language.String> c3) {
        .ceylon.language.String s = c1.item(.ceylon.language.Integer.instance(1L));
        s = this.getC1().item(.ceylon.language.Integer.instance(1L));
        s = c1.item(<.ceylon.language.Integer>box(.ceylon.language.Integer.instance(1L)));
        s = (
            let
            {
                .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> $ceylontmpsafeaccess0 = c2;
            }
            returning $ceylontmpsafeaccess0 != null ? $ceylontmpsafeaccess0.item(.ceylon.language.Integer.instance(1L)) : null;
        );
        s = (
            let
            {
                .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> $ceylontmpsafeaccess1 = this.getC2();
            }
            returning $ceylontmpsafeaccess1 != null ? $ceylontmpsafeaccess1.item(.ceylon.language.Integer.instance(1L)) : null;
        );
        s = (
            let
            {
                .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> $ceylontmpsafeaccess2 = c2;
            }
            returning $ceylontmpsafeaccess2 != null ? $ceylontmpsafeaccess2.item(<.ceylon.language.Integer>box(.ceylon.language.Integer.instance(1L))) : null;
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequence = new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>(.ceylon.language.String.instance("foo"), .ceylon.language.String.instance("bar"));
        .ceylon.language.Sequential<? extends .ceylon.language.String> subrange;
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).span(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L));
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)this.getSequence()).span(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L));
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).span(<.ceylon.language.Integer>box(.ceylon.language.Integer.instance(1L)), <.ceylon.language.Integer>box(.ceylon.language.Integer.instance(2L)));
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).segment(.ceylon.language.Integer.instance(1L), 2L);
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)this.getSequence()).segment(.ceylon.language.Integer.instance(1L), 2L);
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).segment(<.ceylon.language.Integer>box(.ceylon.language.Integer.instance(1L)), <.ceylon.language.Integer>box(.ceylon.language.Integer.instance(2L)).longValue());
        .ceylon.language.Sequential<? extends .ceylon.language.String> upperRange;
        upperRange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).span(.ceylon.language.Integer.instance(1L), null);
        upperRange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)this.getSequence()).span(.ceylon.language.Integer.instance(1L), null);
        upperRange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).span(<.ceylon.language.Integer>box(.ceylon.language.Integer.instance(1L)), null);
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> spreadMemberWithUnboxedType = (
            let
            {
                .ceylon.language.FixedSized<? extends .ceylon.language.String> $spreadTest$3 = sequence;
            }
            returning (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)($spreadTest$3 instanceof .ceylon.language.Sequence ? (
                let
                {
                    .ceylon.language.Sequence<? extends .ceylon.language.String> $spread$4$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)$spreadTest$3;
                    int $spread$4$2 = (int)$spread$4$0.getSize();
                    .ceylon.language.Integer[] $spread$4$4 = new .ceylon.language.Integer[$spread$4$2];
                    for (int $index$5 = 0; $index$5 < $spread$4$2; $index$5++) $spread$4$4[$index$5] = .ceylon.language.Integer.instance($spread$4$0.item(.ceylon.language.Integer.instance($index$5)).getSize());
                }
                returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Integer>($spread$4$4);
            ) : .ceylon.language.empty_.getEmpty$());
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> intSequence = new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> spreadMemberWithBoxedType = (
            let
            {
                .ceylon.language.FixedSized<? extends .ceylon.language.Integer> $spreadTest$6 = intSequence;
            }
            returning (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)($spreadTest$6 instanceof .ceylon.language.Sequence ? (
                let
                {
                    .ceylon.language.Sequence<? extends .ceylon.language.Integer> $spread$7$0 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)$spreadTest$6;
                    int $spread$7$2 = (int)$spread$7$0.getSize();
                    .ceylon.language.Integer[] $spread$7$4 = new .ceylon.language.Integer[$spread$7$2];
                    for (int $index$8 = 0; $index$8 < $spread$7$2; $index$8++) $spread$7$4[$index$8] = $spread$7$0.item(.ceylon.language.Integer.instance($index$8)).getWholePart();
                }
                returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Integer>($spread$7$4);
            ) : .ceylon.language.empty_.getEmpty$());
        );
        .ceylon.language.Sequential<? extends .ceylon.language.Character> spreadInvoke;
        spreadInvoke = (
            let
            {
                .ceylon.language.FixedSized<? extends .ceylon.language.String> $spreadTest$9 = sequence;
            }
            returning (.ceylon.language.Sequential<? extends .ceylon.language.Character>)($spreadTest$9 instanceof .ceylon.language.Sequence ? (
                let
                {
                    .ceylon.language.Sequence<? extends .ceylon.language.String> $spread$10$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)$spreadTest$9;
                    int $spread$10$2 = (int)$spread$10$0.getSize();
                    .ceylon.language.Character[] $spread$10$4 = new .ceylon.language.Character[$spread$10$2];
                    for (int $index$11 = 0; $index$11 < $spread$10$2; $index$11++) $spread$10$4[$index$11] = $spread$10$0.item(.ceylon.language.Integer.instance($index$11)).item(.ceylon.language.Integer.instance(0L));
                }
                returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Character>($spread$10$4);
            ) : .ceylon.language.empty_.getEmpty$());
        );
        spreadInvoke = (
            let
            {
                .ceylon.language.FixedSized<? extends .ceylon.language.String> $spreadTest$13 = sequence;
            }
            returning (.ceylon.language.Sequential<? extends .ceylon.language.Character>)($spreadTest$13 instanceof .ceylon.language.Sequence ? (
                let
                {
                    .ceylon.language.Sequence<? extends .ceylon.language.String> $spread$14$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)$spreadTest$13;
                    int $spread$14$2 = (int)$spread$14$0.getSize();
                    .ceylon.language.Character[] $spread$14$4 = new .ceylon.language.Character[$spread$14$2];
                    for (int $index$15 = 0; $index$15 < $spread$14$2; $index$15++) $spread$14$4[$index$15] = (
                        let
                        {
                            .ceylon.language.String $arg$12$callable$ = $spread$14$0.item(.ceylon.language.Integer.instance($index$15));
                            .ceylon.language.Integer $arg$12$0 = .ceylon.language.Integer.instance(0L);
                        }
                        returning $arg$12$callable$.item($arg$12$0);
                    );
                }
                returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Character>($spread$14$4);
            ) : .ceylon.language.empty_.getEmpty$());
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.String> empty = (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
        final .ceylon.language.Sequential<? extends .ceylon.language.String> upperCasedEmpty = (
            let
            {
                .ceylon.language.FixedSized<? extends .ceylon.language.String> $spreadTest$16 = empty;
            }
            returning (.ceylon.language.Sequential<? extends .ceylon.language.String>)($spreadTest$16 instanceof .ceylon.language.Sequence ? (
                let
                {
                    .ceylon.language.Sequence<? extends .ceylon.language.String> $spread$17$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)$spreadTest$16;
                    int $spread$17$2 = (int)$spread$17$0.getSize();
                    .ceylon.language.String[] $spread$17$4 = new .ceylon.language.String[$spread$17$2];
                    for (int $index$18 = 0; $index$18 < $spread$17$2; $index$18++) $spread$17$4[$index$18] = .ceylon.language.String.instance($spread$17$0.item(.ceylon.language.Integer.instance($index$18)).getUppercased());
                }
                returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>($spread$17$4);
            ) : .ceylon.language.empty_.getEmpty$());
        );
    }
    
    private final void testString() {
        final .java.lang.String string = "";
        final .ceylon.language.Character c = .ceylon.language.String.instance(string).item(.ceylon.language.Integer.instance(0L));
        .java.lang.String sync;
        sync = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.String>)(.ceylon.language.Ranged).ceylon.language.String.instance(string)).span(.ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(1L)).toString();
        sync = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.String>)(.ceylon.language.Ranged).ceylon.language.String.instance(string)).segment(.ceylon.language.Integer.instance(0L), 1L).toString();
        sync = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.String>)(.ceylon.language.Ranged).ceylon.language.String.instance(string)).span(.ceylon.language.Integer.instance(0L), null).toString();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.SequenceOperators();
    }
}