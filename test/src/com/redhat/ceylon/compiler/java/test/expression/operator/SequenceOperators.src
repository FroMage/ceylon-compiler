package com.redhat.ceylon.compiler.java.test.expression.operator;

public class SequenceOperators implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    public SequenceOperators() {
        this.c1 = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Empty>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.String.instance(""), .ceylon.language.empty_.getEmpty$());
        final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> c2 = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Empty>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.String.instance(""), .ceylon.language.empty_.getEmpty$());
        this.sequence = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    private final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> c1;
    
    private final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> getC1$priv() {
        return c1;
    }
    private final .ceylon.language.Sequential<? extends .ceylon.language.String> sequence;
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.String> getSequence$priv() {
        return sequence;
    }
    
    private final <T>T box$priv(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final T x) {
        return x;
    }
    
    private final void testSequence$priv(final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> c1, final .ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.String> c2, final .ceylon.language.List<? extends .ceylon.language.String> c3, final .ceylon.language.Ranged<? super .ceylon.language.String, ? extends .ceylon.language.String> stringRange, final .java.lang.Object integerAndList) {
        .ceylon.language.String s = c1.get(.ceylon.language.Integer.instance(1L));
        s = this.getC1$priv().get(.ceylon.language.Integer.instance(1L));
        s = c1.get(<.ceylon.language.Integer>box$priv(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L)));
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequence = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.String.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.String.instance("foo"), new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Empty>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.String.instance("bar"), .ceylon.language.empty_.getEmpty$()));
        .ceylon.language.Sequential<? extends .ceylon.language.String> subrange;
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).span(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L));
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)this.getSequence$priv()).span(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L));
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).span(<.ceylon.language.Integer>box$priv(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L)), <.ceylon.language.Integer>box$priv(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)));
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).segment(.ceylon.language.Integer.instance(1L), 2L);
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)this.getSequence$priv()).segment(.ceylon.language.Integer.instance(1L), 2L);
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).segment(<.ceylon.language.Integer>box$priv(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L)), <.ceylon.language.Integer>box$priv(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)).longValue());
        final .java.lang.String stringRangeRet = stringRange.segment(.ceylon.language.String.instance("foo"), ((.ceylon.language.Integer)integerAndList).longValue()).toString();
        .ceylon.language.Sequential<? extends .ceylon.language.String> upperRange;
        upperRange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).spanFrom(.ceylon.language.Integer.instance(1L));
        upperRange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)this.getSequence$priv()).spanFrom(.ceylon.language.Integer.instance(1L));
        upperRange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).spanFrom(<.ceylon.language.Integer>box$priv(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L)));
        .ceylon.language.Sequential<? extends .ceylon.language.String> lowerRange;
        lowerRange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).spanTo(.ceylon.language.Integer.instance(1L));
        lowerRange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)this.getSequence$priv()).spanTo(.ceylon.language.Integer.instance(1L));
        lowerRange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Ranged)sequence).spanTo(<.ceylon.language.Integer>box$priv(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L)));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> spreadMemberWithUnboxedType = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$0$iterable = sequence;
                .ceylon.language.SequenceBuilder<.ceylon.language.Integer> $spread$0$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor);
                .java.lang.Object $spread$0$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$0$iterator = $spread$0$iterable.getIterator(); !(($spread$0$iteration = $spread$0$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$0$element = (.ceylon.language.String)$spread$0$iteration;
                    $spread$0$sequenceBuilder.append(.ceylon.language.Integer.instance($spread$0$element.getSize()));
                }
            }
            returning $spread$0$sequenceBuilder.getSequence();
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> intSequence = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Integer.instance(1L), .ceylon.language.empty_.getEmpty$());
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> spreadMemberWithBoxedType = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> $spread$1$iterable = intSequence;
                .ceylon.language.SequenceBuilder<.ceylon.language.Integer> $spread$1$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor);
                .java.lang.Object $spread$1$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> $spread$1$iterator = $spread$1$iterable.getIterator(); !(($spread$1$iteration = $spread$1$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.Integer $spread$1$element = (.ceylon.language.Integer)$spread$1$iteration;
                    $spread$1$sequenceBuilder.append($spread$1$element.getWholePart());
                }
            }
            returning $spread$1$sequenceBuilder.getSequence();
        );
        .ceylon.language.Sequential<? extends .ceylon.language.Character> spreadInvoke;
        spreadInvoke = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$2$iterable = sequence;
                .ceylon.language.SequenceBuilder<.ceylon.language.Character> $spread$2$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.Character>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Character.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor));
                .ceylon.language.Integer $spread$2$arg$0 = .ceylon.language.Integer.instance(0L);
                .java.lang.Object $spread$2$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$2$iterator = $spread$2$iterable.getIterator(); !(($spread$2$iteration = $spread$2$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$2$element = (.ceylon.language.String)$spread$2$iteration;
                    $spread$2$sequenceBuilder.append($spread$2$element.get($spread$2$arg$0));
                }
            }
            returning $spread$2$sequenceBuilder.getSequence();
        );
        spreadInvoke = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$4$iterable = sequence;
                .ceylon.language.SequenceBuilder<.ceylon.language.Character> $spread$4$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.Character>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Character.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor));
                .java.lang.Object $spread$4$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$4$iterator = $spread$4$iterable.getIterator(); !(($spread$4$iteration = $spread$4$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$4$element = (.ceylon.language.String)$spread$4$iteration;
                    $spread$4$sequenceBuilder.append((
                        let
                        {
                            .ceylon.language.String $arg$3$callable$ = $spread$4$element;
                            .ceylon.language.Integer $arg$3$0 = .ceylon.language.Integer.instance(0L);
                        }
                        returning $arg$3$callable$.get($arg$3$0);
                    ));
                }
            }
            returning $spread$4$sequenceBuilder.getSequence();
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.String> empty = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
        final .ceylon.language.Sequential<? extends .ceylon.language.String> upperCasedEmpty = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$5$iterable = empty;
                .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$5$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor);
                .java.lang.Object $spread$5$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$5$iterator = $spread$5$iterable.getIterator(); !(($spread$5$iteration = $spread$5$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$5$element = (.ceylon.language.String)$spread$5$iteration;
                    $spread$5$sequenceBuilder.append(.ceylon.language.String.instance($spread$5$element.getUppercased()));
                }
            }
            returning $spread$5$sequenceBuilder.getSequence();
        );
    }
    
    private final void testString$priv() {
        final .java.lang.String string = "";
        final .ceylon.language.Character c = .ceylon.language.String.instance(string).get(.ceylon.language.Integer.instance(0L));
        .java.lang.String sync;
        sync = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.String>)(.ceylon.language.Ranged).ceylon.language.String.instance(string)).span(.ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(1L)).toString();
        sync = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.String>)(.ceylon.language.Ranged).ceylon.language.String.instance(string)).segment(.ceylon.language.Integer.instance(0L), 1L).toString();
        sync = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.String>)(.ceylon.language.Ranged).ceylon.language.String.instance(string)).spanFrom(.ceylon.language.Integer.instance(0L)).toString();
        sync = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.String>)(.ceylon.language.Ranged).ceylon.language.String.instance(string)).spanTo(.ceylon.language.Integer.instance(1L)).toString();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.SequenceOperators();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.SequenceOperators.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.SequenceOperators.class);
}
final class sequenceOperators_ {
    
    private sequenceOperators_() {
    }
    
    static void sequenceOperators() {
        final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.Singleton<? extends .ceylon.language.Character>, ? extends .ceylon.language.Singleton<? extends .ceylon.language.Character>, ? extends .ceylon.language.Empty>>> t = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor)), .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor)), .ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .ceylon.language.Empty.$TypeDescriptor)), .ceylon.language.Integer.instance(1L), new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor)), .ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.String.instance("2"), new .ceylon.language.Tuple<.ceylon.language.Singleton<? extends .ceylon.language.Character>, .ceylon.language.Singleton<? extends .ceylon.language.Character>, .ceylon.language.Empty>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .ceylon.language.Empty.$TypeDescriptor, new .ceylon.language.Singleton<.ceylon.language.Character>(.ceylon.language.Character.$TypeDescriptor, .ceylon.language.Character.instance(51)), .ceylon.language.empty_.getEmpty$())));
        final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.Singleton<? extends .ceylon.language.Character>, ? extends .ceylon.language.Singleton<? extends .ceylon.language.Character>, ? extends .ceylon.language.Empty>>> t3 = (.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.Singleton<? extends .ceylon.language.Character>, ? extends .ceylon.language.Singleton<? extends .ceylon.language.Character>, ? extends .ceylon.language.Empty>>>)(.ceylon.language.Tuple).com.redhat.ceylon.compiler.java.Util.tuple_spanFrom((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .java.lang.Object>>)(.ceylon.language.Ranged)t, .ceylon.language.Integer.instance(0L));
        if (t.equals(t3)) {
        } else throw new .ceylon.language.AssertionException("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "t == t3"));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> possiblyEmpty = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> notEmpty = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Integer.instance(1L), .ceylon.language.empty_.getEmpty$());
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> t4 = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)possiblyEmpty).spanFrom(.ceylon.language.Integer.instance(0L));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> t5 = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)possiblyEmpty).spanFrom(.ceylon.language.Integer.instance(1L));
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> t6 = (.ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Tuple).com.redhat.ceylon.compiler.java.Util.tuple_spanFrom((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequential<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(1L), possiblyEmpty), .ceylon.language.Integer.instance(0L));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> t7 = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequential<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(1L), possiblyEmpty)).spanFrom(.ceylon.language.Integer.instance(1L));
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> t8 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.tuple_spanFrom((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)notEmpty, .ceylon.language.Integer.instance(0L));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> t9 = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)notEmpty).spanFrom(.ceylon.language.Integer.instance(1L));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> t10 = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)notEmpty).spanFrom(.ceylon.language.Integer.instance(2L));
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequence<? extends .ceylon.language.Integer>> t11 = (.ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequence<? extends .ceylon.language.Integer>>)(.ceylon.language.Tuple).com.redhat.ceylon.compiler.java.Util.tuple_spanFrom((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequence<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequence.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(1L), notEmpty), .ceylon.language.Integer.instance(0L));
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> t12 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.tuple_spanFrom((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequence<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequence.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(1L), notEmpty), .ceylon.language.Integer.instance(1L));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> t13 = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequence<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequence.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(2L), notEmpty)).spanFrom(.ceylon.language.Integer.instance(2L));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.operator.sequenceOperators_.sequenceOperators();
    }
}