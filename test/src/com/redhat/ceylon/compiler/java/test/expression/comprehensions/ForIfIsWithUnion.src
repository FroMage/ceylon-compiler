package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

class ForIfIsUnion implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    ForIfIsUnion() {
    }
    
    public final void m(final .ceylon.language.Sequential<? extends .java.lang.Object> xs) {
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Object.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.java.lang.Object> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object> {
                    
                    $ComprehensionIterator$() {
                        super(.ceylon.language.Object.$TypeDescriptor);
                        iter$0 = xs.getIterator();
                    }
                    private final .ceylon.language.Iterator<? extends .java.lang.Object> iter$0;
                    private .java.lang.Object x;
                    private boolean x$exhausted;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmpitem0 = iter$0.next();
                        x$exhausted = $ceylontmpitem0 == .ceylon.language.finished_.getFinished$();
                        if (x$exhausted) {
                            return false;
                        } else {
                            x = (.java.lang.Object)$ceylontmpitem0;
                            return true;
                        }
                    }
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.x()) break;
                            if (x instanceof .com.redhat.ceylon.compiler.java.test.expression.comprehensions.Foo || x instanceof .com.redhat.ceylon.compiler.java.test.expression.comprehensions.Bar) {
                                break;
                            }
                        }
                        return !x$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        return this.next1() ? ((.com.redhat.ceylon.compiler.java.test.expression.comprehensions.Common)x).common() : .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        });
    }
    
    public final void mvar(final .ceylon.language.Sequential<? extends .java.lang.Object> ys) {
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Object.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.java.lang.Object> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object> {
                    
                    $ComprehensionIterator$() {
                        super(.ceylon.language.Object.$TypeDescriptor);
                        iter$0 = ys.getIterator();
                    }
                    private final .ceylon.language.Iterator<? extends .java.lang.Object> iter$0;
                    private .java.lang.Object y;
                    private boolean y$exhausted;
                    
                    private final boolean y() {
                        final .java.lang.Object $ceylontmpitem2 = iter$0.next();
                        y$exhausted = $ceylontmpitem2 == .ceylon.language.finished_.getFinished$();
                        if (y$exhausted) {
                            return false;
                        } else {
                            y = (.java.lang.Object)$ceylontmpitem2;
                            return true;
                        }
                    }
                    private .java.lang.Object $x$4;
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.y()) break;
                            .java.lang.Object $x$3 = null;
                            if (($x$3 = y) instanceof .com.redhat.ceylon.compiler.java.test.expression.comprehensions.Foo || $x$3 instanceof .com.redhat.ceylon.compiler.java.test.expression.comprehensions.Bar) {
                                $x$4 = $x$3;
                                break;
                            }
                        }
                        return !y$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        return this.next1() ? ((.com.redhat.ceylon.compiler.java.test.expression.comprehensions.Common)$x$4).common() : .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        });
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfIsUnion();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfIsUnion.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfIsUnion.class);
}