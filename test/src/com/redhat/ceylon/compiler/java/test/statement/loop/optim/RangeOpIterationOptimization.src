package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

class OptimizedForWithRange implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OptimizedForWithRange(final long start, final long end) {
        this.start = start;
        this.end = end;
    }
    private final long start;
    
    private final long getStart$priv$() {
        return start;
    }
    private final long end;
    
    private final long getEnd$priv$() {
        return end;
    }
    
    private final void literals$priv$() {
        long sum = 0L;
        final long $ceylontmp$start$0 = 1L;
        final long $ceylontmp$end$1 = 10L;
        final boolean $ceylontmp$increasing$2 = $ceylontmp$start$0 <= $ceylontmp$end$1;
        final long $ceylontmp$incr$3 = $ceylontmp$increasing$2 ? 1L : -1L;
        for (long i$4 = $ceylontmp$start$0; $ceylontmp$increasing$2 ? i$4 - $ceylontmp$end$1 <= 0L : i$4 - $ceylontmp$end$1 >= 0L; i$4 += $ceylontmp$incr$3) {
            final long i = i$4;
            sum += i;
        }
        final int $ceylontmp$start$5 = 97;
        final int $ceylontmp$end$6 = 122;
        final boolean $ceylontmp$increasing$7 = $ceylontmp$start$5 <= $ceylontmp$end$6;
        final int $ceylontmp$incr$8 = $ceylontmp$increasing$7 ? 1 : -1;
        for (int c$9 = $ceylontmp$start$5; $ceylontmp$increasing$7 ? c$9 - $ceylontmp$end$6 <= 0 : c$9 - $ceylontmp$end$6 >= 0; c$9 += $ceylontmp$incr$8) {
            final int c = c$9;
            sum += .ceylon.language.Character.getInteger(c);
        }
    }
    
    private final void expressions$priv$() {
        long sum = 0L;
        final long $ceylontmp$start$10 = getStart$priv$();
        final long $ceylontmp$end$11 = getEnd$priv$();
        final boolean $ceylontmp$increasing$12 = $ceylontmp$start$10 <= $ceylontmp$end$11;
        final long $ceylontmp$incr$13 = $ceylontmp$increasing$12 ? 1L : -1L;
        for (long i$14 = $ceylontmp$start$10; $ceylontmp$increasing$12 ? i$14 - $ceylontmp$end$11 <= 0L : i$14 - $ceylontmp$end$11 >= 0L; i$14 += $ceylontmp$incr$13) {
            final long i = i$14;
            sum += i;
        }
        final long $ceylontmp$start$15 = getStart$priv$() + 10L;
        final long $ceylontmp$end$16 = getEnd$priv$() + 10L;
        final boolean $ceylontmp$increasing$17 = $ceylontmp$start$15 <= $ceylontmp$end$16;
        final long $ceylontmp$incr$18 = $ceylontmp$increasing$17 ? 1L : -1L;
        for (long i$19 = $ceylontmp$start$15; $ceylontmp$increasing$17 ? i$19 - $ceylontmp$end$16 <= 0L : i$19 - $ceylontmp$end$16 >= 0L; i$19 += $ceylontmp$incr$18) {
            final long i = i$19;
            sum += i;
        }
    }
    
    private final void by$priv$() {
        long sum = 0L;
        final long $ceylontmp$start$20 = 1L;
        final long $ceylontmp$end$21 = 10L;
        final long $ceylontmp$by$22 = 3L;
        if ($ceylontmp$by$22 <= 0) throw new .ceylon.language.AssertionException("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final boolean $ceylontmp$increasing$23 = $ceylontmp$start$20 <= $ceylontmp$end$21;
        final long $ceylontmp$incr$24 = $ceylontmp$increasing$23 ? $ceylontmp$by$22 : -$ceylontmp$by$22;
        for (long i$25 = $ceylontmp$start$20; $ceylontmp$increasing$23 ? i$25 - $ceylontmp$end$21 <= 0L : i$25 - $ceylontmp$end$21 >= 0L; i$25 += $ceylontmp$incr$24) {
            final long i = i$25;
            sum += i;
        }
        final long $ceylontmp$start$26 = 1L;
        final long $ceylontmp$end$27 = 10L;
        final long $ceylontmp$by$28 = 3L;
        if ($ceylontmp$by$28 <= 0) throw new .ceylon.language.AssertionException("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final boolean $ceylontmp$increasing$29 = $ceylontmp$start$26 <= $ceylontmp$end$27;
        final long $ceylontmp$incr$30 = $ceylontmp$increasing$29 ? $ceylontmp$by$28 : -$ceylontmp$by$28;
        for (long i$31 = $ceylontmp$start$26; $ceylontmp$increasing$29 ? i$31 - $ceylontmp$end$27 <= 0L : i$31 - $ceylontmp$end$27 >= 0L; i$31 += $ceylontmp$incr$30) {
            final long i = i$31;
            sum += i;
        }
    }
    
    private final void disabled$priv$() {
        long sum = 0L;
        .java.lang.Object elem$32;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$33 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator();
        while (!((elem$32 = i$iterator$$33.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$32).longValue();
            sum += i;
        }
        .java.lang.Object elem$34;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$35 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator();
        while (!((elem$34 = i$iterator$$35.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$34).longValue();
            sum += i;
        }
    }
    
    private final void flow$priv$() {
        long sum = 0L;
        final long $ceylontmp$start$36 = 1L;
        final long $ceylontmp$end$37 = 10L;
        final boolean $ceylontmp$increasing$38 = $ceylontmp$start$36 <= $ceylontmp$end$37;
        final long $ceylontmp$incr$39 = $ceylontmp$increasing$38 ? 1L : -1L;
        for (long withElse$40 = $ceylontmp$start$36; $ceylontmp$increasing$38 ? withElse$40 - $ceylontmp$end$37 <= 0L : withElse$40 - $ceylontmp$end$37 >= 0L; withElse$40 += $ceylontmp$incr$39) {
            final long withElse = withElse$40;
            sum += withElse;
        }
        sum = 0L;
        final long $ceylontmp$start$41 = 10L;
        final long $ceylontmp$end$42 = 1L;
        final boolean $ceylontmp$increasing$43 = $ceylontmp$start$41 <= $ceylontmp$end$42;
        final long $ceylontmp$incr$44 = $ceylontmp$increasing$43 ? 1L : -1L;
        for (long breaks$45 = $ceylontmp$start$41; $ceylontmp$increasing$43 ? breaks$45 - $ceylontmp$end$42 <= 0L : breaks$45 - $ceylontmp$end$42 >= 0L; breaks$45 += $ceylontmp$incr$44) {
            final long breaks = breaks$45;
            sum += breaks;
            break;
        }
        boolean doforelse$46 = true;
        final long $ceylontmp$start$47 = 10L;
        final long $ceylontmp$end$48 = 1L;
        final boolean $ceylontmp$increasing$49 = $ceylontmp$start$47 <= $ceylontmp$end$48;
        final long $ceylontmp$incr$50 = $ceylontmp$increasing$49 ? 1L : -1L;
        for (long breaksWithElse$51 = $ceylontmp$start$47; $ceylontmp$increasing$49 ? breaksWithElse$51 - $ceylontmp$end$48 <= 0L : breaksWithElse$51 - $ceylontmp$end$48 >= 0L; breaksWithElse$51 += $ceylontmp$incr$50) {
            final long breaksWithElse = breaksWithElse$51;
            sum += breaksWithElse;
            doforelse$46 = false;
            break;
        }
        if (doforelse$46) {
            sum = 0L;
        }
        boolean doforelse$52 = true;
        final long $ceylontmp$start$53 = 10L;
        final long $ceylontmp$end$54 = 1L;
        final boolean $ceylontmp$increasing$55 = $ceylontmp$start$53 <= $ceylontmp$end$54;
        final long $ceylontmp$incr$56 = $ceylontmp$increasing$55 ? 1L : -1L;
        for (long breaksWithElse$57 = $ceylontmp$start$53; $ceylontmp$increasing$55 ? breaksWithElse$57 - $ceylontmp$end$54 <= 0L : breaksWithElse$57 - $ceylontmp$end$54 >= 0L; breaksWithElse$57 += $ceylontmp$incr$56) {
            final long breaksWithElse = breaksWithElse$57;
            sum += breaksWithElse;
            if (breaksWithElse == 5L) {
                doforelse$52 = false;
                break;
            }
        }
        if (doforelse$52) {
            sum = 0L;
        }
        final long $ceylontmp$start$59 = 10L;
        final long $ceylontmp$end$60 = 1L;
        final boolean $ceylontmp$increasing$61 = $ceylontmp$start$59 <= $ceylontmp$end$60;
        final long $ceylontmp$incr$62 = $ceylontmp$increasing$61 ? 1L : -1L;
        for (long returns$63 = $ceylontmp$start$59; $ceylontmp$increasing$61 ? returns$63 - $ceylontmp$end$60 <= 0L : returns$63 - $ceylontmp$end$60 >= 0L; returns$63 += $ceylontmp$incr$62) {
            final long returns = returns$63;
            sum += returns;
            break;
        }
        boolean doforelse$64 = true;
        final long $ceylontmp$start$65 = 10L;
        final long $ceylontmp$end$66 = 1L;
        final boolean $ceylontmp$increasing$67 = $ceylontmp$start$65 <= $ceylontmp$end$66;
        final long $ceylontmp$incr$68 = $ceylontmp$increasing$67 ? 1L : -1L;
        for (long returnsWithElse$69 = $ceylontmp$start$65; $ceylontmp$increasing$67 ? returnsWithElse$69 - $ceylontmp$end$66 <= 0L : returnsWithElse$69 - $ceylontmp$end$66 >= 0L; returnsWithElse$69 += $ceylontmp$incr$68) {
            final long returnsWithElse = returnsWithElse$69;
            sum += returnsWithElse;
            doforelse$64 = false;
            break;
        }
        if (doforelse$64) {
            sum = 0L;
        }
        boolean doforelse$70 = true;
        final long $ceylontmp$start$71 = 10L;
        final long $ceylontmp$end$72 = 1L;
        final boolean $ceylontmp$increasing$73 = $ceylontmp$start$71 <= $ceylontmp$end$72;
        final long $ceylontmp$incr$74 = $ceylontmp$increasing$73 ? 1L : -1L;
        for (long returnsWithElse$75 = $ceylontmp$start$71; $ceylontmp$increasing$73 ? returnsWithElse$75 - $ceylontmp$end$72 <= 0L : returnsWithElse$75 - $ceylontmp$end$72 >= 0L; returnsWithElse$75 += $ceylontmp$incr$74) {
            final long returnsWithElse = returnsWithElse$75;
            sum += returnsWithElse;
            if (returnsWithElse == 5L) {
                doforelse$70 = false;
                break;
            }
        }
        if (doforelse$70) {
            sum = 0L;
        }
        final long $ceylontmp$start$77 = 10L;
        final long $ceylontmp$end$78 = 1L;
        final boolean $ceylontmp$increasing$79 = $ceylontmp$start$77 <= $ceylontmp$end$78;
        final long $ceylontmp$incr$80 = $ceylontmp$increasing$79 ? 1L : -1L;
        for (long throws$81 = $ceylontmp$start$77; $ceylontmp$increasing$79 ? throws$81 - $ceylontmp$end$78 <= 0L : throws$81 - $ceylontmp$end$78 >= 0L; throws$81 += $ceylontmp$incr$80) {
            final long throws = throws$81;
            sum += throws;
            break;
        }
        boolean doforelse$82 = true;
        final long $ceylontmp$start$83 = 10L;
        final long $ceylontmp$end$84 = 1L;
        final boolean $ceylontmp$increasing$85 = $ceylontmp$start$83 <= $ceylontmp$end$84;
        final long $ceylontmp$incr$86 = $ceylontmp$increasing$85 ? 1L : -1L;
        for (long throwsWithElse$87 = $ceylontmp$start$83; $ceylontmp$increasing$85 ? throwsWithElse$87 - $ceylontmp$end$84 <= 0L : throwsWithElse$87 - $ceylontmp$end$84 >= 0L; throwsWithElse$87 += $ceylontmp$incr$86) {
            final long throwsWithElse = throwsWithElse$87;
            sum += throwsWithElse;
            doforelse$82 = false;
            break;
        }
        if (doforelse$82) {
            sum = 0L;
        }
        boolean doforelse$88 = true;
        final long $ceylontmp$start$89 = 10L;
        final long $ceylontmp$end$90 = 1L;
        final boolean $ceylontmp$increasing$91 = $ceylontmp$start$89 <= $ceylontmp$end$90;
        final long $ceylontmp$incr$92 = $ceylontmp$increasing$91 ? 1L : -1L;
        for (long throwsWithElse$93 = $ceylontmp$start$89; $ceylontmp$increasing$91 ? throwsWithElse$93 - $ceylontmp$end$90 <= 0L : throwsWithElse$93 - $ceylontmp$end$90 >= 0L; throwsWithElse$93 += $ceylontmp$incr$92) {
            final long throwsWithElse = throwsWithElse$93;
            sum += throwsWithElse;
            if (throwsWithElse == 5L) {
                doforelse$88 = false;
                break;
            }
        }
        if (doforelse$88) {
            sum = 0L;
        }
    }
    
    private final void captured$priv$() {
        final long $ceylontmp$start$95 = 0L;
        final long $ceylontmp$end$96 = 10L;
        final boolean $ceylontmp$increasing$97 = $ceylontmp$start$95 <= $ceylontmp$end$96;
        final long $ceylontmp$incr$98 = $ceylontmp$increasing$97 ? 1L : -1L;
        for (long i$99 = $ceylontmp$start$95; $ceylontmp$increasing$97 ? i$99 - $ceylontmp$end$96 <= 0L : i$99 - $ceylontmp$end$96 >= 0L; i$99 += $ceylontmp$incr$98) {
            final long i = i$99;
            
            final class x_ {
                
                private x_() {
                }
                
                long x() {
                    return i + 10L;
                }
            }
            final x_ x = new x_();
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.OptimizedForWithRange.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.OptimizedForWithRange.class);
}