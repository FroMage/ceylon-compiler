package com.redhat.ceylon.compiler.java.test.structure.reified;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.ceylon.language.SharedAnnotation$annotation$
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({
        "1Inner",
        "1Local",
        "1LocalClass",
        "1LocalClass2",
        "1LocalClassInLocalAttribute",
        "1localAttribute$getter$_",
        "1localMethod_",
        "2Local",
        "2LocalClass",
        "2LocalClass2",
        "2LocalClassInLocalAttribute",
        "2localAttribute$getter$_",
        "2localMethod_",
        "3LocalClass",
        "3LocalClass2",
        "3localAttribute$getter$_",
        "3localMethod_",
        "4LocalClass",
        "4LocalClass2",
        "5LocalClass",
        "5LocalClass2",
        "6LocalClass",
        "7LocalClass",
        "8LocalClass"})
@.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
        value = "Outer",
        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {},
        caseTypes = {})})
public class OuterLocalClass<Outer> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    public OuterLocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Outer) {
        this.$reified$Outer = $reified$Outer;
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl1;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.1LocalClass<ceylon.language::String>")
            class LocalClass2 extends LocalClass<.ceylon.language.String> {
                
                LocalClass2() {
                    super(.ceylon.language.String.$TypeDescriptor$);
                }
                
                @.ceylon.language.SharedAnnotation$annotation$
                @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
                @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.1LocalClass2")
                public final LocalClass2 f() {
                    return (LocalClass2).ceylon.language.nothing_.get_();
                }
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass2.class));
                }
            }
            classDecl1 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl1.getContainer().equals((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1.container == `class OuterLocalClass`"));
            if (((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass2.class)).getContainer().equals((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`class LocalClass2`.container == `class OuterLocalClass`"));
        }
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl2;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "2")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            classDecl2 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl2.getContainer().equals((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl2.container == `class OuterLocalClass`"));
        }
        if (!classDecl1.equals(classDecl2)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1 != classDecl2"));
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.Method
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalMethod"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            final class localMethod_ {
                
                private localMethod_() {
                }
                
                void localMethod() {
                    
                    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                    @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                            value = "Inner",
                            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                            satisfies = {},
                            caseTypes = {})})
                    class LocalClassInLocalMethod<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                        
                        LocalClassInLocalMethod(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                        final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                            this.$reified$Inner = $reified$Inner;
                        }
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                        
                        @.java.lang.Override
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localMethod")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalMethod.class, $reified$Inner));
                        }
                    }
                    final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalMethod.class);
                    final .ceylon.language.meta.declaration.FunctionDeclaration lm$9;
                    .java.lang.Object lm$8 = null;
                    if ((lm$8 = d.getContainer()) instanceof .ceylon.language.meta.declaration.FunctionDeclaration) {
                        lm$9 = (.ceylon.language.meta.declaration.FunctionDeclaration)lm$8;
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is FunctionDeclaration lm = d.container"));
                    if (lm$9.getName().equals("localMethod")) {
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localMethod\""));
                    if (lm$9.getContainer().equals((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class))) {
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `class OuterLocalClass`"));
                }
            }
            final localMethod_ localMethod = new localMethod_();
            localMethod.localMethod();
            final VariableBox<.ceylon.language.meta.declaration.ClassDeclaration> classDecl3 = new VariableBox<.ceylon.language.meta.declaration.ClassDeclaration>(null);
            final VariableBox<.ceylon.language.meta.declaration.ClassDeclaration> classDecl4 = new VariableBox<.ceylon.language.meta.declaration.ClassDeclaration>(null);
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.Attribute(setterClass = localAttribute$setter$_.class)
            @.com.redhat.ceylon.compiler.java.metadata.Name("localAttribute")
            @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.language::GetterLong"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalAttribute"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            final class localAttribute$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
                
                private localAttribute$getter$_() {
                }
                
                @.com.redhat.ceylon.compiler.java.metadata.Transient
                public long get_() {
                    
                    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                    @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                            value = "Inner",
                            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                            satisfies = {},
                            caseTypes = {})})
                    class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                        
                        LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                        final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                            this.$reified$Inner = $reified$Inner;
                        }
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                        
                        @.java.lang.Override
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
                        }
                    }
                    final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
                    final .ceylon.language.meta.declaration.ValueDeclaration lm$14;
                    .java.lang.Object lm$13 = null;
                    if ((lm$13 = d.getContainer()) instanceof .ceylon.language.meta.declaration.ValueDeclaration) {
                        lm$14 = (.ceylon.language.meta.declaration.ValueDeclaration)lm$13;
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is ValueDeclaration lm = d.container"));
                    if (lm$14.getVariable()) {
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.variable"));
                    if (lm$14.getName().equals("localAttribute")) {
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localAttribute\""));
                    if (lm$14.getContainer().equals((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class))) {
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `class OuterLocalClass`"));
                    classDecl3.ref = d;
                    return 1L;
                }
            }
            final .com.redhat.ceylon.compiler.java.language.GetterLong localAttribute$getter$_ = new localAttribute$getter$_();
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            @.com.redhat.ceylon.compiler.java.metadata.Setter(getterClass = localAttribute$getter$_.class)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalAttribute"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration
            final class localAttribute$setter$_ {
                
                private localAttribute$setter$_() {
                }
                private long value;
                
                public void set_(@.com.redhat.ceylon.compiler.java.metadata.Name("localAttribute")
                final long localAttribute) {
                    
                    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                    @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                            value = "Inner",
                            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                            satisfies = {},
                            caseTypes = {})})
                    class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                        
                        LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                        final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                            this.$reified$Inner = $reified$Inner;
                        }
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                        
                        @.java.lang.Override
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("$setter$1localAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
                        }
                    }
                    final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
                    final .ceylon.language.meta.declaration.SetterDeclaration lm$20;
                    .java.lang.Object lm$19 = null;
                    if ((lm$19 = d.getContainer()) instanceof .ceylon.language.meta.declaration.SetterDeclaration) {
                        lm$20 = (.ceylon.language.meta.declaration.SetterDeclaration)lm$19;
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is SetterDeclaration lm = d.container"));
                    if (lm$20.getName().equals("localAttribute")) {
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localAttribute\""));
                    if (lm$20.getContainer().equals((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class))) {
                    } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `class OuterLocalClass`"));
                    classDecl4.ref = d;
                }
            }
            final localAttribute$setter$_ localAttribute$setter$_ = new localAttribute$setter$_();
            final long attr = localAttribute$getter$_.get_();
            localAttribute$setter$_.set_(1L);
            .java.lang.String $ceylontmp$assert$23 = null;
            final .ceylon.language.meta.declaration.ClassDeclaration cd4$27;
            final .ceylon.language.meta.declaration.ClassDeclaration cd3$25;
            .ceylon.language.meta.declaration.ClassDeclaration cd3$24 = null;
            if ((cd3$24 = classDecl3.ref) != null) {
                cd3$25 = cd3$24;
                .ceylon.language.meta.declaration.ClassDeclaration cd4$26 = null;
                if ((cd4$26 = classDecl4.ref) != null) {
                    cd4$27 = cd4$26;
                    if (!cd3$25.equals(cd4$27)) {
                    } else {
                        $ceylontmp$assert$23 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists cd3 = classDecl3" + (.java.lang.System.lineSeparator() + "\tunviolated ") + "exists cd4 = classDecl4" + (.java.lang.System.lineSeparator() + "\tviolated ") + "cd3 != cd4";
                    }
                } else {
                    cd4$27 = null;
                    $ceylontmp$assert$23 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists cd3 = classDecl3" + (.java.lang.System.lineSeparator() + "\tviolated ") + "exists cd4 = classDecl4" + (.java.lang.System.lineSeparator() + "\tuntested ") + "cd3 != cd4";
                }
            } else {
                cd3$25 = null;
                cd4$27 = null;
                $ceylontmp$assert$23 = .java.lang.System.lineSeparator() + "\tviolated " + "exists cd3 = classDecl3" + (.java.lang.System.lineSeparator() + "\tuntested ") + "exists cd4 = classDecl4" + (.java.lang.System.lineSeparator() + "\tuntested ") + "cd3 != cd4";
            }
            if ($ceylontmp$assert$23 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$23);
        }
        this.classDecl3 = null;
        this.classDecl4 = null;
        final long attr = getPrivateAttribute$priv$();
        setPrivateAttribute$priv$(1L);
        .java.lang.String $ceylontmp$assert$43 = null;
        final .ceylon.language.meta.declaration.ClassDeclaration cd4$47;
        final .ceylon.language.meta.declaration.ClassDeclaration cd3$45;
        .ceylon.language.meta.declaration.ClassDeclaration cd3$44 = null;
        if ((cd3$44 = getClassDecl3$priv$()) != null) {
            cd3$45 = cd3$44;
            .ceylon.language.meta.declaration.ClassDeclaration cd4$46 = null;
            if ((cd4$46 = getClassDecl4$priv$()) != null) {
                cd4$47 = cd4$46;
                if (!cd3$45.equals(cd4$47)) {
                } else {
                    $ceylontmp$assert$43 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists cd3 = classDecl3" + (.java.lang.System.lineSeparator() + "\tunviolated ") + "exists cd4 = classDecl4" + (.java.lang.System.lineSeparator() + "\tviolated ") + "cd3 != cd4";
                }
            } else {
                cd4$47 = null;
                $ceylontmp$assert$43 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists cd3 = classDecl3" + (.java.lang.System.lineSeparator() + "\tviolated ") + "exists cd4 = classDecl4" + (.java.lang.System.lineSeparator() + "\tuntested ") + "cd3 != cd4";
            }
        } else {
            cd3$45 = null;
            cd4$47 = null;
            $ceylontmp$assert$43 = .java.lang.System.lineSeparator() + "\tviolated " + "exists cd3 = classDecl3" + (.java.lang.System.lineSeparator() + "\tuntested ") + "exists cd4 = classDecl4" + (.java.lang.System.lineSeparator() + "\tuntested ") + "cd3 != cd4";
        }
        if ($ceylontmp$assert$43 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$43);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Outer;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private .ceylon.language.meta.declaration.ClassDeclaration classDecl3;
    
    @.ceylon.language.VariableAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("variable")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language.meta.declaration::ClassDeclaration")
    private final .ceylon.language.meta.declaration.ClassDeclaration getClassDecl3$priv$() {
        return classDecl3;
    }
    
    private final void setClassDecl3$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("classDecl3")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language.meta.declaration::ClassDeclaration")
    final .ceylon.language.meta.declaration.ClassDeclaration classDecl3) {
        this.classDecl3 = classDecl3;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private .ceylon.language.meta.declaration.ClassDeclaration classDecl4;
    
    @.ceylon.language.VariableAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("variable")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language.meta.declaration::ClassDeclaration")
    private final .ceylon.language.meta.declaration.ClassDeclaration getClassDecl4$priv$() {
        return classDecl4;
    }
    
    private final void setClassDecl4$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("classDecl4")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language.meta.declaration::ClassDeclaration")
    final .ceylon.language.meta.declaration.ClassDeclaration classDecl4) {
        this.classDecl4 = classDecl4;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    private final long getPrivateAttribute$priv$() {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Inner",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                this.$reified$Inner = $reified$Inner;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("privateAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
            }
        }
        final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
        final .ceylon.language.meta.declaration.ValueDeclaration lm$30;
        .java.lang.Object lm$29 = null;
        if ((lm$29 = d.getContainer()) instanceof .ceylon.language.meta.declaration.ValueDeclaration) {
            lm$30 = (.ceylon.language.meta.declaration.ValueDeclaration)lm$29;
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is ValueDeclaration lm = d.container"));
        if (lm$30.getVariable()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.variable"));
        if (lm$30.getName().equals("privateAttribute")) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"privateAttribute\""));
        if (lm$30.getContainer().equals((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class))) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `class OuterLocalClass`"));
        setClassDecl3$priv$(d);
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Inner",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                this.$reified$Inner = $reified$Inner;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("privateAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
            }
        }
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.privateAttribute.1LocalClass<ceylon.language::String>")
        class LocalClass2 extends LocalClass<.ceylon.language.String> {
            
            LocalClass2() {
                super(.ceylon.language.String.$TypeDescriptor$);
            }
            
            @.ceylon.language.SharedAnnotation$annotation$
            @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
            @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.privateAttribute.1LocalClass2")
            public final LocalClass2 f() {
                return (LocalClass2).ceylon.language.nothing_.get_();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("privateAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass2.class));
            }
        }
        final .ceylon.language.meta.declaration.ClassDeclaration lc = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
        if (lc.getContainer().equals(lm$30)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lc.container == lm"));
        if (((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass2.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "f").getName().equals("f")) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`function LocalClass2.f`.name == \"f\""));
        return 1L;
    }
    
    private final void setPrivateAttribute$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("privateAttribute")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long privateAttribute) {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Inner",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                this.$reified$Inner = $reified$Inner;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("privateAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
            }
        }
        final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
        final .ceylon.language.meta.declaration.SetterDeclaration lm$38;
        .java.lang.Object lm$37 = null;
        if ((lm$37 = d.getContainer()) instanceof .ceylon.language.meta.declaration.SetterDeclaration) {
            lm$38 = (.ceylon.language.meta.declaration.SetterDeclaration)lm$37;
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is SetterDeclaration lm = d.container"));
        if (lm$38.getName().equals("privateAttribute")) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"privateAttribute\""));
        if (lm$38.getContainer().equals((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class))) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `class OuterLocalClass`"));
        setClassDecl4$priv$(d);
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Inner",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                this.$reified$Inner = $reified$Inner;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("privateAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
            }
        }
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.privateAttribute.1LocalClass<ceylon.language::String>")
        class LocalClass2 extends LocalClass<.ceylon.language.String> {
            
            LocalClass2() {
                super(.ceylon.language.String.$TypeDescriptor$);
            }
            
            @.ceylon.language.SharedAnnotation$annotation$
            @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
            @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.privateAttribute.1LocalClass2")
            public final LocalClass2 f() {
                return (LocalClass2).ceylon.language.nothing_.get_();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("privateAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass2.class));
            }
        }
        final .ceylon.language.meta.declaration.ClassDeclaration lc = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
        if (lc.getContainer().equals(lm$38)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lc.container == lm"));
        if (((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass2.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "f").getName().equals("f")) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`function LocalClass2.f`.name == \"f\""));
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    public final void capture() {
        final long attr = getPrivateAttribute$priv$();
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public final long getOuterAttribute() {
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl1;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.outerAttribute.1LocalClass<ceylon.language::String>")
            class LocalClass2 extends LocalClass<.ceylon.language.String> {
                
                LocalClass2() {
                    super(.ceylon.language.String.$TypeDescriptor$);
                }
                
                @.ceylon.language.SharedAnnotation$annotation$
                @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
                @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.outerAttribute.1LocalClass2")
                public final LocalClass2 f() {
                    return (LocalClass2).ceylon.language.nothing_.get_();
                }
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass2.class));
                }
            }
            classDecl1 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl1.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1.container == `value outerAttribute`"));
            if (((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass2.class)).getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`class LocalClass2`.container == `value outerAttribute`"));
        }
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl2;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "2")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            classDecl2 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl2.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl2.container == `value outerAttribute`"));
        }
        if (!classDecl1.equals(classDecl2)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1 != classDecl2"));
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Method
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalMethod"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localMethod_ {
            
            private localMethod_() {
            }
            
            void localMethod() {
                
                @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                        value = "Inner",
                        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                        satisfies = {},
                        caseTypes = {})})
                class LocalClassInLocalMethod<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                    
                    LocalClassInLocalMethod(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                        this.$reified$Inner = $reified$Inner;
                    }
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localMethod")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalMethod.class, $reified$Inner));
                    }
                }
                final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalMethod.class);
                final .ceylon.language.meta.declaration.FunctionDeclaration lm$56;
                .java.lang.Object lm$55 = null;
                if ((lm$55 = d.getContainer()) instanceof .ceylon.language.meta.declaration.FunctionDeclaration) {
                    lm$56 = (.ceylon.language.meta.declaration.FunctionDeclaration)lm$55;
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is FunctionDeclaration lm = d.container"));
                if (lm$56.getName().equals("localMethod")) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localMethod\""));
                if (lm$56.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `value outerAttribute`"));
            }
        }
        final localMethod_ localMethod = new localMethod_();
        localMethod.localMethod();
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Attribute
        @.com.redhat.ceylon.compiler.java.metadata.Name("localAttribute")
        @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.language::GetterLong"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalAttribute"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localAttribute$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private localAttribute$getter$_() {
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Transient
            public long get_() {
                
                @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                        value = "Inner",
                        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                        satisfies = {},
                        caseTypes = {})})
                class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                    
                    LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                        this.$reified$Inner = $reified$Inner;
                    }
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
                    }
                }
                final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
                final .ceylon.language.meta.declaration.ValueDeclaration lm$61;
                .java.lang.Object lm$60 = null;
                if ((lm$60 = d.getContainer()) instanceof .ceylon.language.meta.declaration.ValueDeclaration) {
                    lm$61 = (.ceylon.language.meta.declaration.ValueDeclaration)lm$60;
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is ValueDeclaration lm = d.container"));
                if (lm$61.getName().equals("localAttribute")) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localAttribute\""));
                if (lm$61.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `value outerAttribute`"));
                return 1L;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong localAttribute$getter$_ = new localAttribute$getter$_();
        final long attr = localAttribute$getter$_.get_();
        return 1L;
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "Method",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public final <Method>void outerMethod(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OuterLocalClass$outerMethod$Method, @.com.redhat.ceylon.compiler.java.metadata.Name("o")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Object")
    final .java.lang.Object o) {
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl1;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterLocalClass$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.outerMethod.1LocalClass<Method>")
            class LocalClass2 extends LocalClass<Method> {
                
                LocalClass2() {
                    super($reified$OuterLocalClass$outerMethod$Method);
                }
                
                @.ceylon.language.SharedAnnotation$annotation$
                @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
                @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
                        value = "com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.outerMethod.1LocalClass<ceylon.language::String>&com.redhat.ceylon.compiler.java.test.structure.reified::OuterLocalClass.outerMethod.1LocalClass2",
                        erased = true)
                public final .java.lang.Object f() {
                    return .ceylon.language.nothing_.get_();
                }
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterLocalClass$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass2.class));
                }
            }
            classDecl1 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl1.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1.container == `function outerMethod`"));
            if (((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass2.class)).getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`class LocalClass2`.container == `function outerMethod`"));
        }
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl2;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "2")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterLocalClass$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            classDecl2 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl2.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl2.container == `function outerMethod`"));
        }
        if (!classDecl1.equals(classDecl2)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1 != classDecl2"));
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Method
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalMethod"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localMethod_ {
            
            private localMethod_() {
            }
            
            void localMethod() {
                
                @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                        value = "Inner",
                        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                        satisfies = {},
                        caseTypes = {})})
                class LocalClassInLocalMethod<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                    
                    LocalClassInLocalMethod(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                        this.$reified$Inner = $reified$Inner;
                    }
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterLocalClass$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localMethod")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalMethod.class, $reified$Inner));
                    }
                }
                final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalMethod.class);
                final .ceylon.language.meta.declaration.FunctionDeclaration lm$72;
                .java.lang.Object lm$71 = null;
                if ((lm$71 = d.getContainer()) instanceof .ceylon.language.meta.declaration.FunctionDeclaration) {
                    lm$72 = (.ceylon.language.meta.declaration.FunctionDeclaration)lm$71;
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is FunctionDeclaration lm = d.container"));
                if (lm$72.getName().equals("localMethod")) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localMethod\""));
                if (lm$72.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `function outerMethod`"));
            }
        }
        final localMethod_ localMethod = new localMethod_();
        localMethod.localMethod();
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Attribute
        @.com.redhat.ceylon.compiler.java.metadata.Name("localAttribute")
        @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.language::GetterLong"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalAttribute"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localAttribute$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private localAttribute$getter$_() {
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Transient
            public long get_() {
                
                @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                        value = "Inner",
                        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                        satisfies = {},
                        caseTypes = {})})
                class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                    
                    LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                        this.$reified$Inner = $reified$Inner;
                    }
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterLocalClass$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
                    }
                }
                final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
                final .ceylon.language.meta.declaration.ValueDeclaration lm$77;
                .java.lang.Object lm$76 = null;
                if ((lm$76 = d.getContainer()) instanceof .ceylon.language.meta.declaration.ValueDeclaration) {
                    lm$77 = (.ceylon.language.meta.declaration.ValueDeclaration)lm$76;
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is ValueDeclaration lm = d.container"));
                if (lm$77.getName().equals("localAttribute")) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localAttribute\""));
                if (lm$77.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `function outerMethod`"));
                return 1L;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong localAttribute$getter$_ = new localAttribute$getter$_();
        final long attr1 = localAttribute$getter$_.get_();
        <.ceylon.language.String>reifiedMethod$priv$(.ceylon.language.String.$TypeDescriptor$, null);
        final long attr2 = getOuterAttribute();
        final .java.lang.String str = toString();
        final long h = hashCode();
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "Method",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    private final <Method>void reifiedMethod$priv$(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OuterLocalClass$reifiedMethod$Method, @.com.redhat.ceylon.compiler.java.metadata.Name("arg")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language::Object")
    final .java.lang.Object arg) {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "T",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class Inner<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            Inner(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
                this.$reified$T = $reified$T;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("reifiedMethod", $reified$OuterLocalClass$reifiedMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Inner.class, $reified$T));
            }
        }
        .java.lang.Object arg$81;
        if ((arg$81 = arg) != null) {
            final .java.lang.Object arg$86 = arg$81;
            if (((.ceylon.language.meta.model.Type<? extends Method>).ceylon.language.meta.typeLiteral_.typeLiteral($reified$OuterLocalClass$reifiedMethod$Method)).equals((.ceylon.language.meta.model.Class<? extends .ceylon.language.Integer, ? super .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Integer.$TypeDescriptor$))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`Method` == `Integer`"));
            if (!(arg$86 instanceof Inner && .com.redhat.ceylon.compiler.java.Util.isReified(arg, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("reifiedMethod", $reified$OuterLocalClass$reifiedMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Inner.class, .ceylon.language.Integer.$TypeDescriptor$))))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "! is Inner<Integer> arg"));
        } else {
            if (((.ceylon.language.meta.model.Type<? extends Method>).ceylon.language.meta.typeLiteral_.typeLiteral($reified$OuterLocalClass$reifiedMethod$Method)).equals((.ceylon.language.meta.model.Class<? extends .ceylon.language.String, ? super .ceylon.language.Tuple<.ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>, ? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>>>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.String.$TypeDescriptor$))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`Method` == `String`"));
            final .java.lang.Object inner = new Inner<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$);
            final Inner<.ceylon.language.Integer> inner$85;
            .java.lang.Object inner$84 = null;
            if ((inner$84 = inner) instanceof Inner && .com.redhat.ceylon.compiler.java.Util.isReified(inner$84, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("reifiedMethod", $reified$OuterLocalClass$reifiedMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Inner.class, .ceylon.language.Integer.$TypeDescriptor$)))) {
                inner$85 = (Inner)inner$84;
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Inner<Integer> inner"));
            <.ceylon.language.Integer>reifiedMethod$priv$(.ceylon.language.Integer.$TypeDescriptor$, inner$85);
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public final .java.lang.String toString() {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        class Local implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            Local() {
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("string")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Local.class));
            }
        }
        if (((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(Local.class)).getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "string"))) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`class Local`.container == `value string`"));
        return "";
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public final int hashCode() {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        class Local implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            Local() {
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("hash")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Local.class));
            }
        }
        if (((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(Local.class)).getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "hash"))) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`class Local`.container == `value hash`"));
        return (int)(
            let
            {
                long $ceylontmp$hash$93 = 1L;
            }
            returning $ceylontmp$hash$93 ^ $ceylontmp$hash$93 >>> 32;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass.class, $reified$Outer);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Method
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1Inner"})
final class reifiedMethod_ {
    
    private reifiedMethod_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "Method",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    static <Method>void reifiedMethod(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$reifiedMethod$Method, @.com.redhat.ceylon.compiler.java.metadata.Name("arg")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language::Object")
    final .java.lang.Object arg) {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "T",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class Inner<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            Inner(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
                this.$reified$T = $reified$T;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.structure.reified.reifiedMethod_.class, $reified$reifiedMethod$Method), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Inner.class, $reified$T));
            }
        }
        .java.lang.Object arg$95;
        if ((arg$95 = arg) != null) {
            final .java.lang.Object arg$100 = arg$95;
            if (((.ceylon.language.meta.model.Type<? extends Method>).ceylon.language.meta.typeLiteral_.typeLiteral($reified$reifiedMethod$Method)).equals((.ceylon.language.meta.model.Class<? extends .ceylon.language.Integer, ? super .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Integer.$TypeDescriptor$))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`Method` == `Integer`"));
            if (!(arg$100 instanceof Inner && .com.redhat.ceylon.compiler.java.Util.isReified(arg, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.structure.reified.reifiedMethod_.class, $reified$reifiedMethod$Method), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Inner.class, .ceylon.language.Integer.$TypeDescriptor$))))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "! is Inner<Integer> arg"));
        } else {
            if (((.ceylon.language.meta.model.Type<? extends Method>).ceylon.language.meta.typeLiteral_.typeLiteral($reified$reifiedMethod$Method)).equals((.ceylon.language.meta.model.Class<? extends .ceylon.language.String, ? super .ceylon.language.Tuple<.ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>, ? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>>>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.String.$TypeDescriptor$))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`Method` == `String`"));
            final .java.lang.Object inner = new Inner<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$);
            final Inner<.ceylon.language.Integer> inner$99;
            .java.lang.Object inner$98 = null;
            if ((inner$98 = inner) instanceof Inner && .com.redhat.ceylon.compiler.java.Util.isReified(inner$98, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.structure.reified.reifiedMethod_.class, $reified$reifiedMethod$Method), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Inner.class, .ceylon.language.Integer.$TypeDescriptor$)))) {
                inner$99 = (Inner)inner$98;
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Inner<Integer> inner"));
            .com.redhat.ceylon.compiler.java.test.structure.reified.reifiedMethod_.<.ceylon.language.Integer>reifiedMethod(.ceylon.language.Integer.$TypeDescriptor$, inner$99);
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class testToplevels_ {
    
    private testToplevels_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void testToplevels() {
        final long attr = .com.redhat.ceylon.compiler.java.test.structure.reified.toplevelAttribute_.get_();
        .com.redhat.ceylon.compiler.java.test.structure.reified.toplevelAttribute_.set_(1L);
        .java.lang.String $ceylontmp$assert$104 = null;
        final .ceylon.language.meta.declaration.ClassDeclaration cd4$108;
        final .ceylon.language.meta.declaration.ClassDeclaration cd3$106;
        .ceylon.language.meta.declaration.ClassDeclaration cd3$105 = null;
        if ((cd3$105 = .com.redhat.ceylon.compiler.java.test.structure.reified.classDecl3_.get_()) != null) {
            cd3$106 = cd3$105;
            .ceylon.language.meta.declaration.ClassDeclaration cd4$107 = null;
            if ((cd4$107 = .com.redhat.ceylon.compiler.java.test.structure.reified.classDecl4_.get_()) != null) {
                cd4$108 = cd4$107;
                if (!cd3$106.equals(cd4$108)) {
                } else {
                    $ceylontmp$assert$104 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists cd3 = classDecl3" + (.java.lang.System.lineSeparator() + "\tunviolated ") + "exists cd4 = classDecl4" + (.java.lang.System.lineSeparator() + "\tviolated ") + "cd3 != cd4";
                }
            } else {
                cd4$108 = null;
                $ceylontmp$assert$104 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists cd3 = classDecl3" + (.java.lang.System.lineSeparator() + "\tviolated ") + "exists cd4 = classDecl4" + (.java.lang.System.lineSeparator() + "\tuntested ") + "cd3 != cd4";
            }
        } else {
            cd3$106 = null;
            cd4$108 = null;
            $ceylontmp$assert$104 = .java.lang.System.lineSeparator() + "\tviolated " + "exists cd3 = classDecl3" + (.java.lang.System.lineSeparator() + "\tuntested ") + "exists cd4 = classDecl4" + (.java.lang.System.lineSeparator() + "\tuntested ") + "cd3 != cd4";
        }
        if ($ceylontmp$assert$104 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$104);
        .com.redhat.ceylon.compiler.java.test.structure.reified.reifiedMethod_.<.ceylon.language.String>reifiedMethod(.ceylon.language.String.$TypeDescriptor$, null);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.structure.reified.testToplevels_.testToplevels();
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Members({@.com.redhat.ceylon.compiler.java.metadata.Member(klass = .com.redhat.ceylon.compiler.java.test.structure.reified.Outer.Inner.class)})
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClass"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
        value = "O",
        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {},
        caseTypes = {})})
class Outer<O> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    Outer(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$O) {
        this.$reified$O = $reified$O;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$O;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.test.structure.reified.Outer<O>.Inner<O> Inner$new$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$O) {
        return new Inner<O>($reified$O);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Container(klass = .com.redhat.ceylon.compiler.java.test.structure.reified.Outer.class)
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "O",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public class Inner<O> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
        
        protected Inner(@.com.redhat.ceylon.compiler.java.metadata.Ignore
        final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$O) {
            this.$reified$O = $reified$O;
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$O;
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.Outer.class, .com.redhat.ceylon.compiler.java.test.structure.reified.Outer.this.$reified$O), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.Outer.Inner.class, $reified$O));
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "O",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public final <O>void f(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Outer$f$O, @.com.redhat.ceylon.compiler.java.metadata.Name("o")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language::Object")
    final .java.lang.Object o) {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "O",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class LocalClass<O> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$O) {
                this.$reified$O = $reified$O;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$O;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.Outer.class, .com.redhat.ceylon.compiler.java.test.structure.reified.Outer.this.$reified$O), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("f", $reified$Outer$f$O)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$O));
            }
        }
        if (((.ceylon.language.meta.model.Type<? extends O>).ceylon.language.meta.typeLiteral_.typeLiteral($reified$Outer$f$O)).equals((.ceylon.language.meta.model.Class<? extends .ceylon.language.String, ? super .ceylon.language.Tuple<.ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>, ? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>>>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.String.$TypeDescriptor$))) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`O` == `String`"));
        .java.lang.Object o$111;
        if ((o$111 = o) != null) {
            final .java.lang.Object o$112 = o$111;
            final LocalClass<.ceylon.language.Integer> o$115;
            .java.lang.Object o$114 = null;
            if ((o$114 = o$112) instanceof LocalClass && .com.redhat.ceylon.compiler.java.Util.isReified(o$114, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.Outer.class, .com.redhat.ceylon.compiler.java.test.structure.reified.Outer.this.$reified$O), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("f", $reified$Outer$f$O)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, .ceylon.language.Integer.$TypeDescriptor$)))) {
                o$115 = (LocalClass)o$114;
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is LocalClass<Integer> o"));
        } else {
            <.ceylon.language.String>f(.ceylon.language.String.$TypeDescriptor$, new LocalClass<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$));
        }
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.reified.Outer(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.Outer.class, $reified$O);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Name("LocalI2")
@.com.redhat.ceylon.compiler.java.metadata.LocalContainer(
        path = {
                "OuterInterface",
                "privateMethodForLocalInterfaces",
                "1LocalI1",
                "privateMethod"},
        companionClassName = "")
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({})
interface OuterInterface$privateMethodForLocalInterfaces$LocalI1$privateMethod$LocalI2<Outer> {
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Name("LocalI1")
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"::OuterInterface$privateMethodForLocalInterfaces$LocalI1$privateMethod$LocalI2"})
@.com.redhat.ceylon.compiler.java.metadata.LocalContainer(
        path = {
                "OuterInterface",
                "privateMethodForLocalInterfaces"},
        companionClassName = "1LocalI1$impl")
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({})
interface OuterInterface$privateMethodForLocalInterfaces$LocalI1<Outer> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .java.lang.Object LocalI1$impl();
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    public void f();
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({
        "1Inner",
        "1Local",
        "1LocalC",
        "1LocalClass",
        "1LocalClass2",
        "1localAttribute$getter$_",
        "1localMethod_",
        "2Local",
        "2LocalClass",
        "2LocalClass2",
        "2localAttribute$getter$_",
        "2localMethod_",
        "3LocalClass",
        "4LocalClass",
        "::OuterInterface$privateMethodForLocalInterfaces$LocalI1"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
        value = "Outer",
        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {},
        caseTypes = {})})
interface OuterInterface<Outer> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl<Outer> $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$impl();
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public void defaulted();
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public abstract long defaulted$i();
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    public void defaulted(@.com.redhat.ceylon.compiler.java.metadata.Name("i")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long i);
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public long getOuterAttribute();
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "Method",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public <Method>void outerMethod(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OuterInterface$outerMethod$Method, @.com.redhat.ceylon.compiler.java.metadata.Name("o")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Object")
    final .java.lang.Object o);
}
@.com.redhat.ceylon.compiler.java.metadata.Ignore
final class OuterInterface$impl<Outer> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    OuterInterface$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Outer, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface<Outer> $this) {
        this.$reified$Outer = $reified$Outer;
        this.$this = $this;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Outer;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface<Outer> $this;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public void $refine$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Outer) {
        this.$reified$Outer = $reified$Outer;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    private final long getPrivateAttr$priv$() {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        class Local implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            Local() {
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("privateAttr")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Local.class));
            }
        }
        return 1L;
    }
    
    private final void setPrivateAttr$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("privateAttr")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long privateAttr) {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        class Local implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            Local() {
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("privateAttr")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Local.class));
            }
        }
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private void privateDefaulted$priv$() {
        (
            let
            {
                long $ceylontmp$i$116 = privateDefaulted$i();
                privateDefaulted$priv$$canonical$($ceylontmp$i$116);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final long privateDefaulted$i() {
        return 1L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private void privateDefaulted$priv$$canonical$(final long i) {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    private void privateDefaulted$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("i")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long i) {
        (
            let
            {
                privateDefaulted$priv$$canonical$(i);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public void defaulted() {
        (
            let
            {
                long $ceylontmp$i$117 = defaulted$i();
                defaulted$canonical$($ceylontmp$i$117);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final long defaulted$i() {
        return 1L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private void defaulted$canonical$(final long i) {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public void defaulted(final long i) {
        (
            let
            {
                defaulted$canonical$(i);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final long getOuterAttribute() {
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl1;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.structure.reified::OuterInterface.outerAttribute.1LocalClass<ceylon.language::String>")
            class LocalClass2 extends LocalClass<.ceylon.language.String> {
                
                LocalClass2() {
                    super(.ceylon.language.String.$TypeDescriptor$);
                }
                
                @.ceylon.language.SharedAnnotation$annotation$
                @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
                @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::OuterInterface.outerAttribute.1LocalClass2")
                public final LocalClass2 f() {
                    return (LocalClass2).ceylon.language.nothing_.get_();
                }
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass2.class));
                }
            }
            classDecl1 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl1.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1.container == `value outerAttribute`"));
            if (((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass2.class)).getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`class LocalClass2`.container == `value outerAttribute`"));
        }
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl2;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "2")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            classDecl2 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl2.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl2.container == `value outerAttribute`"));
        }
        if (!classDecl1.equals(classDecl2)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1 != classDecl2"));
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Method
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalMethod"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localMethod_ {
            
            private localMethod_() {
            }
            
            void localMethod() {
                
                @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                        value = "Inner",
                        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                        satisfies = {},
                        caseTypes = {})})
                class LocalClassInLocalMethod<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                    
                    LocalClassInLocalMethod(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                        this.$reified$Inner = $reified$Inner;
                    }
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localMethod")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalMethod.class, $reified$Inner));
                    }
                }
                final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalMethod.class);
                final .ceylon.language.meta.declaration.FunctionDeclaration lm$126;
                .java.lang.Object lm$125 = null;
                if ((lm$125 = d.getContainer()) instanceof .ceylon.language.meta.declaration.FunctionDeclaration) {
                    lm$126 = (.ceylon.language.meta.declaration.FunctionDeclaration)lm$125;
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is FunctionDeclaration lm = d.container"));
                if (lm$126.getName().equals("localMethod")) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localMethod\""));
                if (lm$126.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `value outerAttribute`"));
            }
        }
        final localMethod_ localMethod = new localMethod_();
        localMethod.localMethod();
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Attribute
        @.com.redhat.ceylon.compiler.java.metadata.Name("localAttribute")
        @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.language::GetterLong"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalAttribute"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localAttribute$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private localAttribute$getter$_() {
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Transient
            public long get_() {
                
                @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                        value = "Inner",
                        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                        satisfies = {},
                        caseTypes = {})})
                class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                    
                    LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                        this.$reified$Inner = $reified$Inner;
                    }
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
                    }
                }
                final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
                final .ceylon.language.meta.declaration.ValueDeclaration lm$131;
                .java.lang.Object lm$130 = null;
                if ((lm$130 = d.getContainer()) instanceof .ceylon.language.meta.declaration.ValueDeclaration) {
                    lm$131 = (.ceylon.language.meta.declaration.ValueDeclaration)lm$130;
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is ValueDeclaration lm = d.container"));
                if (lm$131.getName().equals("localAttribute")) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localAttribute\""));
                if (lm$131.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "outerAttribute"))) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `value outerAttribute`"));
                return 1L;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong localAttribute$getter$_ = new localAttribute$getter$_();
        final long attr = localAttribute$getter$_.get_();
        return 1L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Method>void outerMethod(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OuterInterface$outerMethod$Method, final .java.lang.Object o) {
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl1;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterInterface$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            @.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.structure.reified::OuterInterface.outerMethod.1LocalClass<Method>")
            class LocalClass2 extends LocalClass<Method> {
                
                LocalClass2() {
                    super($reified$OuterInterface$outerMethod$Method);
                }
                
                @.ceylon.language.SharedAnnotation$annotation$
                @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
                @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
                        value = "com.redhat.ceylon.compiler.java.test.structure.reified::OuterInterface.outerMethod.1LocalClass<ceylon.language::String>&com.redhat.ceylon.compiler.java.test.structure.reified::OuterInterface.outerMethod.1LocalClass2",
                        erased = true)
                public final .java.lang.Object f() {
                    return .ceylon.language.nothing_.get_();
                }
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterInterface$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass2.class));
                }
            }
            classDecl1 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl1.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1.container == `function outerMethod`"));
            if (((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass2.class)).getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`class LocalClass2`.container == `function outerMethod`"));
        }
        final .ceylon.language.meta.declaration.ClassDeclaration classDecl2;
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "2")
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Inner",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
            class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                
                LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                    this.$reified$Inner = $reified$Inner;
                }
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                    return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterInterface$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
                }
            }
            classDecl2 = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
            if (classDecl2.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl2.container == `function outerMethod`"));
        }
        if (!classDecl1.equals(classDecl2)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "classDecl1 != classDecl2"));
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Method
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalMethod"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localMethod_ {
            
            private localMethod_() {
            }
            
            void localMethod() {
                
                @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                        value = "Inner",
                        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                        satisfies = {},
                        caseTypes = {})})
                class LocalClassInLocalMethod<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                    
                    LocalClassInLocalMethod(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                        this.$reified$Inner = $reified$Inner;
                    }
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterInterface$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localMethod")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalMethod.class, $reified$Inner));
                    }
                }
                final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalMethod.class);
                final .ceylon.language.meta.declaration.FunctionDeclaration lm$142;
                .java.lang.Object lm$141 = null;
                if ((lm$141 = d.getContainer()) instanceof .ceylon.language.meta.declaration.FunctionDeclaration) {
                    lm$142 = (.ceylon.language.meta.declaration.FunctionDeclaration)lm$141;
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is FunctionDeclaration lm = d.container"));
                if (lm$142.getName().equals("localMethod")) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localMethod\""));
                if (lm$142.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `function outerMethod`"));
            }
        }
        final localMethod_ localMethod = new localMethod_();
        localMethod.localMethod();
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Attribute
        @.com.redhat.ceylon.compiler.java.metadata.Name("localAttribute")
        @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.language::GetterLong"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1LocalClassInLocalAttribute"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localAttribute$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private localAttribute$getter$_() {
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Transient
            public long get_() {
                
                @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                        value = "Inner",
                        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                        satisfies = {},
                        caseTypes = {})})
                class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                    
                    LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
                    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                        this.$reified$Inner = $reified$Inner;
                    }
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("outerMethod", $reified$OuterInterface$outerMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1localAttribute")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
                    }
                }
                final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
                final .ceylon.language.meta.declaration.ValueDeclaration lm$147;
                .java.lang.Object lm$146 = null;
                if ((lm$146 = d.getContainer()) instanceof .ceylon.language.meta.declaration.ValueDeclaration) {
                    lm$147 = (.ceylon.language.meta.declaration.ValueDeclaration)lm$146;
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is ValueDeclaration lm = d.container"));
                if (lm$147.getName().equals("localAttribute")) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"localAttribute\""));
                if (lm$147.getContainer().equals(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "outerMethod"))) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `function outerMethod`"));
                return 1L;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong localAttribute$getter$_ = new localAttribute$getter$_();
        final long attr1 = localAttribute$getter$_.get_();
        <.ceylon.language.String>reifiedMethod$priv$(.ceylon.language.String.$TypeDescriptor$, null);
        final long outerAttr = $this.getOuterAttribute();
        privateMethodForLocalInterfaces$priv$();
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    private void privateMethodForLocalInterfaces$priv$() {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        final class LocalI1$impl {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            LocalI1$impl(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$privateMethodForLocalInterfaces$LocalI1<Outer> $this) {
                this.$this = $this;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$privateMethodForLocalInterfaces$LocalI1<Outer> $this;
            
            @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
            private void privateMethod$priv$() {
                if (((.ceylon.language.meta.declaration.Declaration)((.ceylon.language.meta.declaration.InterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$privateMethodForLocalInterfaces$LocalI1$privateMethod$LocalI2.class)).getContainer()).getName().equals("privateMethod")) {
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`interface LocalI2`.container.name == \"privateMethod\""));
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public void f() {
                privateMethod$priv$();
            }
        }
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.test.structure.reified::OuterInterface.privateMethodForLocalInterfaces.1LocalI1"})
        class LocalC implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$privateMethodForLocalInterfaces$LocalI1<Outer> {
            
            LocalC() {
                this.$com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$privateMethodForLocalInterfaces$LocalI1$this$ = new LocalI1$impl(this);
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            protected final LocalI1$impl $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$privateMethodForLocalInterfaces$LocalI1$this$;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public LocalI1$impl LocalI1$impl() {
                return $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$privateMethodForLocalInterfaces$LocalI1$this$;
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public final void f() {
                $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$privateMethodForLocalInterfaces$LocalI1$this$.f();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("privateMethodForLocalInterfaces")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalC.class));
            }
        }
        new LocalC().f();
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "Method",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    private <Method>void reifiedMethod$priv$(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OuterInterface$reifiedMethod$Method, @.com.redhat.ceylon.compiler.java.metadata.Name("arg")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language::Object")
    final .java.lang.Object arg) {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "T",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class Inner<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            Inner(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
                this.$reified$T = $reified$T;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("reifiedMethod", $reified$OuterInterface$reifiedMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Inner.class, $reified$T));
            }
        }
        .java.lang.Object arg$152;
        if ((arg$152 = arg) != null) {
            final .java.lang.Object arg$157 = arg$152;
            if (((.ceylon.language.meta.model.Type<? extends Method>).ceylon.language.meta.typeLiteral_.typeLiteral($reified$OuterInterface$reifiedMethod$Method)).equals((.ceylon.language.meta.model.Class<? extends .ceylon.language.Integer, ? super .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Integer.$TypeDescriptor$))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`Method` == `Integer`"));
            if (!(arg$157 instanceof Inner && .com.redhat.ceylon.compiler.java.Util.isReified(arg, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("reifiedMethod", $reified$OuterInterface$reifiedMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Inner.class, .ceylon.language.Integer.$TypeDescriptor$))))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "! is Inner<Integer> arg"));
        } else {
            if (((.ceylon.language.meta.model.Type<? extends Method>).ceylon.language.meta.typeLiteral_.typeLiteral($reified$OuterInterface$reifiedMethod$Method)).equals((.ceylon.language.meta.model.Class<? extends .ceylon.language.String, ? super .ceylon.language.Tuple<.ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>, ? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>>>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.String.$TypeDescriptor$))) {
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`Method` == `String`"));
            final .java.lang.Object inner = new Inner<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$);
            final Inner<.ceylon.language.Integer> inner$156;
            .java.lang.Object inner$155 = null;
            if ((inner$155 = inner) instanceof Inner && .com.redhat.ceylon.compiler.java.Util.isReified(inner$155, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface.class, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl.this.$reified$Outer), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("reifiedMethod", $reified$OuterInterface$reifiedMethod$Method)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Inner.class, .ceylon.language.Integer.$TypeDescriptor$)))) {
                inner$156 = (Inner)inner$155;
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Inner<Integer> inner"));
            <.ceylon.language.Integer>reifiedMethod$priv$(.ceylon.language.Integer.$TypeDescriptor$, inner$156);
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.test.structure.reified::OuterInterface<T>"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
        value = "T",
        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {},
        caseTypes = {})})
class OuterInterfaceImpl<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface<T> {
    
    OuterInterfaceImpl(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        this.$reified$T = $reified$T;
        this.$com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$this$ = new .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl<T>($reified$T, this);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl<T> $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$this$;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterface$impl<T> $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$this$;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final long defaulted$i() {
        return $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$this$.defaulted$i();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public void defaulted() {
        (
            let
            {
                long $ceylontmp$i$161 = defaulted$i();
                defaulted$canonical$($ceylontmp$i$161);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final void defaulted(final long i) {
        $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$this$.defaulted(i);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private void defaulted$canonical$(final long i) {
        $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$this$.defaulted(i);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final long getOuterAttribute() {
        return $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$this$.getOuterAttribute();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <Method>void outerMethod(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OuterInterface$outerMethod$Method, final .java.lang.Object o) {
        $com$redhat$ceylon$compiler$java$test$structure$reified$OuterInterface$this$.outerMethod($reified$OuterInterface$outerMethod$Method, o);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterfaceImpl(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterfaceImpl.class, $reified$T);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Name("I")
@.com.redhat.ceylon.compiler.java.metadata.LocalContainer(
        path = {
                "metamodelEquality",
                "1getter"},
        companionClassName = "")
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
interface metamodelEquality$metamodelEquality$0$1getter$I_ {
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Name("I")
@.com.redhat.ceylon.compiler.java.metadata.LocalContainer(
        path = {
                "metamodelEquality",
                "2getter"},
        companionClassName = "")
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
interface metamodelEquality$metamodelEquality$4$2getter$I_ {
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Method
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({
        "1getter$getter$_",
        "1m_",
        "2getter$getter$_",
        "2m_"})
final class metamodelEquality_ {
    
    private metamodelEquality_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void metamodelEquality() {
        final VariableBox<.java.lang.Object> value1 = new VariableBox<.java.lang.Object>(null);
        final VariableBox<.java.lang.Object> value2 = new VariableBox<.java.lang.Object>(null);
        final VariableBox<.java.lang.Object> method1 = new VariableBox<.java.lang.Object>(null);
        final VariableBox<.java.lang.Object> method2 = new VariableBox<.java.lang.Object>(null);
        final VariableBox<.java.lang.Object> class1 = new VariableBox<.java.lang.Object>(null);
        final VariableBox<.java.lang.Object> class2 = new VariableBox<.java.lang.Object>(null);
        final VariableBox<.java.lang.Object> interface1 = new VariableBox<.java.lang.Object>(null);
        final VariableBox<.java.lang.Object> interface2 = new VariableBox<.java.lang.Object>(null);
        final VariableBox<.java.lang.Object> setter1 = new VariableBox<.java.lang.Object>(null);
        final VariableBox<.java.lang.Object> setter2 = new VariableBox<.java.lang.Object>(null);
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.Attribute(setterClass = getter$setter$_.class)
            @.com.redhat.ceylon.compiler.java.metadata.Name("getter")
            @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.language::GetterLong"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({
                    "1C",
                    "::metamodelEquality$metamodelEquality$0$1getter$I_"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            final class getter$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
                
                private getter$getter$_() {
                }
                
                @.com.redhat.ceylon.compiler.java.metadata.Transient
                public long get_() {
                    
                    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                    @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                    class C implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                        
                        C() {
                        }
                        
                        @.java.lang.Override
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1getter")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(C.class));
                        }
                    }
                    class1.ref = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(C.class);
                    interface1.ref = (.ceylon.language.meta.declaration.InterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality$metamodelEquality$0$1getter$I_.class);
                    value1.ref = ((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(C.class)).getContainer();
                    return 1L;
                }
            }
            final .com.redhat.ceylon.compiler.java.language.GetterLong getter$getter$_ = new getter$getter$_();
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            @.com.redhat.ceylon.compiler.java.metadata.Setter(getterClass = getter$getter$_.class)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1C"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration
            final class getter$setter$_ {
                
                private getter$setter$_() {
                }
                private long value;
                
                public void set_(@.com.redhat.ceylon.compiler.java.metadata.Name("getter")
                final long getter) {
                    
                    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                    @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                    class C implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                        
                        C() {
                        }
                        
                        @.java.lang.Override
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("$setter$1getter")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(C.class));
                        }
                    }
                    setter1.ref = ((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(C.class)).getContainer();
                }
            }
            final getter$setter$_ getter$setter$_ = new getter$setter$_();
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.Method
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1C"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
            final class m_ {
                
                private m_() {
                }
                
                void m() {
                    
                    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                    @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                    class C implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                        
                        C() {
                        }
                        
                        @.java.lang.Override
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("1m")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(C.class));
                        }
                    }
                    method1.ref = ((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(C.class)).getContainer();
                }
            }
            final m_ m = new m_();
            final long i = getter$getter$_.get_();
            getter$setter$_.set_(1L);
            m.m();
        }
        if (true) {
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.Attribute(setterClass = getter$setter$_.class)
            @.com.redhat.ceylon.compiler.java.metadata.Name("getter")
            @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.language::GetterLong"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({
                    "1C",
                    "::metamodelEquality$metamodelEquality$4$2getter$I_"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "2")
            final class getter$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
                
                private getter$getter$_() {
                }
                
                @.com.redhat.ceylon.compiler.java.metadata.Transient
                public long get_() {
                    
                    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                    @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                    class C implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                        
                        C() {
                        }
                        
                        @.java.lang.Override
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("2getter")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(C.class));
                        }
                    }
                    class2.ref = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(C.class);
                    interface2.ref = (.ceylon.language.meta.declaration.InterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality$metamodelEquality$4$2getter$I_.class);
                    value2.ref = ((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(C.class)).getContainer();
                    return 1L;
                }
            }
            final .com.redhat.ceylon.compiler.java.language.GetterLong getter$getter$_ = new getter$getter$_();
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            @.com.redhat.ceylon.compiler.java.metadata.Setter(getterClass = getter$getter$_.class)
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1C"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration
            final class getter$setter$_ {
                
                private getter$setter$_() {
                }
                private long value;
                
                public void set_(@.com.redhat.ceylon.compiler.java.metadata.Name("getter")
                final long getter) {
                    
                    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                    @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                    class C implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                        
                        C() {
                        }
                        
                        @.java.lang.Override
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("$setter$2getter")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(C.class));
                        }
                    }
                    setter2.ref = ((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(C.class)).getContainer();
                }
            }
            final getter$setter$_ getter$setter$_ = new getter$setter$_();
            
            @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
            @.com.redhat.ceylon.compiler.java.metadata.Method
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1C"})
            @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "2")
            final class m_ {
                
                private m_() {
                }
                
                void m() {
                    
                    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
                    @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                    class C implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
                        
                        C() {
                        }
                        
                        @.java.lang.Override
                        @.com.redhat.ceylon.compiler.java.metadata.Ignore
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("2m")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(C.class));
                        }
                    }
                    method2.ref = ((.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(C.class)).getContainer();
                }
            }
            final m_ m = new m_();
            final long i = getter$getter$_.get_();
            getter$setter$_.set_(1L);
            m.m();
        }
        .java.lang.String $ceylontmp$assert$164 = null;
        final .java.lang.Object c2$168;
        final .java.lang.Object c1$166;
        .java.lang.Object c1$165 = null;
        if ((c1$165 = class1.ref) != null) {
            c1$166 = c1$165;
            .java.lang.Object c2$167 = null;
            if ((c2$167 = class2.ref) != null) {
                c2$168 = c2$167;
                if (!c1$166.equals(c2$168)) {
                } else {
                    $ceylontmp$assert$164 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists c1=class1" + (.java.lang.System.lineSeparator() + "\tunviolated ") + "exists c2=class2" + (.java.lang.System.lineSeparator() + "\tviolated ") + "c1 != c2";
                }
            } else {
                c2$168 = null;
                $ceylontmp$assert$164 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists c1=class1" + (.java.lang.System.lineSeparator() + "\tviolated ") + "exists c2=class2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "c1 != c2";
            }
        } else {
            c1$166 = null;
            c2$168 = null;
            $ceylontmp$assert$164 = .java.lang.System.lineSeparator() + "\tviolated " + "exists c1=class1" + (.java.lang.System.lineSeparator() + "\tuntested ") + "exists c2=class2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "c1 != c2";
        }
        if ($ceylontmp$assert$164 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$164);
        .java.lang.String $ceylontmp$assert$169 = null;
        final .java.lang.Object i2$173;
        final .java.lang.Object i1$171;
        .java.lang.Object i1$170 = null;
        if ((i1$170 = interface1.ref) != null) {
            i1$171 = i1$170;
            .java.lang.Object i2$172 = null;
            if ((i2$172 = interface2.ref) != null) {
                i2$173 = i2$172;
                if (!i1$171.equals(i2$173)) {
                } else {
                    $ceylontmp$assert$169 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists i1=interface1" + (.java.lang.System.lineSeparator() + "\tunviolated ") + "exists i2=interface2" + (.java.lang.System.lineSeparator() + "\tviolated ") + "i1 != i2";
                }
            } else {
                i2$173 = null;
                $ceylontmp$assert$169 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists i1=interface1" + (.java.lang.System.lineSeparator() + "\tviolated ") + "exists i2=interface2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "i1 != i2";
            }
        } else {
            i1$171 = null;
            i2$173 = null;
            $ceylontmp$assert$169 = .java.lang.System.lineSeparator() + "\tviolated " + "exists i1=interface1" + (.java.lang.System.lineSeparator() + "\tuntested ") + "exists i2=interface2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "i1 != i2";
        }
        if ($ceylontmp$assert$169 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$169);
        .java.lang.String $ceylontmp$assert$174 = null;
        final .java.lang.Object v2$178;
        final .java.lang.Object v1$176;
        .java.lang.Object v1$175 = null;
        if ((v1$175 = value1.ref) != null) {
            v1$176 = v1$175;
            .java.lang.Object v2$177 = null;
            if ((v2$177 = value2.ref) != null) {
                v2$178 = v2$177;
                if (!v1$176.equals(v2$178)) {
                } else {
                    $ceylontmp$assert$174 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists v1=value1" + (.java.lang.System.lineSeparator() + "\tunviolated ") + "exists v2=value2" + (.java.lang.System.lineSeparator() + "\tviolated ") + "v1 != v2";
                }
            } else {
                v2$178 = null;
                $ceylontmp$assert$174 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists v1=value1" + (.java.lang.System.lineSeparator() + "\tviolated ") + "exists v2=value2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "v1 != v2";
            }
        } else {
            v1$176 = null;
            v2$178 = null;
            $ceylontmp$assert$174 = .java.lang.System.lineSeparator() + "\tviolated " + "exists v1=value1" + (.java.lang.System.lineSeparator() + "\tuntested ") + "exists v2=value2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "v1 != v2";
        }
        if ($ceylontmp$assert$174 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$174);
        .java.lang.String $ceylontmp$assert$179 = null;
        final .java.lang.Object s2$183;
        final .java.lang.Object s1$181;
        .java.lang.Object s1$180 = null;
        if ((s1$180 = setter1.ref) != null) {
            s1$181 = s1$180;
            .java.lang.Object s2$182 = null;
            if ((s2$182 = setter2.ref) != null) {
                s2$183 = s2$182;
                if (!s1$181.equals(s2$183)) {
                } else {
                    $ceylontmp$assert$179 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists s1=setter1" + (.java.lang.System.lineSeparator() + "\tunviolated ") + "exists s2=setter2" + (.java.lang.System.lineSeparator() + "\tviolated ") + "s1 != s2";
                }
            } else {
                s2$183 = null;
                $ceylontmp$assert$179 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists s1=setter1" + (.java.lang.System.lineSeparator() + "\tviolated ") + "exists s2=setter2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "s1 != s2";
            }
        } else {
            s1$181 = null;
            s2$183 = null;
            $ceylontmp$assert$179 = .java.lang.System.lineSeparator() + "\tviolated " + "exists s1=setter1" + (.java.lang.System.lineSeparator() + "\tuntested ") + "exists s2=setter2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "s1 != s2";
        }
        if ($ceylontmp$assert$179 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$179);
        .java.lang.String $ceylontmp$assert$184 = null;
        final .java.lang.Object m2$188;
        final .java.lang.Object m1$186;
        .java.lang.Object m1$185 = null;
        if ((m1$185 = method1.ref) != null) {
            m1$186 = m1$185;
            .java.lang.Object m2$187 = null;
            if ((m2$187 = method2.ref) != null) {
                m2$188 = m2$187;
                if (!m1$186.equals(m2$188)) {
                } else {
                    $ceylontmp$assert$184 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists m1=method1" + (.java.lang.System.lineSeparator() + "\tunviolated ") + "exists m2=method2" + (.java.lang.System.lineSeparator() + "\tviolated ") + "m1 != m2";
                }
            } else {
                m2$188 = null;
                $ceylontmp$assert$184 = .java.lang.System.lineSeparator() + "\tunviolated " + "exists m1=method1" + (.java.lang.System.lineSeparator() + "\tviolated ") + "exists m2=method2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "m1 != m2";
            }
        } else {
            m1$186 = null;
            m2$188 = null;
            $ceylontmp$assert$184 = .java.lang.System.lineSeparator() + "\tviolated " + "exists m1=method1" + (.java.lang.System.lineSeparator() + "\tuntested ") + "exists m2=method2" + (.java.lang.System.lineSeparator() + "\tuntested ") + "m1 != m2";
        }
        if ($ceylontmp$assert$184 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$184);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality_.metamodelEquality();
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class localWithoutTypes_ {
    
    private localWithoutTypes_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void localWithoutTypes() {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Method
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localFunction_ {
            
            private localFunction_() {
            }
            
            void localFunction() {
            }
        }
        final localFunction_ localFunction = new localFunction_();
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Attribute
        @.com.redhat.ceylon.compiler.java.metadata.Name("localGetter")
        @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.language::GetterLong"})
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        final class localGetter$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private localGetter$getter$_() {
            }
            
            @.com.redhat.ceylon.compiler.java.metadata.Transient
            public long get_() {
                return 1L;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong localGetter$getter$_ = new localGetter$getter$_();
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.structure.reified.localWithoutTypes_.localWithoutTypes();
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Members({@.com.redhat.ceylon.compiler.java.metadata.Member(klass = .com.redhat.ceylon.compiler.java.test.structure.reified.C.l_.class)})
class C implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    C() {
        this.l = new .com.redhat.ceylon.compiler.java.test.structure.reified.C.l_();
    }
    private final .com.redhat.ceylon.compiler.java.test.structure.reified.C.l_ l;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
    @.com.redhat.ceylon.compiler.java.metadata.Name("l")
    @.com.redhat.ceylon.compiler.java.metadata.Container(klass = .com.redhat.ceylon.compiler.java.test.structure.reified.C.class)
    @.com.redhat.ceylon.compiler.java.metadata.Object
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    public final class l_ implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
        
        private l_() {
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.structure.reified.C.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.C.l_.class));
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::C.l")
    public final .com.redhat.ceylon.compiler.java.test.structure.reified.C.l_ getL() {
        return l;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.reified.C();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.reified.C.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.C.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Method
public final class locals_ {
    
    private locals_() {
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    public static void locals() {
        new .com.redhat.ceylon.compiler.java.test.structure.reified.OuterLocalClass<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$).<.ceylon.language.String>outerMethod(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(1L));
        new .com.redhat.ceylon.compiler.java.test.structure.reified.OuterInterfaceImpl<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$).<.ceylon.language.String>outerMethod(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(1L));
        .com.redhat.ceylon.compiler.java.test.structure.reified.testToplevels_.testToplevels();
        final .com.redhat.ceylon.compiler.java.test.structure.reified.Outer<.ceylon.language.String> o = new .com.redhat.ceylon.compiler.java.test.structure.reified.Outer<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$);
        final .java.lang.Object i = o.<.ceylon.language.Integer>Inner$new$(.ceylon.language.Integer.$TypeDescriptor$);
        final .com.redhat.ceylon.compiler.java.test.structure.reified.Outer<.ceylon.language.String>.Inner<.ceylon.language.Integer> i$191;
        .java.lang.Object i$190 = null;
        if ((i$190 = i) instanceof .com.redhat.ceylon.compiler.java.test.structure.reified.Outer.Inner && .com.redhat.ceylon.compiler.java.Util.isReified(i$190, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.Outer.class, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.Outer.Inner.class, .ceylon.language.Integer.$TypeDescriptor$)))) {
            i$191 = (.com.redhat.ceylon.compiler.java.test.structure.reified.Outer.Inner)i$190;
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Outer<String>.Inner<Integer> i"));
        o.<.ceylon.language.String>f(.ceylon.language.String.$TypeDescriptor$, null);
        .com.redhat.ceylon.compiler.java.test.structure.reified.metamodelEquality_.metamodelEquality();
        if (((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.reified.C.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "l").getName().equals("l")) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`value C.l`.name == \"l\""));
        final .com.redhat.ceylon.compiler.java.test.structure.reified.MapTest<.ceylon.language.Integer, .ceylon.language.String> m1 = new .com.redhat.ceylon.compiler.java.test.structure.reified.MapTest<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .ceylon.language.empty_.get_(), new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.String.instance("A")), new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(2L), .ceylon.language.String.instance("B")), new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(3L), .ceylon.language.String.instance("C")), new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(4L), .ceylon.language.String.instance("B"))));
        if (m1.$clone().equals(m1)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "m1.clone() == m1"));
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.structure.reified.locals_.locals();
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.com.redhat.ceylon.compiler.java.metadata.Ignore
@interface Foo$annotation$ {
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.ceylon.language.FinalAnnotation$annotation$
@.ceylon.language.AnnotationAnnotation$annotation$
@.com.redhat.ceylon.compiler.java.metadata.Annotations({
        @.com.redhat.ceylon.compiler.java.metadata.Annotation("final"),
        @.com.redhat.ceylon.compiler.java.metadata.Annotation("annotation")})
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::OptionalAnnotation<com.redhat.ceylon.compiler.java.test.structure.reified::Foo,ceylon.language::Annotated>"})
final class Foo implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.OptionalAnnotation<.com.redhat.ceylon.compiler.java.test.structure.reified.Foo, .ceylon.language.Annotated> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    Foo(.com.redhat.ceylon.compiler.java.test.structure.reified.Foo$annotation$ anno) {
        this();
    }
    
    Foo() {
        this.$ceylon$language$ConstrainedAnnotation$this$ = new .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.structure.reified.Foo, .com.redhat.ceylon.compiler.java.test.structure.reified.Foo, .ceylon.language.Annotated>(.com.redhat.ceylon.compiler.java.test.structure.reified.Foo.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.structure.reified.Foo.$TypeDescriptor$), .ceylon.language.Annotated.$TypeDescriptor$, this);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.structure.reified.Foo, .com.redhat.ceylon.compiler.java.test.structure.reified.Foo, .ceylon.language.Annotated> $ceylon$language$ConstrainedAnnotation$this$;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.ConstrainedAnnotation$impl<? extends .com.redhat.ceylon.compiler.java.test.structure.reified.Foo, ? extends .com.redhat.ceylon.compiler.java.test.structure.reified.Foo, ? super .ceylon.language.Annotated> $ceylon$language$ConstrainedAnnotation$impl() {
        return $ceylon$language$ConstrainedAnnotation$this$;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final boolean occurs(final .ceylon.language.Annotated programElement) {
        return $ceylon$language$ConstrainedAnnotation$this$.occurs(programElement);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.reified.Foo();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.reified.Foo.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.Foo.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::Map<Key,Item>"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Key",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.OUT,
                satisfies = {"ceylon.language::Object"},
                caseTypes = {}),
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Item",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.OUT,
                satisfies = {"ceylon.language::Object"},
                caseTypes = {})})
interface MapTestBase<Key, Item> extends .ceylon.language.Map<Key, Item> {
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.FormalAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("formal")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Sequential<ceylon.language::Entry<Key,Item>>")
    public abstract .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> getEntries();
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Class(
        identifiable = false,
        basic = false,
        extendsType = "ceylon.language::Object")
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.test.structure.reified::MapTestBase<Key,Item>"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Key",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {"ceylon.language::Object"},
                caseTypes = {}),
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Item",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {"ceylon.language::Object"},
                caseTypes = {})})
class MapTest<Key, Item> extends .java.lang.Object implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.reified.MapTestBase<Key, Item> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    MapTest(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Key, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Item) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> $ceylontmp$entry$194 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                this($reified$Key, $reified$Item, $ceylontmp$entry$194);
            }
            returning null;
        );
    }
    
    MapTest(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Key, @.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Item, @.com.redhat.ceylon.compiler.java.metadata.Name("entry")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Sequential<ceylon.language::Entry<Key,Item>>")
    final .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> entry) {
        super();
        this.$reified$Key = $reified$Key;
        this.$reified$Item = $reified$Item;
        this.$ceylon$language$Map$this$ = new .ceylon.language.Map$impl<Key, Item>($reified$Key, $reified$Item, this);
        this.$ceylon$language$Collection$this$ = new .ceylon.language.Collection$impl<.ceylon.language.Entry<? extends Key, ? extends Item>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reified$Key, $reified$Item), this);
        this.$ceylon$language$Iterable$this$ = new .ceylon.language.Iterable$impl<.ceylon.language.Entry<? extends Key, ? extends Item>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reified$Key, $reified$Item), .ceylon.language.Null.$TypeDescriptor$, this);
        this.$ceylon$language$Category$this$ = new .ceylon.language.Category$impl<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$, this);
        this.$ceylon$language$Correspondence$this$ = new .ceylon.language.Correspondence$impl<.java.lang.Object, Item>(.ceylon.language.Object.$TypeDescriptor$, $reified$Item, this);
        this.entries = entry.sequence();
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Key;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Item;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Map$impl<Key, Item> $ceylon$language$Map$this$;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Map$impl<? extends Key, ? extends Item> $ceylon$language$Map$impl() {
        return $ceylon$language$Map$this$;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean contains(final .java.lang.Object entry) {
        return $ceylon$language$Map$this$.contains(entry);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean equals(final .java.lang.Object that) {
        return $ceylon$language$Map$this$.equals(that);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public int hashCode() {
        return $ceylon$language$Map$this$.hashCode();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Collection<? extends Key> getKeys() {
        return $ceylon$language$Map$this$.getKeys();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Collection<? extends Item> getValues() {
        return $ceylon$language$Map$this$.getValues();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result>.ceylon.language.Map<? extends Key, ? extends Result> mapItems(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> mapping) {
        return $ceylon$language$Map$this$.mapItems($reified$Result, mapping);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Map<? extends Key, ? extends Item> filterKeys(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> filtering) {
        return $ceylon$language$Map$this$.filterKeys(filtering);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Collection$impl<.ceylon.language.Entry<? extends Key, ? extends Item>> $ceylon$language$Collection$this$;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Collection$impl<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> $ceylon$language$Collection$impl() {
        return $ceylon$language$Collection$this$;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .java.lang.String toString() {
        return $ceylon$language$Collection$this$.toString();
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Iterable$impl<.ceylon.language.Entry<? extends Key, ? extends Item>, .java.lang.Object> $ceylon$language$Iterable$this$;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable$impl<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this$;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean longerThan(final long length) {
        return $ceylon$language$Iterable$this$.longerThan(length);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean shorterThan(final long length) {
        return $ceylon$language$Iterable$this$.shorterThan(length);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Entry<? extends Key, ? extends Item> getFirst() {
        return (.ceylon.language.Entry<? extends Key, ? extends Item>)(.ceylon.language.Entry)$ceylon$language$Iterable$this$.getFirst();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Entry<? extends Key, ? extends Item> getLast() {
        return (.ceylon.language.Entry<? extends Key, ? extends Item>)(.ceylon.language.Entry)$ceylon$language$Iterable$this$.getLast();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> getRest() {
        return $ceylon$language$Iterable$this$.getRest();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> sequence() {
        return $ceylon$language$Iterable$this$.sequence();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.map($reified$Result, collecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.filter(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result>Result fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this$.fold($reified$Result, initial, accumulating);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result>.java.lang.Object reduce(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this$.reduce($reified$Result, accumulating);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Entry<? extends Key, ? extends Item> find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.find(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Entry<? extends Key, ? extends Item> findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.findLast(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result, Args extends .ceylon.language.Sequential<? extends .java.lang.Object>>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> spread(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends Result>> method) {
        return (.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>>)(.ceylon.language.Callable)$ceylon$language$Iterable$this$.spread($reified$Result, $reified$Args, method);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this$.sort(comparing);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.collect($reified$Result, collecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.select(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.any(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.every(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> skip(final long skipping) {
        return $ceylon$language$Iterable$this$.skip(skipping);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> take(final long taking) {
        return $ceylon$language$Iterable$this$.take(taking);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> skipWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> skipping) {
        return $ceylon$language$Iterable$this$.skipWhile(skipping);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> takeWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> taking) {
        return $ceylon$language$Iterable$this$.takeWhile(taking);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this$.by(step);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.count(selecting);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this$.getCoalesced();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Entry<? extends Key, ? extends Item>>, ? extends .java.lang.Object> getIndexed() {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Entry<? extends Key, ? extends Item>>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.getIndexed();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> follow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other head) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.follow($reified$Other, head);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Other, OtherAbsent>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent> chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.chain($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <Default>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Default, final Default defaultValue) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.defaultNullElements($reified$Default, defaultValue);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> getCycled() {
        return $ceylon$language$Iterable$this$.getCycled();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> cycle(final long times) {
        return $ceylon$language$Iterable$this$.cycle(times);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.List<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> repeat(final long times) {
        return $ceylon$language$Iterable$this$.repeat(times);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Category$impl<.java.lang.Object> $ceylon$language$Category$this$;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Category$impl<? super .java.lang.Object> $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this$;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsEvery(elements);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsAny(elements);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .ceylon.language.Correspondence$impl<.java.lang.Object, Item> $ceylon$language$Correspondence$this$;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Correspondence$impl<? super .java.lang.Object, ? extends Item> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this$;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean defines(final .java.lang.Object key) {
        return $ceylon$language$Correspondence$this$.defines(key);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this$.definesEvery(keys);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public boolean definesAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this$.definesAny(keys);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .ceylon.language.Sequential<? extends Item> items(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this$.items(keys);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> entries;
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Sequential<ceylon.language::Entry<Key,Item>>")
    public final .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> getEntries() {
        return entries;
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public final long getSize() {
        return getEntries().getSize();
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Boolean")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public final boolean getEmpty() {
        return getEntries().getEmpty();
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::MapTest<Key,Item>")
    public final .com.redhat.ceylon.compiler.java.test.structure.reified.MapTest<Key, Item> $clone() {
        return this;
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Iterator<ceylon.language::Entry<Key,Item>>")
    public final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iterator() {
        return getEntries().iterator();
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|Item")
    public final Item get(@.com.redhat.ceylon.compiler.java.metadata.Name("key")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Object")
    final .java.lang.Object key) {
        .java.lang.Object elem$195;
        .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> e$iterator$$196 = getEntries().iterator();
        loop_0: while (!((elem$195 = e$iterator$$196.next()) instanceof .ceylon.language.Finished)) {
            final .ceylon.language.Entry<? extends Key, ? extends Item> e = (.ceylon.language.Entry<? extends Key, ? extends Item>)elem$195;
            if (e.getKey().equals(key)) {
                return e.getItem();
            }
        }
        return null;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.MapTest.class, $reified$Key, $reified$Item);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.ceylon.language.SharedAnnotation$annotation$
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({"1indexes_"})
@.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::Category<ceylon.language::Object>"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Element",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.OUT,
                satisfies = {},
                caseTypes = {}),
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Absent",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.OUT,
                satisfies = {"ceylon.language::Null"},
                caseTypes = {},
                defaultValue = "ceylon.language::Null")})
public interface MyIterable<Element, Absent> extends .ceylon.language.Category<.java.lang.Object> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.test.structure.reified.MyIterable$impl<? extends Element, ? extends Absent> $com$redhat$ceylon$compiler$java$test$structure$reified$MyIterable$impl();
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.DefaultAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
            @.com.redhat.ceylon.compiler.java.metadata.Annotation("default")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Iterable<ceylon.language::Entry<ceylon.language::Integer,Element&ceylon.language::Object>,ceylon.language::Null>")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> getIndexed();
}
@.com.redhat.ceylon.compiler.java.metadata.Ignore
public final class MyIterable$impl<Element, Absent> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public MyIterable$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Absent, .com.redhat.ceylon.compiler.java.test.structure.reified.MyIterable<? extends Element, ? extends Absent> $this) {
        this.$reified$Element = $reified$Element;
        this.$reified$Absent = $reified$Absent;
        this.$this = $this;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Absent;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.test.structure.reified.MyIterable<? extends Element, ? extends Absent> $this;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public void $refine$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Absent) {
        this.$reified$Absent = $reified$Absent;
        this.$reified$Element = $reified$Element;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> getIndexed() {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.Name("indexes")
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.Object
        @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::Iterable<ceylon.language::Entry<ceylon.language::Integer,Element&ceylon.language::Object>,ceylon.language::Null>"})
        final class indexes_ implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Iterable<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, .java.lang.Object> {
            
            private indexes_() {
                this.$ceylon$language$Iterable$this$ = new .ceylon.language.Iterable$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection($reified$Element, .ceylon.language.Object.$TypeDescriptor$)), .ceylon.language.Null.$TypeDescriptor$, this);
                this.$ceylon$language$Category$this$ = new .ceylon.language.Category$impl<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$, this);
            }
            
            @.ceylon.language.SharedAnnotation$annotation$
            @.ceylon.language.ActualAnnotation$annotation$
            @.com.redhat.ceylon.compiler.java.metadata.Annotations({
                    @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
                    @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Iterator<ceylon.language::Entry<ceylon.language::Integer,Element&ceylon.language::Object>>")
            public final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>> iterator() {
                return (.ceylon.language.Iterator).ceylon.language.nothing_.get_();
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            protected final .ceylon.language.Iterable$impl<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, .java.lang.Object> $ceylon$language$Iterable$this$;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable$impl<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> $ceylon$language$Iterable$impl() {
                return $ceylon$language$Iterable$this$;
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public boolean getEmpty() {
                return $ceylon$language$Iterable$this$.getEmpty();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public long getSize() {
                return $ceylon$language$Iterable$this$.getSize();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public boolean longerThan(final long length) {
                return $ceylon$language$Iterable$this$.longerThan(length);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public boolean shorterThan(final long length) {
                return $ceylon$language$Iterable$this$.shorterThan(length);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public boolean contains(final .java.lang.Object element) {
                return $ceylon$language$Iterable$this$.contains(element);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> getFirst() {
                return (.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>)(.ceylon.language.Entry)$ceylon$language$Iterable$this$.getFirst();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> getLast() {
                return (.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>)(.ceylon.language.Entry)$ceylon$language$Iterable$this$.getLast();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> getRest() {
                return $ceylon$language$Iterable$this$.getRest();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>> sequence() {
                return $ceylon$language$Iterable$this$.sequence();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
                return $ceylon$language$Iterable$this$.map($reified$Result, collecting);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
                return $ceylon$language$Iterable$this$.filter(selecting);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public <Result>Result fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
                return $ceylon$language$Iterable$this$.fold($reified$Result, initial, accumulating);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public <Result>.java.lang.Object reduce(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> accumulating) {
                return $ceylon$language$Iterable$this$.reduce($reified$Result, accumulating);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
                return $ceylon$language$Iterable$this$.find(selecting);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
                return $ceylon$language$Iterable$this$.findLast(selecting);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public <Result, Args extends .ceylon.language.Sequential<? extends .java.lang.Object>>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> spread(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends Result>> method) {
                return (.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>>)(.ceylon.language.Callable)$ceylon$language$Iterable$this$.spread($reified$Result, $reified$Args, method);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
                return $ceylon$language$Iterable$this$.sort(comparing);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
                return $ceylon$language$Iterable$this$.collect($reified$Result, collecting);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Sequential<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
                return $ceylon$language$Iterable$this$.select(selecting);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
                return $ceylon$language$Iterable$this$.any(selecting);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
                return $ceylon$language$Iterable$this$.every(selecting);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> skip(final long skipping) {
                return $ceylon$language$Iterable$this$.skip(skipping);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> take(final long taking) {
                return $ceylon$language$Iterable$this$.take(taking);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> skipWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> skipping) {
                return $ceylon$language$Iterable$this$.skipWhile(skipping);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> takeWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> taking) {
                return $ceylon$language$Iterable$this$.takeWhile(taking);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> by(final long step) {
                return $ceylon$language$Iterable$this$.by(step);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
                return $ceylon$language$Iterable$this$.count(selecting);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> getCoalesced() {
                return $ceylon$language$Iterable$this$.getCoalesced();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>>, ? extends .java.lang.Object> getIndexed() {
                return (.ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.getIndexed();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> follow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other head) {
                return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.follow($reified$Other, head);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public <Other, OtherAbsent>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent> chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
                return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.chain($reified$Other, $reified$OtherAbsent, other);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public <Default>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Default, final Default defaultValue) {
                return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.defaultNullElements($reified$Default, defaultValue);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.String toString() {
                return $ceylon$language$Iterable$this$.toString();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> getCycled() {
                return $ceylon$language$Iterable$this$.getCycled();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> cycle(final long times) {
                return $ceylon$language$Iterable$this$.cycle(times);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.List<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>> repeat(final long times) {
                return $ceylon$language$Iterable$this$.repeat(times);
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            protected final .ceylon.language.Category$impl<.java.lang.Object> $ceylon$language$Category$this$;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Category$impl<? super .java.lang.Object> $ceylon$language$Category$impl() {
                return $ceylon$language$Category$this$;
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
                return $ceylon$language$Category$this$.containsEvery(elements);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
                return $ceylon$language$Category$this$.containsAny(elements);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.MyIterable.class, .com.redhat.ceylon.compiler.java.test.structure.reified.MyIterable$impl.this.$reified$Element, .com.redhat.ceylon.compiler.java.test.structure.reified.MyIterable$impl.this.$reified$Absent), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue("indexed")), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(indexes_.class));
            }
        }
        final indexes_ indexes = new indexes_();
        return indexes;
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Attribute
@.com.redhat.ceylon.compiler.java.metadata.Name("classDecl3")
final class classDecl3_ {
    
    private classDecl3_() {
    }
    private static .ceylon.language.meta.declaration.ClassDeclaration[] value;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            value = new .ceylon.language.meta.declaration.ClassDeclaration[]{null};
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            value = null;
        }
    }
    
    @.ceylon.language.VariableAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("variable")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language.meta.declaration::ClassDeclaration")
    public static .ceylon.language.meta.declaration.ClassDeclaration get_() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'classDecl3\' before it was set");
        }
    }
    
    public static void set_(@.com.redhat.ceylon.compiler.java.metadata.Name("classDecl3")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language.meta.declaration::ClassDeclaration")
    final .ceylon.language.meta.declaration.ClassDeclaration classDecl3) {
        value[0] = classDecl3;
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Attribute
@.com.redhat.ceylon.compiler.java.metadata.Name("classDecl4")
final class classDecl4_ {
    
    private classDecl4_() {
    }
    private static .ceylon.language.meta.declaration.ClassDeclaration[] value;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            value = new .ceylon.language.meta.declaration.ClassDeclaration[]{null};
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            value = null;
        }
    }
    
    @.ceylon.language.VariableAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("variable")})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language.meta.declaration::ClassDeclaration")
    public static .ceylon.language.meta.declaration.ClassDeclaration get_() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'classDecl4\' before it was set");
        }
    }
    
    public static void set_(@.com.redhat.ceylon.compiler.java.metadata.Name("classDecl4")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Null|ceylon.language.meta.declaration::ClassDeclaration")
    final .ceylon.language.meta.declaration.ClassDeclaration classDecl4) {
        value[0] = classDecl4;
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Attribute
@.com.redhat.ceylon.compiler.java.metadata.Name("toplevelAttribute")
@.com.redhat.ceylon.compiler.java.metadata.LocalDeclarations({
        "1LocalClass",
        "1LocalClass2",
        "1LocalClassInLocalAttribute",
        "2LocalClass",
        "2LocalClass2",
        "2LocalClassInLocalAttribute"})
final class toplevelAttribute_ {
    
    private toplevelAttribute_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.Transient
    public static long get_() {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Inner",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                this.$reified$Inner = $reified$Inner;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(toplevelAttribute_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
            }
        }
        final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
        final .ceylon.language.meta.declaration.ValueDeclaration lm$200;
        .java.lang.Object lm$199 = null;
        if ((lm$199 = d.getContainer()) instanceof .ceylon.language.meta.declaration.ValueDeclaration) {
            lm$200 = (.ceylon.language.meta.declaration.ValueDeclaration)lm$199;
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is ValueDeclaration lm = d.container"));
        if (lm$200.getVariable()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.variable"));
        if (lm$200.getName().equals("toplevelAttribute")) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"toplevelAttribute\""));
        if (lm$200.getContainer().equals(.com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.checkModule(.ceylon.language.meta.modules_.get_().getDefault(), "default", "unversioned").findPackage("com.redhat.ceylon.compiler.java.test.structure.reified"))) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `package com.redhat.ceylon.compiler.java.test.structure.reified`"));
        .com.redhat.ceylon.compiler.java.test.structure.reified.classDecl3_.set_(d);
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Inner",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                this.$reified$Inner = $reified$Inner;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(toplevelAttribute_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
            }
        }
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.structure.reified::toplevelAttribute.1LocalClass<ceylon.language::String>")
        class LocalClass2 extends LocalClass<.ceylon.language.String> {
            
            LocalClass2() {
                super(.ceylon.language.String.$TypeDescriptor$);
            }
            
            @.ceylon.language.SharedAnnotation$annotation$
            @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
            @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::toplevelAttribute.1LocalClass2")
            public final LocalClass2 f() {
                return (LocalClass2).ceylon.language.nothing_.get_();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(toplevelAttribute_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass2.class));
            }
        }
        final .ceylon.language.meta.declaration.ClassDeclaration lc = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
        if (lc.getContainer().equals(lm$200)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lc.container == lm"));
        if (((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass2.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "f").getName().equals("f")) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`function LocalClass2.f`.name == \"f\""));
        final .java.lang.Object o = new LocalClass<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$);
        final LocalClass<.ceylon.language.Integer> o$208;
        .java.lang.Object o$207 = null;
        if ((o$207 = o) instanceof LocalClass && .com.redhat.ceylon.compiler.java.Util.isReified(o$207, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(toplevelAttribute_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, .ceylon.language.Integer.$TypeDescriptor$)))) {
            o$208 = (LocalClass)o$207;
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is LocalClass<Integer> o"));
        return 1L;
    }
    
    public static void set_(@.com.redhat.ceylon.compiler.java.metadata.Name("toplevelAttribute")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long toplevelAttribute) {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Inner",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class LocalClassInLocalAttribute<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            LocalClassInLocalAttribute(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                this.$reified$Inner = $reified$Inner;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(toplevelAttribute_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClassInLocalAttribute.class, $reified$Inner));
            }
        }
        final .ceylon.language.meta.declaration.ClassDeclaration d = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClassInLocalAttribute.class);
        final .ceylon.language.meta.declaration.SetterDeclaration lm$211;
        .java.lang.Object lm$210 = null;
        if ((lm$210 = d.getContainer()) instanceof .ceylon.language.meta.declaration.SetterDeclaration) {
            lm$211 = (.ceylon.language.meta.declaration.SetterDeclaration)lm$210;
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is SetterDeclaration lm = d.container"));
        if (lm$211.getName().equals("toplevelAttribute")) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.name == \"toplevelAttribute\""));
        if (lm$211.getContainer().equals(.com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.checkModule(.ceylon.language.meta.modules_.get_().getDefault(), "default", "unversioned").findPackage("com.redhat.ceylon.compiler.java.test.structure.reified"))) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lm.container == `package com.redhat.ceylon.compiler.java.test.structure.reified`"));
        .com.redhat.ceylon.compiler.java.test.structure.reified.classDecl4_.set_(d);
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Inner",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
        class LocalClass<Inner> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            LocalClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
            final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner) {
                this.$reified$Inner = $reified$Inner;
            }
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Inner;
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(toplevelAttribute_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, $reified$Inner));
            }
        }
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
        @.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.structure.reified::toplevelAttribute.1LocalClass<ceylon.language::String>")
        class LocalClass2 extends LocalClass<.ceylon.language.String> {
            
            LocalClass2() {
                super(.ceylon.language.String.$TypeDescriptor$);
            }
            
            @.ceylon.language.SharedAnnotation$annotation$
            @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
            @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::toplevelAttribute.1LocalClass2")
            public final LocalClass2 f() {
                return (LocalClass2).ceylon.language.nothing_.get_();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(toplevelAttribute_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass2.class));
            }
        }
        final .ceylon.language.meta.declaration.ClassDeclaration lc = (.ceylon.language.meta.declaration.ClassDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass.class);
        if (lc.getContainer().equals(lm$211)) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "lc.container == lm"));
        if (((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(LocalClass2.class)).<.ceylon.language.meta.declaration.FunctionDeclaration>getMemberDeclaration(.ceylon.language.meta.declaration.FunctionDeclaration.$TypeDescriptor$, "f").getName().equals("f")) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "`function LocalClass2.f`.name == \"f\""));
        final .java.lang.Object o = new LocalClass<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$);
        final LocalClass<.ceylon.language.Integer> o$218;
        .java.lang.Object o$217 = null;
        if ((o$217 = o) instanceof LocalClass && .com.redhat.ceylon.compiler.java.Util.isReified(o$217, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(toplevelAttribute_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(LocalClass.class, .ceylon.language.Integer.$TypeDescriptor$)))) {
            o$218 = (LocalClass)o$217;
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is LocalClass<Integer> o"));
    }
}