package com.redhat.ceylon.compiler.java.test.structure.concrete;

class UnionTypeArg implements .ceylon.language.Iterable<.java.lang.Object, .java.lang.Object> {
    
    UnionTypeArg() {
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object>(this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object>(this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.iterator = (.ceylon.language.Iterator).ceylon.language.nothing_.getNothing$();
    }
    protected final .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this;
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Iterable$this.getEmpty();
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$Iterable$this.getSize();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Iterable$this.contains(element);
    }
    
    @.java.lang.Override
    public .java.lang.Object getFirst() {
        return $ceylon$language$Iterable$this.getFirst();
    }
    
    @.java.lang.Override
    public .java.lang.Object getLast() {
        return $ceylon$language$Iterable$this.getLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getRest() {
        return $ceylon$language$Iterable$this.getRest();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable map(final .ceylon.language.Callable collecting) {
        return $ceylon$language$Iterable$this.map(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable filter(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public .java.lang.Object fold(final .java.lang.Object initial, final .ceylon.language.Callable accumulating) {
        return $ceylon$language$Iterable$this.fold(initial, accumulating);
    }
    
    @.java.lang.Override
    public .java.lang.Object find(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public .java.lang.Object findLast(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential sort(final .ceylon.language.Callable comparing) {
        return $ceylon$language$Iterable$this.sort(comparing);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential collect(final .ceylon.language.Callable collecting) {
        return $ceylon$language$Iterable$this.collect(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential select(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable chain(final .ceylon.language.Iterable other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ?>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.chain(other);
    }
    protected final .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Container$this;
    
    @.java.lang.Override
    public .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Container$impl() {
        return $ceylon$language$Container$this;
    }
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    private final .ceylon.language.Iterator iterator;
    
    @.java.lang.Override
    public final .ceylon.language.Iterator getIterator() {
        return iterator;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.UnionTypeArg();
    }
}
class UnionTypeArgOverride implements .ceylon.language.Iterable<.java.lang.Object, .java.lang.Object> {
    
    UnionTypeArgOverride() {
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object>(this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object>(this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.iterator = (.ceylon.language.Iterator).ceylon.language.nothing_.getNothing$();
    }
    protected final .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this;
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Iterable$this.getEmpty();
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$Iterable$this.getSize();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Iterable$this.contains(element);
    }
    
    @.java.lang.Override
    public .java.lang.Object getFirst() {
        return $ceylon$language$Iterable$this.getFirst();
    }
    
    @.java.lang.Override
    public .java.lang.Object getLast() {
        return $ceylon$language$Iterable$this.getLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getRest() {
        return $ceylon$language$Iterable$this.getRest();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable map(final .ceylon.language.Callable collecting) {
        return $ceylon$language$Iterable$this.map(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable filter(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public .java.lang.Object findLast(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential sort(final .ceylon.language.Callable comparing) {
        return $ceylon$language$Iterable$this.sort(comparing);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential collect(final .ceylon.language.Callable collecting) {
        return $ceylon$language$Iterable$this.collect(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential select(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable chain(final .ceylon.language.Iterable other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ?>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.chain(other);
    }
    protected final .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Container$this;
    
    @.java.lang.Override
    public .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Container$impl() {
        return $ceylon$language$Container$this;
    }
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    private final .ceylon.language.Iterator iterator;
    
    @.java.lang.Override
    public final .ceylon.language.Iterator getIterator() {
        return iterator;
    }
    
    @.java.lang.Override
    public .java.lang.Object find(final .ceylon.language.Callable selecting) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public .java.lang.Object fold(final .java.lang.Object initial, final .ceylon.language.Callable accumulating) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.UnionTypeArgOverride();
    }
}