package com.redhat.ceylon.compiler.java.test.statement.conditional;

class MethodIfNonEmptySequence {
    
    MethodIfNonEmptySequence() {
    }
    
    public final long m(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x) {
        .ceylon.language.Sequential<? extends .ceylon.language.Integer> $x$1;
        if (($x$1 = x) instanceof .ceylon.language.Sequence) {
            final .ceylon.language.Sequence<? extends .ceylon.language.Integer> $x$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)$x$1;
            final .ceylon.language.Sequence<? extends .ceylon.language.Integer> s = $x$2;
            return $x$2.getFirst().longValue();
        }
        return 0L;
    }
    
    public final long mvar(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x) {
        .ceylon.language.Sequential<? extends .ceylon.language.Integer> $s$4;
        if (($s$4 = x) instanceof .ceylon.language.Sequence) {
            final .ceylon.language.Sequence<? extends .ceylon.language.Integer> $s$5 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)$s$4;
            return $s$5.getFirst().longValue();
        }
        return 0L;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.statement.conditional.MethodIfNonEmptySequence();
    }
}