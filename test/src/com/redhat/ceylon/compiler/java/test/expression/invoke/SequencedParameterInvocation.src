package com.redhat.ceylon.compiler.java.test.expression.invoke;

class SequencedParameterInvocation {
    
    SequencedParameterInvocation() {
    }
    
    private final void m(final .java.lang.String a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$i$1 = m$i(a);
                m(a, $ceylontmp$i$1);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.Integer> m$i(final .java.lang.String a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    private final void m(final .java.lang.String a, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
    }
    
    private final void m2(final .java.lang.String a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SequencedParameterInvocation> $ceylontmp$i$3 = m2$i(a);
                m2(a, $ceylontmp$i$3);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SequencedParameterInvocation> m2$i(final .java.lang.String a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    private final void m2(final .java.lang.String a, final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SequencedParameterInvocation> i) {
    }
    
    private final void f() {
        m("foo");
        m("foo", new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L)));
        m2("foo", new .com.redhat.ceylon.compiler.java.language.ArraySequence<.com.redhat.ceylon.compiler.java.test.expression.invoke.SequencedParameterInvocation>(this, this, this));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.SequencedParameterInvocation();
    }
}