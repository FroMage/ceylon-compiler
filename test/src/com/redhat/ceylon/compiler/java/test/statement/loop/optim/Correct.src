package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Members({@.com.redhat.ceylon.compiler.java.metadata.Member(klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)})
class Correct implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    Correct() {
        final long expected = 55L;
        if (expected == notOptimizedIteration$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == notOptimizedIteration()"));
        if (expected == rangeOpIteration$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIteration()"));
        if (expected == rangeOpIterationReverse$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIterationReverse()"));
        if (expected == rangeIteration$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIteration()"));
        if (expected == rangeIterationReverse$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationReverse()"));
        if (expected == steppedRangeIteration$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == steppedRangeIteration()"));
        if (expected == steppedRangeIterationReverse$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == steppedRangeIterationReverse()"));
        if (expected == arrayIterationStatic$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationStatic()"));
        if (expected == javaArrayIterationStatic$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == javaArrayIterationStatic()"));
        if (expected == arraySequenceIterationStatic$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arraySequenceIterationStatic()"));
        if (expected == tupleIterationStatic$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == tupleIterationStatic()"));
        if (expected == rangeIterationDynamic$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationDynamic()"));
        if (expected == arrayIterationDynamic$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationDynamic()"));
        if (expected == arraySequenceIterationDynamic$priv$()) {
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arraySequenceIterationDynamic()"));
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long notOptimizedIteration$priv$() {
        long sum = 0L;
        .java.lang.Object elem$0;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$1 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator();
        loop_0: while (!((elem$0 = i$iterator$$1.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$0).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeOpIteration$priv$() {
        long sum = 0L;
        final long $ceylontmp$start$3 = 1L;
        final long $ceylontmp$end$4 = 10L;
        final boolean $ceylontmp$increasing$5 = $ceylontmp$start$3 <= $ceylontmp$end$4;
        final long $ceylontmp$incr$6 = $ceylontmp$increasing$5 ? 1L : -1L;
        loop_1: for (long i$7 = $ceylontmp$start$3; $ceylontmp$increasing$5 ? i$7 - $ceylontmp$end$4 <= 0L : i$7 - $ceylontmp$end$4 >= 0L; i$7 += $ceylontmp$incr$6) {
            final long i = i$7;
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeOpIterationReverse$priv$() {
        long sum = 0L;
        final long $ceylontmp$start$9 = 10L;
        final long $ceylontmp$end$10 = 1L;
        final boolean $ceylontmp$increasing$11 = $ceylontmp$start$9 <= $ceylontmp$end$10;
        final long $ceylontmp$incr$12 = $ceylontmp$increasing$11 ? 1L : -1L;
        loop_2: for (long i$13 = $ceylontmp$start$9; $ceylontmp$increasing$11 ? i$13 - $ceylontmp$end$10 <= 0L : i$13 - $ceylontmp$end$10 >= 0L; i$13 += $ceylontmp$incr$12) {
            final long i = i$13;
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIteration$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        final .ceylon.language.Range<.ceylon.language.Integer> range$15 = range;
        final .ceylon.language.Integer last$16 = range$15.getLast();
        final boolean deceasing$17 = range$15.getDecreasing();
        loop_3: for (.ceylon.language.Integer item$18 = range$15.getFirst(); item$18.compare(last$16) != (deceasing$17 ? .ceylon.language.smaller_.get_() : .ceylon.language.larger_.get_()); item$18 = deceasing$17 ? item$18.getPredecessor() : item$18.getSuccessor()) {
            final long i = item$18.longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIterationReverse$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        final .ceylon.language.Range<.ceylon.language.Integer> range$20 = range;
        final .ceylon.language.Integer last$21 = range$20.getLast();
        final boolean deceasing$22 = range$20.getDecreasing();
        loop_4: for (.ceylon.language.Integer item$23 = range$20.getFirst(); item$23.compare(last$21) != (deceasing$22 ? .ceylon.language.smaller_.get_() : .ceylon.language.larger_.get_()); item$23 = deceasing$22 ? item$23.getPredecessor() : item$23.getSuccessor()) {
            final long i = item$23.longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
    @.com.redhat.ceylon.compiler.java.metadata.Container(klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class)
    @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({
            "ceylon.language::Ordinal<com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal>",
            "ceylon.language::Comparable<com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal>"})
    class MyOrdinal implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Ordinal<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>, .ceylon.language.Comparable<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> {
        
        MyOrdinal(@.com.redhat.ceylon.compiler.java.metadata.Name("i")
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        final long i) {
            this.i = i;
            this.$ceylon$language$Ordinal$this$ = new .ceylon.language.Ordinal$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), this);
            this.$ceylon$language$Comparable$this$ = new .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), this);
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        private final long i;
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        public final long getI() {
            return i;
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        protected final .ceylon.language.Ordinal$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Ordinal$this$;
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .ceylon.language.Ordinal$impl<? extends .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Ordinal$impl() {
            return $ceylon$language$Ordinal$this$;
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        protected final .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Comparable$this$;
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .ceylon.language.Comparable$impl<? super .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Comparable$impl() {
            return $ceylon$language$Comparable$this$;
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public boolean largerThan(final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return $ceylon$language$Comparable$this$.largerThan(other);
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public boolean smallerThan(final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return $ceylon$language$Comparable$this$.smallerThan(other);
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public boolean notSmallerThan(final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return $ceylon$language$Comparable$this$.notSmallerThan(other);
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public boolean notLargerThan(final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return $ceylon$language$Comparable$this$.notLargerThan(other);
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.com.redhat.ceylon.compiler.java.metadata.Annotations({
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison")
        public final .ceylon.language.Comparison compare(@.com.redhat.ceylon.compiler.java.metadata.Name("other")
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal")
        final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return .ceylon.language.Integer.instance(getI()).compare(.ceylon.language.Integer.instance(other.getI()));
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.com.redhat.ceylon.compiler.java.metadata.Annotations({
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
                value = "com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal",
                erased = true)
        @.com.redhat.ceylon.compiler.java.metadata.Transient
        public final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal getSuccessor() {
            return new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(getI() + 1L);
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.com.redhat.ceylon.compiler.java.metadata.Annotations({
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
                value = "com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal",
                erased = true)
        @.com.redhat.ceylon.compiler.java.metadata.Transient
        public final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal getPredecessor() {
            return new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(getI() - 1L);
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class));
        }
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long steppedRangeIteration$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = new .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L));
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range$25 = range;
        final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal last$26 = range$25.getLast();
        final boolean deceasing$27 = range$25.getDecreasing();
        final long step$29 = 1L;
        loop_5: for (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal item$28 = range$25.getFirst(); ; ) {
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = item$28;
            sum += i.getI();
            for (long stepi$30 = 0L; stepi$30 < step$29; stepi$30++) {
                item$28 = deceasing$27 ? item$28.getPredecessor() : item$28.getSuccessor();
                if (item$28.compare(last$26) == (deceasing$27 ? .ceylon.language.smaller_.get_() : .ceylon.language.larger_.get_())) break loop_5;
            }
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long steppedRangeIterationReverse$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = new .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L));
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range$32 = range;
        final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal last$33 = range$32.getLast();
        final boolean deceasing$34 = range$32.getDecreasing();
        final long step$36 = 1L;
        loop_6: for (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal item$35 = range$32.getFirst(); ; ) {
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = item$35;
            sum += i.getI();
            for (long stepi$37 = 0L; stepi$37 < step$36; stepi$37++) {
                item$35 = deceasing$34 ? item$35.getPredecessor() : item$35.getSuccessor();
                if (item$35.compare(last$33) == (deceasing$34 ? .ceylon.language.smaller_.get_() : .ceylon.language.larger_.get_())) break loop_6;
            }
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long arrayIterationStatic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> array = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        long sum = 0L;
        final .java.lang.Object array$39 = array.toArray();
        final int length$40 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$39);
        loop_7: for (int i$41 = 0; i$41 < length$40; i$41++) {
            final long i = .com.redhat.ceylon.compiler.java.Util.getIntegerArray(array$39, i$41);
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long javaArrayIterationStatic$priv$() {
        final int[] array = new int[.com.redhat.ceylon.compiler.java.Util.toInt(10L)];
        final long $ceylontmp$start$43 = 1L;
        final long $ceylontmp$end$44 = 10L;
        final boolean $ceylontmp$increasing$45 = $ceylontmp$start$43 <= $ceylontmp$end$44;
        final long $ceylontmp$incr$46 = $ceylontmp$increasing$45 ? 1L : -1L;
        loop_8: for (long index$47 = $ceylontmp$start$43; $ceylontmp$increasing$45 ? index$47 - $ceylontmp$end$44 <= 0L : index$47 - $ceylontmp$end$44 >= 0L; index$47 += $ceylontmp$incr$46) {
            final long index = index$47;
            array[.com.redhat.ceylon.compiler.java.Util.toInt(index - 1L)] = .com.redhat.ceylon.compiler.java.Util.toInt(index);
        }
        long sum = 0L;
        final int[] array$48 = array;
        loop_9: for (int i$50 = 0; i$50 < array$48.length; i$50++) {
            final long i = array$48[i$50];
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long arraySequenceIterationStatic$priv$() {
        final .ceylon.language.ArraySequence<? extends .ceylon.language.Integer> array$55;
        .java.lang.Object array$53 = null;
        if ((array$53 = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)((.ceylon.language.Ranged<? super .ceylon.language.Integer, .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>)(.ceylon.language.Ranged)new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, true){
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
                        
                        public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                            return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                                {
                                    $iterator$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(-1L), .ceylon.language.Integer.instance(11L)).iterator();
                                }
                                private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                                private .ceylon.language.Integer i;
                                private boolean i$exhausted$;
                                
                                private final boolean i() {
                                    final .java.lang.Object $ceylontmp$item$54 = $iterator$0.next();
                                    i$exhausted$ = $ceylontmp$item$54 == .ceylon.language.finished_.get_();
                                    if (i$exhausted$) {
                                        return false;
                                    } else {
                                        i = (.ceylon.language.Integer)$ceylontmp$item$54;
                                        return true;
                                    }
                                }
                                
                                public final .java.lang.Object next() {
                                    if (this.i()) {
                                        final .ceylon.language.Integer i = this.i;
                                        return i;
                                    } else return .ceylon.language.finished_.get_();
                                }
                            };
                        }
                    };
                
                default: 
                    return null;
                
                }
            }
        }.getSequence()).segment(.ceylon.language.Integer.instance(1L), 11L)) instanceof .ceylon.language.ArraySequence && .com.redhat.ceylon.compiler.java.Util.isReified(array$53, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.ArraySequence.class, .ceylon.language.Integer.$TypeDescriptor$))) {
            array$55 = (.ceylon.language.ArraySequence)array$53;
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is ArraySequence<Integer> array = {for (i in -1..11) i}.sequence.segment(1, 11)"));
        long sum = 0L;
        final .ceylon.language.ArraySequence<? extends .ceylon.language.Integer> seq$59 = array$55;
        final .java.lang.Object[] array$56 = seq$59.$getArray$();
        final int length$57 = seq$59.$getLength$() + seq$59.$getFirst$();
        loop_10: for (int i$58 = seq$59.$getFirst$(); i$58 < length$57; i$58++) {
            final long i = ((.ceylon.language.Integer)array$56[i$58]).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long tupleIterationStatic$priv$() {
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> array = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>>>>>>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L),
                .ceylon.language.Integer.instance(5L),
                .ceylon.language.Integer.instance(6L),
                .ceylon.language.Integer.instance(7L),
                .ceylon.language.Integer.instance(8L),
                .ceylon.language.Integer.instance(9L),
                .ceylon.language.Integer.instance(10L)});
        long sum = 0L;
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> seq$64 = array;
        final .java.lang.Object[] array$61 = seq$64.$getArray$();
        final int length$62 = seq$64.$getLength$() + seq$64.$getFirst$();
        loop_11: for (int i$63 = seq$64.$getFirst$(); i$63 < length$62; i$63++) {
            final long i = ((.ceylon.language.Integer)array$61[i$63]).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long iterationDynamic$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("iterable")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Iterable<ceylon.language::Integer,ceylon.language::Null>")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable) {
        long sum = 0L;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$68 = iterable;
        final boolean isArray$69 = iterable$68 instanceof .ceylon.language.Array;
        final boolean isArraySequence$70 = iterable$68 instanceof .ceylon.language.ArraySequence;
        .java.lang.Object elem$66 = null;
        final .java.lang.Object array$71;
        int i$72 = 0;
        final int length$73;
        if (isArraySequence$70) {
            array$71 = ((.ceylon.language.ArraySequence)iterable$68).$getArray$();
            i$72 = ((.ceylon.language.ArraySequence)iterable$68).$getFirst$();
            length$73 = i$72 + ((.ceylon.language.ArraySequence)iterable$68).$getLength$();
        } else if (isArray$69) {
            array$71 = ((.ceylon.language.Array)iterable$68).toArray();
            length$73 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$71);
        } else {
            array$71 = null;
            length$73 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$67 = isArraySequence$70 || isArray$69 ? null : iterable$68.iterator();
        loop_12: while (isArraySequence$70 || isArray$69 ? i$72 < length$73 : !((elem$66 = i$iterator$$67.next()) instanceof .ceylon.language.Finished)) {
            if (isArraySequence$70 || isArray$69) elem$66 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$71, i$72++);
            final long i = ((.ceylon.language.Integer)elem$66).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIterationDynamic$priv$() {
        final .ceylon.language.Range<.ceylon.language.Integer> iterable = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L));
        return iterationDynamic$priv$(iterable);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long arrayIterationDynamic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> iterable = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        return iterationDynamic$priv$(iterable);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long arraySequenceIterationDynamic$priv$() {
        final .ceylon.language.ArraySequence<? extends .ceylon.language.Integer> iterable$79;
        .java.lang.Object iterable$77 = null;
        if ((iterable$77 = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, true){
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
                        
                        public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                            return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                                {
                                    $iterator$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)).iterator();
                                }
                                private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                                private .ceylon.language.Integer i;
                                private boolean i$exhausted$;
                                
                                private final boolean i() {
                                    final .java.lang.Object $ceylontmp$item$78 = $iterator$0.next();
                                    i$exhausted$ = $ceylontmp$item$78 == .ceylon.language.finished_.get_();
                                    if (i$exhausted$) {
                                        return false;
                                    } else {
                                        i = (.ceylon.language.Integer)$ceylontmp$item$78;
                                        return true;
                                    }
                                }
                                
                                public final .java.lang.Object next() {
                                    if (this.i()) {
                                        final .ceylon.language.Integer i = this.i;
                                        return i;
                                    } else return .ceylon.language.finished_.get_();
                                }
                            };
                        }
                    };
                
                default: 
                    return null;
                
                }
            }
        }.getSequence()) instanceof .ceylon.language.ArraySequence && .com.redhat.ceylon.compiler.java.Util.isReified(iterable$77, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.ArraySequence.class, .ceylon.language.Integer.$TypeDescriptor$))) {
            iterable$79 = (.ceylon.language.ArraySequence)iterable$77;
        } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is ArraySequence<Integer> iterable = {for (i in 0..10) i}.sequence"));
        return iterationDynamic$priv$(iterable$79);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class);
}