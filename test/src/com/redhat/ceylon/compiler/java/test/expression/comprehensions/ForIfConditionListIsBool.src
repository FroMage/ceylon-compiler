package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

class ForIfConditionListIsBool implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    ForIfConditionListIsBool() {
    }
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.String> m$priv(final .ceylon.language.Sequence xs) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String> {
                    
                    $ComprehensionIterator$() {
                        super(.ceylon.language.String.$TypeDescriptor);
                        iter$0 = xs.getIterator();
                    }
                    private final .ceylon.language.Iterator iter$0;
                    private .java.lang.Object x;
                    private boolean x$exhausted;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmpitem0 = iter$0.next();
                        x$exhausted = $ceylontmpitem0 == .ceylon.language.finished_.getFinished$();
                        if (x$exhausted) {
                            return false;
                        } else {
                            x = (.java.lang.Object)$ceylontmpitem0;
                            return true;
                        }
                    }
                    private .java.lang.String $x$2;
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.x()) break;
                            .java.lang.Object $x$1 = null;
                            if (($x$1 = x) instanceof .ceylon.language.String) {
                                $x$2 = ((.ceylon.language.String)$x$1).toString();
                                if (.ceylon.language.String.getUppercased($x$2).equals("S")) {
                                    break;
                                }
                            }
                        }
                        return !x$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.next1()) {
                            final .java.lang.Object x = this.x;
                            return .ceylon.language.String.instance(.ceylon.language.String.getUppercased($x$2));
                        } else return .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        }.getSequence();
    }
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.String> synthetic$priv(final .ceylon.language.Sequence xs) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String> {
                    
                    $ComprehensionIterator$() {
                        super(.ceylon.language.String.$TypeDescriptor);
                        iter$0 = xs.getIterator();
                    }
                    private final .ceylon.language.Iterator iter$0;
                    private .java.lang.Object x;
                    private boolean x$exhausted;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmpitem3 = iter$0.next();
                        x$exhausted = $ceylontmpitem3 == .ceylon.language.finished_.getFinished$();
                        if (x$exhausted) {
                            return false;
                        } else {
                            x = (.java.lang.Object)$ceylontmpitem3;
                            return true;
                        }
                    }
                    private .java.lang.String $z$5;
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.x()) break;
                            .java.lang.Object $z$4 = null;
                            if (($z$4 = x) instanceof .ceylon.language.String) {
                                $z$5 = ((.ceylon.language.String)$z$4).toString();
                                if (.ceylon.language.String.getUppercased($z$5).equals("S")) {
                                    break;
                                }
                            }
                        }
                        return !x$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.next1()) {
                            final .java.lang.Object x = this.x;
                            return .ceylon.language.String.instance(.ceylon.language.String.getUppercased($z$5));
                        } else return .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        }.getSequence();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfConditionListIsBool();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfConditionListIsBool.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfConditionListIsBool.class);
}