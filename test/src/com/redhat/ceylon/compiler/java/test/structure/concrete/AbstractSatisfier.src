package com.redhat.ceylon.compiler.java.test.structure.concrete;

interface AbstractSatisfier_I extends .ceylon.language.Iterable<.java.lang.Object, .java.lang.Object> {
}
final class AbstractSatisfier_I$impl {
    
    AbstractSatisfier_I$impl(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSatisfier_I $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSatisfier_I $this;
}
abstract class AbstractSatisfier<T> implements .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSatisfier_I, .ceylon.language.Iterable<T, .java.lang.Object> {
    
    AbstractSatisfier() {
        this.$com$redhat$ceylon$compiler$java$test$structure$concrete$AbstractSatisfier_I$this = new .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSatisfier_I$impl(this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object>((.ceylon.language.Iterable<.java.lang.Object, .java.lang.Object>)(.ceylon.language.Iterable)this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object>((.ceylon.language.Container<.java.lang.Object, .java.lang.Object>)(.ceylon.language.Container)this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
    }
    protected final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSatisfier_I$impl $com$redhat$ceylon$compiler$java$test$structure$concrete$AbstractSatisfier_I$this;
    protected final .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$Iterable$this.getSize();
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Iterable$this.getEmpty();
    }
    
    @.java.lang.Override
    public .java.lang.Object getFirst() {
        return $ceylon$language$Iterable$this.getFirst();
    }
    
    @.java.lang.Override
    public .java.lang.Object getLast() {
        return $ceylon$language$Iterable$this.getLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .java.lang.Object, ?> getRest() {
        return $ceylon$language$Iterable$this.getRest();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .java.lang.Object> getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ?> map(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .java.lang.Object, ?> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold(initial, accumulating);
    }
    
    @.java.lang.Override
    public .java.lang.Object find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public .java.lang.Object findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .java.lang.Object> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.collect(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .java.lang.Object> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .java.lang.Object, ?> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .java.lang.Object, ?> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .java.lang.Object, ?> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .java.lang.Object, ?> getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .java.lang.Object>, ?> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ?> chain(final .ceylon.language.Iterable<? extends Other, ?> other) {
        return $ceylon$language$Iterable$this.chain(other);
    }
    
    @.java.lang.Override
    public <Grouping>.ceylon.language.Map<? extends Grouping, ? extends .ceylon.language.Sequence<? extends .java.lang.Object>> group(final .ceylon.language.Callable<? extends Grouping> grouping) {
        return $ceylon$language$Iterable$this.group(grouping);
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Iterable$this.contains(element);
    }
    protected final .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Container$this;
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .java.lang.Object> containsEvery$elements() {
        return $ceylon$language$Category$this.containsEvery$elements();
    }
    
    @.java.lang.Override
    public final boolean containsEvery() {
        return $ceylon$language$Category$this.containsEvery();
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Sequential<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .java.lang.Object> containsAny$elements() {
        return $ceylon$language$Category$this.containsAny$elements();
    }
    
    @.java.lang.Override
    public final boolean containsAny() {
        return $ceylon$language$Category$this.containsAny();
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Sequential<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
}