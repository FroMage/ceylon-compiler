package com.redhat.ceylon.compiler.java.test.structure.nesting.icc;

interface I<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> {
    
    public .com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I$impl<T, X> $com$redhat$ceylon$compiler$java$test$structure$nesting$icc$I$impl();
    
    public abstract <U>T m1(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedU, final X b);
    
    public abstract <U>U m1$u(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedU, final X b);
    
    public abstract <U>T m1(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedU, final X b, final U u);
}
final class I$impl<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> {
    
    I$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedX, .com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I<? extends T, ? super X> $this) {
        this.$reifiedT = $reifiedT;
        this.$reifiedX = $reifiedX;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT;
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedX;
    private final .com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I<? extends T, ? super X> $this;
    
    public void $refine(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedX) {
        this.$reifiedX = $reifiedX;
        this.$reifiedT = $reifiedT;
    }
    
    public final <U>U m1$u(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedU, final X b) {
        return null;
    }
    
    class IC implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
        
        IC() {
        }
        
        class ICC implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            ICC() {
            }
            
            private final T m2$priv() {
                return $this.<.java.lang.Object>m1(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, null);
            }
            
            @.java.lang.Override
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I.class, .com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I$impl.this.$reifiedT, .com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I$impl.this.$reifiedX), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I$impl.IC.class)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I$impl.IC.ICC.class));
            }
        }
        
        @.java.lang.Override
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I.class, .com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I$impl.this.$reifiedT, .com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I$impl.this.$reifiedX), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.icc.I$impl.IC.class));
        }
    }
}