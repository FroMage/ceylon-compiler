package com.redhat.ceylon.compiler.java.test.expression.operator;

public class SetOperators implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    public SetOperators() {
    }
    
    private final void testSetOperatorsWithSameTypes$priv(final .ceylon.language.Set<? extends .ceylon.language.Integer> a, final .ceylon.language.Set<? extends .ceylon.language.Integer> b) {
        .ceylon.language.Set<? extends .ceylon.language.Integer> x;
        x = a.union(.ceylon.language.Integer.$TypeDescriptor, b);
        x = a.intersection(.ceylon.language.Integer.$TypeDescriptor, b);
        x = a.complement(.ceylon.language.Integer.$TypeDescriptor, b);
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop0 = x.union(.ceylon.language.Integer.$TypeDescriptor, a);
                x = $ceylontmpop0;
            }
            returning $ceylontmpop0;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop1 = x.intersection(.ceylon.language.Integer.$TypeDescriptor, a);
                x = $ceylontmpop1;
            }
            returning $ceylontmpop1;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop2 = x.complement(.ceylon.language.Integer.$TypeDescriptor, a);
                x = $ceylontmpop2;
            }
            returning $ceylontmpop2;
        );
    }
    
    private final void testSetOperatorsWithDifferentTypes$priv(final .ceylon.language.Set<? extends .ceylon.language.Integer> a, final .ceylon.language.Set<? extends .ceylon.language.Float> b) {
        .ceylon.language.Set x1 = a.union(.ceylon.language.Float.$TypeDescriptor, b);
        x1.contains(.ceylon.language.Integer.instance(1L));
        x1.contains(.ceylon.language.Float.instance(1.1));
        .java.lang.Object $elem$3;
        for (.ceylon.language.Iterator<? extends .java.lang.Object> $i$iter$4 = ((.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)x1).iterator(); !(($elem$3 = $i$iter$4.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object i = (.java.lang.Object)$elem$3;
            .java.lang.Object $i$6;
            if (($i$6 = i) instanceof .ceylon.language.Integer) {
                final long $i$10 = ((.ceylon.language.Integer)$i$6).longValue();
                final long s = $i$10 + 0L;
            } else {
                .java.lang.Object $i$8;
                if (($i$8 = i) instanceof .ceylon.language.Float) {
                    final double $i$9 = ((.ceylon.language.Float)$i$8).doubleValue();
                    final double s = $i$9 + 0L;
                }
            }
        }
        .ceylon.language.Set<? extends .java.lang.Object> x2 = a.intersection(.ceylon.language.Float.$TypeDescriptor, b);
        x1.contains(.ceylon.language.Integer.instance(1L));
        x1.contains(.ceylon.language.Float.instance(1.1));
        .ceylon.language.Set<? extends .ceylon.language.Integer> x4 = a.complement(.ceylon.language.Float.$TypeDescriptor, b);
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop11 = x4.intersection(.ceylon.language.Float.$TypeDescriptor, b);
                x4 = $ceylontmpop11;
            }
            returning $ceylontmpop11;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop12 = x4.complement(.ceylon.language.Float.$TypeDescriptor, b);
                x4 = $ceylontmpop12;
            }
            returning $ceylontmpop12;
        );
        x4.contains(.ceylon.language.Integer.instance(1L));
        .java.lang.Object $elem$13;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> $i$iter$14 = x4.iterator(); !(($elem$13 = $i$iter$14.next()) instanceof .ceylon.language.Finished); ) {
            final long i = ((.ceylon.language.Integer)$elem$13).longValue();
            final long s = i + 0L;
        }
    }
    
    private final void testSetOperatorsAndInvocationOnResult$priv(final .ceylon.language.Set<? extends .ceylon.language.Integer> a, final .ceylon.language.Set<? extends .ceylon.language.Float> b) {
        a.union(.ceylon.language.Integer.$TypeDescriptor, a).contains(.ceylon.language.Integer.instance(1L));
        a.intersection(.ceylon.language.Integer.$TypeDescriptor, a).contains(.ceylon.language.Integer.instance(1L));
        a.complement(.ceylon.language.Integer.$TypeDescriptor, a).contains(.ceylon.language.Integer.instance(1L));
        a.union(.ceylon.language.Float.$TypeDescriptor, b).contains(.ceylon.language.Float.instance(3.14));
        a.intersection(.ceylon.language.Float.$TypeDescriptor, b).contains(.ceylon.language.Float.instance(3.14));
        a.complement(.ceylon.language.Float.$TypeDescriptor, b).contains(.ceylon.language.Float.instance(3.14));
    }
    
    private final void testSetOperatorsPrecedence$priv(final .ceylon.language.Set<? extends .ceylon.language.Integer> a, final .ceylon.language.Set<? extends .ceylon.language.Integer> b, final .ceylon.language.Set<? extends .ceylon.language.Integer> c) {
        .ceylon.language.Set<? extends .ceylon.language.Integer> x1 = a.union(.ceylon.language.Integer.$TypeDescriptor, b.intersection(.ceylon.language.Integer.$TypeDescriptor, c));
        .ceylon.language.Set<? extends .ceylon.language.Integer> x2 = b.intersection(.ceylon.language.Integer.$TypeDescriptor, c).union(.ceylon.language.Integer.$TypeDescriptor, a);
    }
    
    private final void testSetOperatorsWithErasedTypes$priv(final .ceylon.language.Set<? extends .ceylon.language.String> setOfString, final .ceylon.language.Set setOfUnionType, final .ceylon.language.Set<? extends .ceylon.language.Sequential<? extends .java.lang.Object>> setOfIntersectionType, final .ceylon.language.Set<? extends .java.lang.Object> setOfNothing) {
        .ceylon.language.Set x1 = setOfUnionType.union(.ceylon.language.String.$TypeDescriptor, setOfString);
        .ceylon.language.Set<? extends .ceylon.language.Integer> x2 = (.ceylon.language.Set<? extends .ceylon.language.Integer>)(.ceylon.language.Set)setOfUnionType.intersection(.ceylon.language.String.$TypeDescriptor, setOfString);
        .ceylon.language.Set x4 = setOfUnionType.complement(.ceylon.language.String.$TypeDescriptor, setOfString);
        .ceylon.language.Set y1 = setOfIntersectionType.union(.ceylon.language.String.$TypeDescriptor, setOfString);
        .ceylon.language.Set<? extends .java.lang.Object> y2 = setOfIntersectionType.intersection(.ceylon.language.String.$TypeDescriptor, setOfString);
        .ceylon.language.Set<? extends .ceylon.language.Sequential<? extends .java.lang.Object>> y4 = setOfIntersectionType.complement(.ceylon.language.String.$TypeDescriptor, setOfString);
        .ceylon.language.Set<? extends .ceylon.language.String> z1 = setOfNothing.union(.ceylon.language.String.$TypeDescriptor, setOfString);
        .ceylon.language.Set<? extends .java.lang.Object> z2 = setOfNothing.intersection(.ceylon.language.String.$TypeDescriptor, setOfString);
        .ceylon.language.Set<? extends .java.lang.Object> z4 = setOfNothing.complement(.ceylon.language.String.$TypeDescriptor, setOfString);
    }
    
    private final void m3$priv(final .ceylon.language.Set<? extends .ceylon.language.Integer> a, final .ceylon.language.Set<? extends .java.lang.Object> b) {
        final .ceylon.language.Set<? extends .ceylon.language.Integer> s1 = a.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, b);
        final .ceylon.language.Set<? extends .java.lang.Object> s2 = a.intersection(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, b);
        final .ceylon.language.Set<? extends .ceylon.language.Integer> s4 = a.complement(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, b);
        .ceylon.language.Set<? extends .ceylon.language.Integer> sync;
        sync = a.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, b);
        sync = (.ceylon.language.Set<? extends .ceylon.language.Integer>)(.ceylon.language.Set)a.intersection(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, b);
        sync = a.complement(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, b);
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop15 = sync.union(.ceylon.language.Integer.$TypeDescriptor, a);
                sync = $ceylontmpop15;
            }
            returning $ceylontmpop15;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop16 = sync.intersection(.ceylon.language.Integer.$TypeDescriptor, a);
                sync = $ceylontmpop16;
            }
            returning $ceylontmpop16;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop17 = sync.complement(.ceylon.language.Integer.$TypeDescriptor, a);
                sync = $ceylontmpop17;
            }
            returning $ceylontmpop17;
        );
    }
    
    private final <T>void m4$priv(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final .ceylon.language.Set<? extends .java.lang.Object> a, final .ceylon.language.Set<? extends T> b, final T t) {
        final .ceylon.language.Set<? extends .java.lang.Object> s1 = a.union($reifiedT, b);
        final .ceylon.language.Set<? extends T> s2 = a.intersection($reifiedT, b);
        s2.contains(t);
        final .ceylon.language.Set<? extends .java.lang.Object> s4 = a.complement($reifiedT, b);
        .ceylon.language.Set<? extends .java.lang.Object> sync;
        sync = a.union($reifiedT, b);
        sync = a.intersection($reifiedT, b);
        sync = a.complement($reifiedT, b);
        (
            let
            {
                .ceylon.language.Set<? extends .java.lang.Object> $ceylontmpop18 = sync.union(.ceylon.language.Object.$TypeDescriptor, a);
                sync = $ceylontmpop18;
            }
            returning $ceylontmpop18;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .java.lang.Object> $ceylontmpop19 = sync.intersection(.ceylon.language.Object.$TypeDescriptor, a);
                sync = $ceylontmpop19;
            }
            returning $ceylontmpop19;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .java.lang.Object> $ceylontmpop20 = sync.complement(.ceylon.language.Object.$TypeDescriptor, a);
                sync = $ceylontmpop20;
            }
            returning $ceylontmpop20;
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.SetOperators();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.SetOperators.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.SetOperators.class);
}
class SetOperatorsSuper implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SetOperatorsSuper(final .ceylon.language.Set<? extends .ceylon.language.Integer> a, final .ceylon.language.Set<? extends .ceylon.language.Integer> b) {
        this.a = a;
        this.b = b;
        this.sync = getA();
    }
    private .ceylon.language.Set<? extends .ceylon.language.Integer> sync;
    
    public final .ceylon.language.Set<? extends .ceylon.language.Integer> getSync() {
        return sync;
    }
    
    public final void setSync(final .ceylon.language.Set<? extends .ceylon.language.Integer> sync) {
        this.sync = sync;
    }
    private .ceylon.language.Set<? extends .ceylon.language.Integer> a;
    
    public final .ceylon.language.Set<? extends .ceylon.language.Integer> getA() {
        return a;
    }
    
    public final void setA(final .ceylon.language.Set<? extends .ceylon.language.Integer> a) {
        this.a = a;
    }
    private .ceylon.language.Set<? extends .ceylon.language.Integer> b;
    
    public final .ceylon.language.Set<? extends .ceylon.language.Integer> getB() {
        return b;
    }
    
    public final void setB(final .ceylon.language.Set<? extends .ceylon.language.Integer> b) {
        this.b = b;
    }
    
    public .java.lang.Object m() {
        setSync(getA().union(.ceylon.language.Integer.$TypeDescriptor, getB()));
        setSync(getA().intersection(.ceylon.language.Integer.$TypeDescriptor, getB()));
        setSync(getA().complement(.ceylon.language.Integer.$TypeDescriptor, getB()));
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop21 = getSync().union(.ceylon.language.Integer.$TypeDescriptor, getA());
                setSync($ceylontmpop21);
            }
            returning $ceylontmpop21;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop22 = getSync().intersection(.ceylon.language.Integer.$TypeDescriptor, getA());
                setSync($ceylontmpop22);
            }
            returning $ceylontmpop22;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpop23 = getSync().complement(.ceylon.language.Integer.$TypeDescriptor, getA());
                setSync($ceylontmpop23);
            }
            returning $ceylontmpop23;
        );
        return null;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.SetOperatorsSuper.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.SetOperatorsSuper.class);
}
class SetOperatorsSub extends .com.redhat.ceylon.compiler.java.test.expression.operator.SetOperatorsSuper {
    
    SetOperatorsSub(final .ceylon.language.Set<? extends .ceylon.language.Integer> a, final .ceylon.language.Set<? extends .java.lang.Object> b) {
        super(a, (.ceylon.language.Set<? extends .ceylon.language.Integer>)(.ceylon.language.Set)b);
    }
    
    @.java.lang.Override
    public final .java.lang.Object m() {
        super.setSync(super.getA().union(.ceylon.language.Integer.$TypeDescriptor, super.getB()));
        super.setSync(super.getA().intersection(.ceylon.language.Integer.$TypeDescriptor, super.getB()));
        super.setSync(super.getA().complement(.ceylon.language.Integer.$TypeDescriptor, super.getB()));
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpopV25 = super.getSync().union(.ceylon.language.Integer.$TypeDescriptor, super.getA());
                super.setSync($ceylontmpopV25);
            }
            returning $ceylontmpopV25;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpopV27 = super.getSync().intersection(.ceylon.language.Integer.$TypeDescriptor, super.getA());
                super.setSync($ceylontmpopV27);
            }
            returning $ceylontmpopV27;
        );
        (
            let
            {
                .ceylon.language.Set<? extends .ceylon.language.Integer> $ceylontmpopV29 = super.getSync().complement(.ceylon.language.Integer.$TypeDescriptor, super.getA());
                super.setSync($ceylontmpopV29);
            }
            returning $ceylontmpopV29;
        );
        return null;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.SetOperatorsSub.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.SetOperatorsSub.class);
}