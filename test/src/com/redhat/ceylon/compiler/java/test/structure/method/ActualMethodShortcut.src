package com.redhat.ceylon.compiler.java.test.structure.method;

abstract class ActualMethodShortcut {
    
    ActualMethodShortcut() {
    }
    
    public abstract .java.lang.Object print1();
    
    public abstract .java.lang.Object print2(final .java.lang.String s);
    
    public abstract .java.lang.Object foo(final .java.lang.String s);
    
    public abstract .java.lang.String foo2(final .java.lang.String s);
}
class ActualMethodShortcutSub extends .com.redhat.ceylon.compiler.java.test.structure.method.ActualMethodShortcut {
    
    ActualMethodShortcutSub() {
        super();
        this.print2$specifier = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>("Anything(String)"){
            
            @.java.lang.Override
            public .java.lang.Object $call(final .java.lang.Object $param$0) {
                final .java.lang.String $$line = ((.ceylon.language.String)$param$0).toString();
                return (
                    let
                    {
                        .ceylon.language.process_.getProcess$().writeLine($$line);
                    }
                    returning null;
                );
            }
        };
    }
    
    @.java.lang.Override
    public final .java.lang.Object print1() {
        .ceylon.language.process_.getProcess$().writeLine("hello");
        return null;
    }
    private final .ceylon.language.Callable<? extends .java.lang.Object> print2$specifier;
    
    @.java.lang.Override
    public final .java.lang.Object print2(final .java.lang.String s) {
        return print2$specifier.$call(.ceylon.language.String.instance(s));
    }
    
    @.java.lang.Override
    public final .java.lang.Object foo(final .java.lang.String s) {
        .ceylon.language.print_.print(.ceylon.language.String.instance(s));
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.String foo2(final .java.lang.String s) {
        return s.toString();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.method.ActualMethodShortcutSub();
    }
}