package com.redhat.ceylon.compiler.java.test.structure.method;

class MethodWithVarargs {
    
    MethodWithVarargs() {
    }
    
    public final void f1() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$ns$3 = f1$ns();
                f1($ceylontmp$ns$3);
            }
            returning null;
        );
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> f1$ns() {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    public final void f1(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        .java.lang.Object $elem$0;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> $n$iter$1 = ns.getIterator(); !(($elem$0 = $n$iter$1.next()) instanceof .ceylon.language.Finished); ) {
            final long n = ((.ceylon.language.Integer)$elem$0).longValue();
        }
    }
    
    public final void f2(final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$ns$7 = f2$ns(i);
                f2(i, $ceylontmp$ns$7);
            }
            returning null;
        );
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> f2$ns(final long i) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    public final void f2(final long i, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        .java.lang.Object $elem$4;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> $n$iter$5 = ns.getIterator(); !(($elem$4 = $n$iter$5.next()) instanceof .ceylon.language.Finished); ) {
            final long n = ((.ceylon.language.Integer)$elem$4).longValue();
        }
    }
    
    public final void f3() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$os$11 = f3$os();
                f3($ceylontmp$os$11);
            }
            returning null;
        );
    }
    
    public final .ceylon.language.Sequential<? extends .java.lang.Object> f3$os() {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    public final void f3(final .ceylon.language.Sequential<? extends .java.lang.Object> os) {
        .java.lang.Object $elem$8;
        for (.ceylon.language.Iterator<? extends .java.lang.Object> $o$iter$9 = os.getIterator(); !(($elem$8 = $o$iter$9.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object o = (.java.lang.Object)$elem$8;
        }
    }
    
    private final void m() {
        f1(new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L)));
        f2(1L, new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Integer>(.ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L)));
        f1();
        f2(1L);
        f1(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.instance(1L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>(.ceylon.language.Integer.instance(2L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.instance(3L), .ceylon.language.empty_.getEmpty$()))));
        f2(1L, new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>(.ceylon.language.Integer.instance(2L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.instance(3L), .ceylon.language.empty_.getEmpty$())));
        f3(new .com.redhat.ceylon.compiler.java.language.ArraySequence<.java.lang.Object>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L)));
        f3(new .com.redhat.ceylon.compiler.java.language.ArraySequence<.java.lang.Object>(new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L))));
        f3((.ceylon.language.Sequential)new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.instance(1L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>(.ceylon.language.Integer.instance(2L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.instance(3L), .ceylon.language.empty_.getEmpty$()))));
        f3(new .com.redhat.ceylon.compiler.java.language.ArraySequence<.java.lang.Object>(.ceylon.language.Integer.instance(1L), .ceylon.language.String.instance("foo"), .ceylon.language.Float.instance(5.0)));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.method.MethodWithVarargs();
    }
}