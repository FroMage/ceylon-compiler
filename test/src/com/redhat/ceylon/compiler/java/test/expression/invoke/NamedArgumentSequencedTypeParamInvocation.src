package com.redhat.ceylon.compiler.java.test.expression.invoke;

class NamedArgumentSequencedTypeParamInvocation<T> {
    
    NamedArgumentSequencedTypeParamInvocation() {
    }
    
    public final void algo() {
        (
            let
            {
                .ceylon.language.Sequential<? extends T> $ceylontmp$strings$1 = algo$strings();
                algo($ceylontmp$strings$1);
            }
            returning null;
        );
    }
    
    public final .ceylon.language.Sequential<? extends T> algo$strings() {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    public final void algo(final .ceylon.language.Sequential<? extends T> strings) {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentSequencedTypeParamInvocation();
    }
}
final class foo_ {
    
    private foo_() {
    }
    
    static void foo() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentSequencedTypeParamInvocation<.ceylon.language.String> $arg$2$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentSequencedTypeParamInvocation<.ceylon.language.String>();
                .ceylon.language.String $arg$2$0$0 = .ceylon.language.String.instance("x");
                .ceylon.language.String $arg$2$0$1 = .ceylon.language.String.instance("y");
                .ceylon.language.Sequential<? extends .ceylon.language.String> $arg$2$0$2 = (
                    let
                    {
                        .java.lang.Object[] $ceylontmp3 = new .java.lang.Object[]{$arg$2$0$0, $arg$2$0$1};
                    }
                    returning new .com.redhat.ceylon.compiler.java.language.ArraySequence($ceylontmp3);
                );
                $arg$2$callable$.algo($arg$2$0$2);
            }
            returning null;
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.foo_.foo();
    }
}