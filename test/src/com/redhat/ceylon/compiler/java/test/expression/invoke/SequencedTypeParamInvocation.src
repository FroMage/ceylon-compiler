package com.redhat.ceylon.compiler.java.test.expression.invoke;

class SequencedTypeParamInvocation<T> {
    
    SequencedTypeParamInvocation() {
    }
    
    public final void algo() {
        (
            let
            {
                .ceylon.language.Iterable<? extends T> $ceylontmp$strings$1 = algo$strings();
                algo($ceylontmp$strings$1);
            }
            returning null;
        );
    }
    
    public final .ceylon.language.Iterable<? extends T> algo$strings() {
        return (.ceylon.language.Iterable).ceylon.language.empty_.getEmpty();
    }
    
    public final void algo(final .ceylon.language.Iterable<? extends T> strings) {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.SequencedTypeParamInvocation();
    }
}
final class sequencedTypeParamInvocationMethod_ {
    
    private sequencedTypeParamInvocationMethod_() {
    }
    
    static void sequencedTypeParamInvocationMethod() {
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.SequencedTypeParamInvocation<.ceylon.language.String>().algo(new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>(.ceylon.language.String.instance("x"), .ceylon.language.String.instance("y")));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.sequencedTypeParamInvocationMethod_.sequencedTypeParamInvocationMethod();
    }
}