package com.redhat.ceylon.compiler.java.test.structure.concrete;

class EmptyImpl extends .java.lang.Object implements .ceylon.language.Empty {
    
    EmptyImpl() {
        super();
        this.$ceylon$language$Empty$this = new .ceylon.language.Empty$impl(this);
        this.$ceylon$language$Sequential$this = new .ceylon.language.Sequential$impl<.java.lang.Object>(this);
        this.$ceylon$language$List$this = new .ceylon.language.List$impl<.java.lang.Object>(this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<.java.lang.Object>(this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object>(this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object>(this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<?>>((.ceylon.language.Cloneable<.ceylon.language.Collection<?>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, .java.lang.Object>(this);
        this.$ceylon$language$Ranged$this = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<?>>((.ceylon.language.Ranged<.ceylon.language.Integer, .ceylon.language.List<?>>)(.ceylon.language.Ranged)this);
    }
    protected final .ceylon.language.Empty$impl $ceylon$language$Empty$this;
    
    @.java.lang.Override
    public final .ceylon.language.Iterator<?> getIterator() {
        return $ceylon$language$Empty$this.getIterator();
    }
    
    @.java.lang.Override
    public final .java.lang.Object item(final .ceylon.language.Integer index) {
        return $ceylon$language$Empty$this.item(index);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty segment(final .ceylon.language.Integer from, final long length) {
        return $ceylon$language$Empty$this.segment(from, length);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty span(final .ceylon.language.Integer from, final .ceylon.language.Integer to) {
        return $ceylon$language$Empty$this.span(from, to);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty spanTo(final .ceylon.language.Integer to) {
        return $ceylon$language$Empty$this.spanTo(to);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty spanFrom(final .ceylon.language.Integer from) {
        return $ceylon$language$Empty$this.spanFrom(from);
    }
    
    @.java.lang.Override
    public final boolean getEmpty() {
        return $ceylon$language$Empty$this.getEmpty();
    }
    
    @.java.lang.Override
    public final long getSize() {
        return $ceylon$language$Empty$this.getSize();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty getReversed() {
        return $ceylon$language$Empty$this.getReversed();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty getSequence() {
        return $ceylon$language$Empty$this.getSequence();
    }
    
    @.java.lang.Override
    public final .java.lang.String toString() {
        return $ceylon$language$Empty$this.toString();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getLastIndex() {
        return $ceylon$language$Empty$this.getLastIndex();
    }
    
    @.java.lang.Override
    public final .java.lang.Object getFirst() {
        return $ceylon$language$Empty$this.getFirst();
    }
    
    @.java.lang.Override
    public final .java.lang.Object getLast() {
        return $ceylon$language$Empty$this.getLast();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty getClone() {
        return $ceylon$language$Empty$this.getClone();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty getCoalesced() {
        return $ceylon$language$Empty$this.getCoalesced();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ?>, ?> getIndexed() {
        return $ceylon$language$Empty$this.getIndexed();
    }
    
    @.java.lang.Override
    public final <Other>.ceylon.language.Iterable<? extends Other, ?> chain(final .ceylon.language.Iterable<? extends Other, ?> other) {
        return $ceylon$language$Empty$this.chain(other);
    }
    
    @.java.lang.Override
    public final boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Empty$this.contains(element);
    }
    
    @.java.lang.Override
    public final long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Empty$this.count(selecting);
    }
    
    @.java.lang.Override
    public final boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$Empty$this.defines(index);
    }
    
    @.java.lang.Override
    public final <Result>.ceylon.language.Iterable<? extends Result, ?> map(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Empty$this.map(collecting);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Empty$this.filter(selecting);
    }
    
    @.java.lang.Override
    public final <Result>Result fold(final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Empty$this.fold(initial, accumulating);
    }
    
    @.java.lang.Override
    public final .java.lang.Object find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Empty$this.find(selecting);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Empty$this.sort(comparing);
    }
    
    @.java.lang.Override
    public final <Result>.ceylon.language.Sequential<? extends Result> collect(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Empty$this.collect(collecting);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Empty$this.select(selecting);
    }
    
    @.java.lang.Override
    public final boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Empty$this.any(selecting);
    }
    
    @.java.lang.Override
    public final boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Empty$this.every(selecting);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty skipping(final long skip) {
        return $ceylon$language$Empty$this.skipping(skip);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty taking(final long take) {
        return $ceylon$language$Empty$this.taking(take);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Empty by(final long step) {
        return $ceylon$language$Empty$this.by(step);
    }
    
    @.java.lang.Override
    public final <Element>.ceylon.language.Sequence<? extends Element> withLeading(final Element element) {
        return $ceylon$language$Empty$this.withLeading(element);
    }
    
    @.java.lang.Override
    public final <Element>.ceylon.language.Sequence<? extends Element> withTrailing(final Element element) {
        return $ceylon$language$Empty$this.withTrailing(element);
    }
    protected final .ceylon.language.Sequential$impl<.java.lang.Object> $ceylon$language$Sequential$this;
    protected final .ceylon.language.List$impl<.java.lang.Object> $ceylon$language$List$this;
    
    @.java.lang.Override
    public boolean equals(final .java.lang.Object that) {
        return $ceylon$language$List$this.equals(that);
    }
    
    @.java.lang.Override
    public int hashCode() {
        return $ceylon$language$List$this.hashCode();
    }
    
    @.java.lang.Override
    public .java.lang.Object findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this.findLast(selecting);
    }
    protected final .ceylon.language.Collection$impl<.java.lang.Object> $ceylon$language$Collection$this;
    protected final .ceylon.language.Iterable$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable<?, ?> getRest() {
        return $ceylon$language$Iterable$this.getRest();
    }
    
    @.java.lang.Override
    public <Grouping>.ceylon.language.Map<? extends Grouping, ? extends .ceylon.language.Sequence<?>> group(final .ceylon.language.Callable<? extends Grouping> grouping) {
        return $ceylon$language$Iterable$this.group(grouping);
    }
    protected final .ceylon.language.Container$impl<.java.lang.Object, .java.lang.Object> $ceylon$language$Container$this;
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .java.lang.Object> containsEvery$elements() {
        return $ceylon$language$Category$this.containsEvery$elements();
    }
    
    @.java.lang.Override
    public final boolean containsEvery() {
        return $ceylon$language$Category$this.containsEvery();
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Sequential<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .java.lang.Object> containsAny$elements() {
        return $ceylon$language$Category$this.containsAny$elements();
    }
    
    @.java.lang.Override
    public final boolean containsAny() {
        return $ceylon$language$Category$this.containsAny();
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Sequential<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    protected final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<?>> $ceylon$language$Cloneable$this;
    protected final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, .java.lang.Object> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    public .ceylon.language.Correspondence$impl<? super .ceylon.language.Integer, ?> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Correspondence$impl<? super .ceylon.language.Integer, ?>.Items Items$new(final .ceylon.language.Sequence<? extends .ceylon.language.Integer> arg0) {
        return $ceylon$language$Correspondence$this.Items$new(arg0);
    }
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this.getKeys();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> definesEvery$keys() {
        return $ceylon$language$Correspondence$this.definesEvery$keys();
    }
    
    @.java.lang.Override
    public final boolean definesEvery() {
        return $ceylon$language$Correspondence$this.definesEvery();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> definesAny$keys() {
        return $ceylon$language$Correspondence$this.definesAny$keys();
    }
    
    @.java.lang.Override
    public final boolean definesAny() {
        return $ceylon$language$Correspondence$this.definesAny();
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> items$keys() {
        return $ceylon$language$Correspondence$this.items$keys();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<?> items() {
        return $ceylon$language$Correspondence$this.items();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<?> items(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    protected final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<?>> $ceylon$language$Ranged$this;
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.EmptyImpl();
    }
}