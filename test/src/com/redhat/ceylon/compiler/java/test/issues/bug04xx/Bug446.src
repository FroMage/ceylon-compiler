package com.redhat.ceylon.compiler.java.test.issues.bug04xx;

abstract class Bug446<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.List<T> {
    
    Bug446(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        this.$reified$T = $reified$T;
        this.$ceylon$language$List$this$ = new .ceylon.language.List$impl<T>($reified$T, this);
        this.$ceylon$language$Collection$this$ = new .ceylon.language.Collection$impl<T>($reified$T, this);
        this.$ceylon$language$Iterable$this$ = new .ceylon.language.Iterable$impl<T, .java.lang.Object>($reified$T, .ceylon.language.Null.$TypeDescriptor$, this);
        this.$ceylon$language$Category$this$ = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this$ = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.List.class, $reified$T), (.ceylon.language.Cloneable<.ceylon.language.Collection<? extends T>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this$ = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T>(.ceylon.language.Integer.$TypeDescriptor$, $reified$T, this);
        this.$ceylon$language$Ranged$this$ = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.List.class, $reified$T), this);
        this.string = ((.ceylon.language.String).ceylon.language.nothing_.get_()).toString();
        this.hash = 1L;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    protected final .ceylon.language.List$impl<? extends T> $ceylon$language$List$this$;
    
    @.java.lang.Override
    public .ceylon.language.List$impl<? extends T> $ceylon$language$List$impl() {
        return $ceylon$language$List$this$;
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$List$this$.getSize();
    }
    
    @.java.lang.Override
    public boolean shorterThan(final long length) {
        return $ceylon$language$List$this$.shorterThan(length);
    }
    
    @.java.lang.Override
    public boolean longerThan(final long length) {
        return $ceylon$language$List$this$.longerThan(length);
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this$.defines(index);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterator<? extends T> iterator() {
        return $ceylon$language$List$this$.iterator();
    }
    
    @.java.lang.Override
    public T findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.findLast(selecting);
    }
    
    @.java.lang.Override
    public T getFirst() {
        return $ceylon$language$List$this$.getFirst();
    }
    
    @.java.lang.Override
    public T getLast() {
        return $ceylon$language$List$this$.getLast();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withLeading(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return (.ceylon.language.Sequence)$ceylon$language$List$this$.withLeading($reified$Other, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withTrailing(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return (.ceylon.language.Sequence)$ceylon$language$List$this$.withTrailing($reified$Other, element);
    }
    
    @.java.lang.Override
    public boolean startsWith(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.startsWith(sublist);
    }
    
    @.java.lang.Override
    public boolean endsWith(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.endsWith(sublist);
    }
    
    @.java.lang.Override
    public boolean includesAt(final long index, final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.includesAt(index, sublist);
    }
    
    @.java.lang.Override
    public boolean includes(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.includes(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> inclusions(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.inclusions(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstInclusion(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.firstInclusion(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastInclusion(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.lastInclusion(sublist);
    }
    
    @.java.lang.Override
    public boolean occursAt(final long index, final .java.lang.Object element) {
        return $ceylon$language$List$this$.occursAt(index, element);
    }
    
    @.java.lang.Override
    public boolean occurs(final .java.lang.Object element) {
        return $ceylon$language$List$this$.occurs(element);
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$List$this$.contains(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> occurrences(final .java.lang.Object element) {
        return $ceylon$language$List$this$.occurrences(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstOccurrence(final .java.lang.Object element) {
        return $ceylon$language$List$this$.firstOccurrence(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastOccurrence(final .java.lang.Object element) {
        return $ceylon$language$List$this$.lastOccurrence(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> indexes(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.indexes(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends T> trim(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$List$this$.trim(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends T> trimLeading(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$List$this$.trimLeading(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends T> trimTrailing(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$List$this$.trimTrailing(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends T> initial(final long length) {
        return $ceylon$language$List$this$.initial(length);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends T> terminal(final long length) {
        return $ceylon$language$List$this$.terminal(length);
    }
    protected final .ceylon.language.Collection$impl<? extends T> $ceylon$language$Collection$this$;
    
    @.java.lang.Override
    public .ceylon.language.Collection$impl<? extends T> $ceylon$language$Collection$impl() {
        return $ceylon$language$Collection$this$;
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Collection$this$.getEmpty();
    }
    protected final .ceylon.language.Iterable$impl<? extends T, ? extends .java.lang.Object> $ceylon$language$Iterable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<? extends T, ? extends .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this$;
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends T> getSequence() {
        return $ceylon$language$Iterable$this$.getSequence();
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.map($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this$.fold($reified$Result, initial, accumulating);
    }
    
    @.java.lang.Override
    public T find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.find(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends T> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this$.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.collect($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends T> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> skipping(final long skip) {
        return $ceylon$language$Iterable$this$.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> taking(final long take) {
        return $ceylon$language$Iterable$this$.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> skippingWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> skip) {
        return $ceylon$language$Iterable$this$.skippingWhile(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> takingWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> take) {
        return $ceylon$language$Iterable$this$.takingWhile(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this$.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this$.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends T>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this$.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> following(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other head) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.following($reified$Other, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent> chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.chain($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Default, final Default defaultValue) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.defaultNullElements($reified$Default, defaultValue);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> getCycled() {
        return $ceylon$language$Iterable$this$.getCycled();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> cycle(final long times) {
        return $ceylon$language$Iterable$this$.cycle(times);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends T> repeat(final long times) {
        return $ceylon$language$Iterable$this$.repeat(times);
    }
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this$;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this$;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsAny(elements);
    }
    protected final .ceylon.language.Cloneable$impl<? extends .ceylon.language.Collection<? extends T>> $ceylon$language$Cloneable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Cloneable$impl<? extends .ceylon.language.Collection<? extends T>> $ceylon$language$Cloneable$impl() {
        return $ceylon$language$Cloneable$this$;
    }
    protected final .ceylon.language.Correspondence$impl<? super .ceylon.language.Integer, ? extends T> $ceylon$language$Correspondence$this$;
    
    @.java.lang.Override
    public .ceylon.language.Correspondence$impl<? super .ceylon.language.Integer, ? extends T> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this$;
    }
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this$.getKeys();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this$.definesEvery(keys);
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this$.definesAny(keys);
    }
    protected final .ceylon.language.Ranged$impl<? super .ceylon.language.Integer, ? extends .ceylon.language.List<? extends T>> $ceylon$language$Ranged$this$;
    
    @.java.lang.Override
    public .ceylon.language.Ranged$impl<? super .ceylon.language.Integer, ? extends .ceylon.language.List<? extends T>> $ceylon$language$Ranged$impl() {
        return $ceylon$language$Ranged$this$;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends T> items(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return (.ceylon.language.Sequential).ceylon.language.nothing_.get_();
    }
    private final .java.lang.String string;
    
    @.java.lang.Override
    public final .java.lang.String toString() {
        return string;
    }
    private final long hash;
    
    @.java.lang.Override
    public final int hashCode() {
        return (int)(
            let
            {
                long $ceylontmp$hash$0 = hash;
            }
            returning $ceylontmp$hash$0 ^ $ceylontmp$hash$0 >>> 32;
        );
    }
    
    @.java.lang.Override
    public final boolean equals(final .java.lang.Object that) {
        return ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug446.class, $reified$T);
    }
}