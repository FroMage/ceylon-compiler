package com.redhat.ceylon.compiler.java.test.structure.klass;

class RWInvParam<T> {
    
    RWInvParam() {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.klass.RWInvParam();
    }
}
class RWInvParamExt<T> extends .com.redhat.ceylon.compiler.java.test.structure.klass.RWInvParam<T> {
    
    RWInvParamExt() {
        super();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.klass.RWInvParamExt();
    }
}
class RWCovParam<T> {
    
    RWCovParam() {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.klass.RWCovParam();
    }
}
class RWCovParamExt<T> extends .com.redhat.ceylon.compiler.java.test.structure.klass.RWCovParam<T> {
    
    RWCovParamExt() {
        super();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.klass.RWCovParamExt();
    }
}
class RWContrParam<T> {
    
    RWContrParam() {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.klass.RWContrParam();
    }
}
class RWContrParamExt<T> extends .com.redhat.ceylon.compiler.java.test.structure.klass.RWContrParam<T> {
    
    RWContrParamExt() {
        super();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.klass.RWContrParamExt();
    }
}
interface RWTopI {
    
    public .com.redhat.ceylon.compiler.java.test.structure.klass.RWTopI$impl $com$redhat$ceylon$compiler$java$test$structure$klass$RWTopI$impl();
}
final class RWTopI$impl {
    
    RWTopI$impl(.com.redhat.ceylon.compiler.java.test.structure.klass.RWTopI $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.structure.klass.RWTopI $this;
}
interface RWLeft extends .com.redhat.ceylon.compiler.java.test.structure.klass.RWTopI {
    
    public .com.redhat.ceylon.compiler.java.test.structure.klass.RWLeft$impl $com$redhat$ceylon$compiler$java$test$structure$klass$RWLeft$impl();
}
final class RWLeft$impl {
    
    RWLeft$impl(.com.redhat.ceylon.compiler.java.test.structure.klass.RWLeft $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.structure.klass.RWLeft $this;
}
interface RWRight extends .com.redhat.ceylon.compiler.java.test.structure.klass.RWTopI {
    
    public .com.redhat.ceylon.compiler.java.test.structure.klass.RWRight$impl $com$redhat$ceylon$compiler$java$test$structure$klass$RWRight$impl();
}
final class RWRight$impl {
    
    RWRight$impl(.com.redhat.ceylon.compiler.java.test.structure.klass.RWRight $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.structure.klass.RWRight $this;
}
abstract class RWTop<X, Y> {
    
    RWTop() {
    }
    
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWInvParam<.ceylon.language.Number> m();
    
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWCovParam<? extends .ceylon.language.Number> m2();
    
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWCovParam<? extends .ceylon.language.Number> m2_erasure();
    
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWContrParam<? super .ceylon.language.Integer> m3();
    
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWContrParam<? super .ceylon.language.Integer> m3_erasure();
    
    public abstract <T>T tParam();
    
    public abstract <T extends .ceylon.language.Number>T tBoundParam();
    
    public abstract <T extends .ceylon.language.Integer>T tCovBoundParam();
    
    public abstract X typeBound();
    
    public abstract X typeCovBound();
    
    public abstract Y classBound();
    
    public abstract Y classBound_erasure();
}
abstract class RWBottom<Z> extends .com.redhat.ceylon.compiler.java.test.structure.klass.RWTop<.ceylon.language.Number, Z> {
    
    RWBottom() {
        super();
    }
    
    @.java.lang.Override
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWInvParamExt<.ceylon.language.Number> m();
    
    @.java.lang.Override
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWCovParamExt<? extends .ceylon.language.Integer> m2();
    
    @.java.lang.Override
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWCovParam<? extends .ceylon.language.Number> m2_erasure();
    
    @.java.lang.Override
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWContrParamExt<? super .ceylon.language.Number> m3();
    
    @.java.lang.Override
    public abstract .com.redhat.ceylon.compiler.java.test.structure.klass.RWContrParam<? super .ceylon.language.Integer> m3_erasure();
    
    @.java.lang.Override
    public abstract <S>S tParam();
    
    @.java.lang.Override
    public abstract <S extends .ceylon.language.Number>S tBoundParam();
    
    @.java.lang.Override
    public abstract <S extends .ceylon.language.Integer>S tCovBoundParam();
    
    @.java.lang.Override
    public abstract .ceylon.language.Number typeBound();
    
    @.java.lang.Override
    public abstract .ceylon.language.Integer typeCovBound();
    
    @.java.lang.Override
    public abstract Z classBound();
    
    @.java.lang.Override
    public abstract Z classBound_erasure();
}