package com.redhat.ceylon.compiler.java.test.interop;

final class testFiles_ {
    
    private testFiles_() {
    }
    
    static void testFiles() {
        final .java.io.File f = new .java.io.File(".");
        final .java.io.File[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(f.listFiles());
        final .java.io.File f2 = items[(int)0L];
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.testFiles_.testFiles();
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class booleanArray_ {
    
    private booleanArray_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("java.lang::BooleanArray")
    static boolean[] booleanArray(@.com.redhat.ceylon.compiler.java.metadata.Name("values")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Iterable<ceylon.language::Boolean,ceylon.language::Null>")
    final .ceylon.language.Iterable<? extends .ceylon.language.Boolean, ? extends .java.lang.Object> values) {
        final boolean[] ret = new boolean[(int)values.getSize()];
        long idx = 0L;
        final .ceylon.language.Iterable<? extends .ceylon.language.Boolean, ? extends .java.lang.Object> iterable$2 = values;
        final boolean isArray$3 = iterable$2 instanceof .ceylon.language.Array;
        final boolean isArraySequence$4 = iterable$2 instanceof .ceylon.language.ArraySequence;
        .java.lang.Object elem$0 = null;
        final .java.lang.Object array$5;
        int i$6 = 0;
        final int length$7;
        if (isArraySequence$4) {
            array$5 = ((.ceylon.language.ArraySequence)iterable$2).$getArray$();
            i$6 = ((.ceylon.language.ArraySequence)iterable$2).$getFirst$();
            length$7 = i$6 + ((.ceylon.language.ArraySequence)iterable$2).$getLength$();
        } else if (isArray$3) {
            array$5 = ((.ceylon.language.Array)iterable$2).toArray();
            length$7 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$5);
        } else {
            array$5 = null;
            length$7 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Boolean> val$iterator$$1 = isArraySequence$4 || isArray$3 ? null : iterable$2.iterator();
        loop_0: while (isArraySequence$4 || isArray$3 ? i$6 < length$7 : !((elem$0 = val$iterator$$1.next()) instanceof .ceylon.language.Finished)) {
            if (isArraySequence$4 || isArray$3) elem$0 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$5, i$6++);
            final boolean val = ((.ceylon.language.Boolean)elem$0).booleanValue();
            ret[(int)idx++] = val;
        }
        return ret;
    }
}
final class test_booleans_ {
    
    private test_booleans_() {
    }
    
    static void test_booleans() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final boolean[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_booleans());
        final .ceylon.language.Boolean b = .ceylon.language.Boolean.instance(items[(int)0L]);
        .ceylon.language.Boolean b$9;
        if ((b$9 = b) != null) {
            final boolean b$10 = b$9.booleanValue();
            items[(int)1L] = b$10;
        }
        final .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object> it = .ceylon.language.String.instance("foo");
        java.take_booleans(items);
        java.take_booleans(.com.redhat.ceylon.compiler.java.test.interop.booleanArray_.booleanArray(new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Boolean>>>>(.ceylon.language.Boolean.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                .ceylon.language.Boolean.instance(true),
                .ceylon.language.Boolean.instance(false)})));
        java.take_booleans((
            let
            {
                .ceylon.language.Iterable arg$11$0 = (.ceylon.language.Iterable).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.test.interop.booleanArray_.booleanArray(arg$11$0);
        ));
        (
            let
            {
                int arg$12$0 = (int)2L;
            }
            returning new boolean[arg$12$0];
        );
        new boolean[(int)2L];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<boolean[]>(.com.redhat.ceylon.compiler.java.language.BooleanArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Boolean.$TypeDescriptor$), .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), "BooleanArray(Integer, Boolean=)", (short)-1){
            
            @.java.lang.Override
            public boolean[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                return new boolean[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public boolean[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                final boolean $ceylontmp$element = ((.ceylon.language.Boolean)$param$1).booleanValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new boolean[$ceylontmp$size], $ceylontmp$element);
            }
        };
        final long i = items.length;
        final .ceylon.language.Array<.ceylon.language.Boolean> arr1 = .com.redhat.ceylon.compiler.java.language.BooleanArray.getBooleanArray(items);
        final .ceylon.language.Array<.java.lang.Boolean> arr2 = .com.redhat.ceylon.compiler.java.language.BooleanArray.getArray(items);
        .com.redhat.ceylon.compiler.java.language.BooleanArray.copyTo(items, items);
        .com.redhat.ceylon.compiler.java.language.BooleanArray.copyTo(items, items, (int)0L, (int)0L, items.length);
        (
            let
            {
                boolean[] arg$13$callable$ = items;
                boolean[] arg$13$argthis$ = arg$13$callable$;
                boolean[] arg$13$0 = items;
                int arg$13$1 = 0;
                int arg$13$2 = 0;
                int arg$13$3 = arg$13$argthis$.length;
                .com.redhat.ceylon.compiler.java.language.BooleanArray.copyTo(arg$13$callable$, arg$13$0, arg$13$1, arg$13$2, arg$13$3);
            }
            returning null;
        );
        (
            let
            {
                boolean[] arg$14$callable$ = items;
                boolean[] arg$14$argthis$ = arg$14$callable$;
                boolean[] arg$14$0 = items;
                int arg$14$1 = (int)0L;
                int arg$14$2 = (int)0L;
                int arg$14$3 = arg$14$argthis$.length;
                .com.redhat.ceylon.compiler.java.language.BooleanArray.copyTo(arg$14$callable$, arg$14$0, arg$14$1, arg$14$2, arg$14$3);
            }
            returning null;
        );
        final boolean[][] matrix = new boolean[(int)10L][];
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$17 = .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>spreadOp(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), matrix.length);
        final boolean isArraySequence$18 = iterable$17 instanceof .ceylon.language.ArraySequence;
        .java.lang.Object elem$15 = null;
        final .java.lang.Object array$19;
        int i$20 = 0;
        final int length$21;
        if (isArraySequence$18) {
            array$19 = ((.ceylon.language.ArraySequence)iterable$17).$getArray$();
            i$20 = ((.ceylon.language.ArraySequence)iterable$17).$getFirst$();
            length$21 = i$20 + ((.ceylon.language.ArraySequence)iterable$17).$getLength$();
        } else {
            array$19 = null;
            length$21 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> x$iterator$$16 = isArraySequence$18 ? null : iterable$17.iterator();
        loop_1: while (isArraySequence$18 ? i$20 < length$21 : !((elem$15 = x$iterator$$16.next()) instanceof .ceylon.language.Finished)) {
            if (isArraySequence$18) elem$15 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$19, i$20++);
            final long x = ((.ceylon.language.Integer)elem$15).longValue();
            matrix[(int)x] = new boolean[(int)2L];
        }
        final .ceylon.language.Array<boolean[]> boolArray = .com.redhat.ceylon.compiler.java.language.ObjectArray<boolean[]>.getArray(matrix);
        final .java.lang.Object o = items;
        .java.lang.Object o$23;
        if ((o$23 = o) instanceof boolean[]) {
            final boolean[] o$24 = (boolean[])o$23;
        }
        .java.lang.Object o$26;
        if ((o$26 = o) instanceof boolean[][]) {
            final boolean[][] o$27 = (boolean[][])o$26;
        }
        .java.lang.Object o$29;
        if ((o$29 = o) instanceof .ceylon.language.Boolean[][]) {
            final .ceylon.language.Boolean[][] o$30 = (.ceylon.language.Boolean[][])o$29;
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_booleans_.test_booleans();
    }
}
final class test_JBooleans_ {
    
    private test_JBooleans_() {
    }
    
    static void test_JBooleans() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Boolean[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Booleans());
        final .java.lang.Boolean b = items[(int)0L];
        .java.lang.Boolean b$32;
        if ((b$32 = b) != null) {
            final .java.lang.Boolean b$33 = b$32;
            items[(int)1L] = b$33;
        }
        java.take_Booleans(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_JBooleans_.test_JBooleans();
    }
}
final class test_bytes_ {
    
    private test_bytes_() {
    }
    
    static void test_bytes() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final byte[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_bytes());
        final .ceylon.language.Integer n = .ceylon.language.Integer.instance(items[(int)0L]);
        .ceylon.language.Integer n$35;
        if ((n$35 = n) != null) {
            final long n$36 = n$35.longValue();
            items[(int)1L] = (byte)n$36;
        }
        java.take_bytes(items);
        new byte[(int)2L];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<byte[]>(.com.redhat.ceylon.compiler.java.language.ByteArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), "ByteArray(Integer, Integer=)", (short)-1){
            
            @.java.lang.Override
            public byte[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                return new byte[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public byte[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                final byte $ceylontmp$element = (byte)((.ceylon.language.Integer)$param$1).longValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new byte[$ceylontmp$size], $ceylontmp$element);
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_bytes_.test_bytes();
    }
}
final class test_JBytes_ {
    
    private test_JBytes_() {
    }
    
    static void test_JBytes() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Byte[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Bytes());
        final .java.lang.Byte n = items[(int)0L];
        .java.lang.Byte n$38;
        if ((n$38 = n) != null) {
            final .java.lang.Byte n$39 = n$38;
            items[(int)1L] = n$39;
        }
        java.take_Bytes(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_JBytes_.test_JBytes();
    }
}
final class test_shorts_ {
    
    private test_shorts_() {
    }
    
    static void test_shorts() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final short[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_shorts());
        final .ceylon.language.Integer n = .ceylon.language.Integer.instance(items[(int)0L]);
        .ceylon.language.Integer n$41;
        if ((n$41 = n) != null) {
            final long n$42 = n$41.longValue();
            items[(int)1L] = (short)n$42;
        }
        java.take_shorts(items);
        new short[(int)2L];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<short[]>(.com.redhat.ceylon.compiler.java.language.ShortArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), "ShortArray(Integer, Integer=)", (short)-1){
            
            @.java.lang.Override
            public short[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                return new short[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public short[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                final short $ceylontmp$element = (short)((.ceylon.language.Integer)$param$1).longValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new short[$ceylontmp$size], $ceylontmp$element);
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_shorts_.test_shorts();
    }
}
final class test_JShorts_ {
    
    private test_JShorts_() {
    }
    
    static void test_JShorts() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Short[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Shorts());
        final .java.lang.Short n = items[(int)0L];
        .java.lang.Short n$44;
        if ((n$44 = n) != null) {
            final .java.lang.Short n$45 = n$44;
            items[(int)1L] = n$45;
        }
        java.take_Shorts(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_JShorts_.test_JShorts();
    }
}
final class test_ints_ {
    
    private test_ints_() {
    }
    
    static void test_ints() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final int[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_ints());
        final .ceylon.language.Integer n = .ceylon.language.Integer.instance(items[(int)0L]);
        .ceylon.language.Integer n$47;
        if ((n$47 = n) != null) {
            final long n$48 = n$47.longValue();
            items[(int)1L] = (int)n$48;
        }
        java.take_ints(items);
        new int[(int)2L];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<int[]>(.com.redhat.ceylon.compiler.java.language.IntArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), "IntArray(Integer, Integer=)", (short)-1){
            
            @.java.lang.Override
            public int[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                return new int[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public int[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                final int $ceylontmp$element = (int)((.ceylon.language.Integer)$param$1).longValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new int[$ceylontmp$size], $ceylontmp$element);
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_ints_.test_ints();
    }
}
final class test_JIntegers_ {
    
    private test_JIntegers_() {
    }
    
    static void test_JIntegers() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Integer[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Integers());
        final .java.lang.Integer n = items[(int)0L];
        .java.lang.Integer n$50;
        if ((n$50 = n) != null) {
            final .java.lang.Integer n$51 = n$50;
            items[(int)1L] = n$51;
        }
        java.take_Integers(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_JIntegers_.test_JIntegers();
    }
}
final class test_longs_ {
    
    private test_longs_() {
    }
    
    static void test_longs() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final long[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_longs());
        final .ceylon.language.Integer n = .ceylon.language.Integer.instance(items[(int)0L]);
        .ceylon.language.Integer n$53;
        if ((n$53 = n) != null) {
            final long n$54 = n$53.longValue();
            items[(int)1L] = n$54;
        }
        java.take_longs(items);
        new long[(int)2L];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<long[]>(.com.redhat.ceylon.compiler.java.language.LongArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), "LongArray(Integer, Integer=)", (short)-1){
            
            @.java.lang.Override
            public long[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                return new long[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public long[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                final long $ceylontmp$element = ((.ceylon.language.Integer)$param$1).longValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new long[$ceylontmp$size], $ceylontmp$element);
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_longs_.test_longs();
    }
}
final class test_JLongs_ {
    
    private test_JLongs_() {
    }
    
    static void test_JLongs() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Long[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Longs());
        final .java.lang.Long n = items[(int)0L];
        .java.lang.Long n$56;
        if ((n$56 = n) != null) {
            final .java.lang.Long n$57 = n$56;
            items[(int)1L] = n$57;
        }
        java.take_Longs(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_JLongs_.test_JLongs();
    }
}
final class test_floats_ {
    
    private test_floats_() {
    }
    
    static void test_floats() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final float[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_floats());
        final .ceylon.language.Float f = .ceylon.language.Float.instance(items[(int)0L]);
        .ceylon.language.Float f$59;
        if ((f$59 = f) != null) {
            final double f$60 = f$59.doubleValue();
            items[(int)1L] = (float)f$60;
        }
        java.take_floats(items);
        new float[(int)2L];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<float[]>(.com.redhat.ceylon.compiler.java.language.FloatArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), "FloatArray(Integer, Float=)", (short)-1){
            
            @.java.lang.Override
            public float[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                return new float[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public float[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                final float $ceylontmp$element = (float)((.ceylon.language.Float)$param$1).doubleValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new float[$ceylontmp$size], $ceylontmp$element);
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_floats_.test_floats();
    }
}
final class test_JFloats_ {
    
    private test_JFloats_() {
    }
    
    static void test_JFloats() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Float[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Floats());
        final .java.lang.Float f = items[(int)0L];
        .java.lang.Float f$62;
        if ((f$62 = f) != null) {
            final .java.lang.Float f$63 = f$62;
            items[(int)1L] = f$63;
        }
        java.take_Floats(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_JFloats_.test_JFloats();
    }
}
final class test_doubles_ {
    
    private test_doubles_() {
    }
    
    static void test_doubles() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final double[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_doubles());
        final .ceylon.language.Float f = .ceylon.language.Float.instance(items[(int)0L]);
        .ceylon.language.Float f$65;
        if ((f$65 = f) != null) {
            final double f$66 = f$65.doubleValue();
            items[(int)1L] = f$66;
        }
        java.take_doubles(items);
        new double[(int)2L];
        final .ceylon.language.Callable<? extends .java.lang.Object> ctorRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<double[]>(.com.redhat.ceylon.compiler.java.language.DoubleArray.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), "DoubleArray(Integer, Float=)", (short)-1){
            
            @.java.lang.Override
            public double[] $call$(final .java.lang.Object $param$0) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                return new double[$ceylontmp$size];
            }
            
            @.java.lang.Override
            public double[] $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final int $ceylontmp$size = (int)((.ceylon.language.Integer)$param$0).longValue();
                final double $ceylontmp$element = ((.ceylon.language.Float)$param$1).doubleValue();
                return .com.redhat.ceylon.compiler.java.Util.fillArray(new double[$ceylontmp$size], $ceylontmp$element);
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_doubles_.test_doubles();
    }
}
final class test_JDoubles_ {
    
    private test_JDoubles_() {
    }
    
    static void test_JDoubles() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Double[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Doubles());
        final .java.lang.Double f = items[(int)0L];
        .java.lang.Double f$68;
        if ((f$68 = f) != null) {
            final .java.lang.Double f$69 = f$68;
            items[(int)1L] = f$69;
        }
        java.take_Doubles(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_JDoubles_.test_JDoubles();
    }
}
final class test_chars_ {
    
    private test_chars_() {
    }
    
    static void test_chars() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final char[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_chars());
        final .ceylon.language.Character c = .ceylon.language.Character.instance(items[(int)0L]);
        .ceylon.language.Character c$71;
        if ((c$71 = c) != null) {
            final int c$72 = c$71.intValue();
            items[(int)1L] = (char)c$72;
        }
        java.take_chars(items);
        final int[] ints = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_ints());
        final .ceylon.language.Array<.java.lang.Integer> chars1 = .com.redhat.ceylon.compiler.java.language.IntArray.getArray(ints);
        final .ceylon.language.Array<.ceylon.language.Character> chars2 = .com.redhat.ceylon.compiler.java.language.IntArray.getCodePointArray(ints);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_chars_.test_chars();
    }
}
final class test_JCharacters_ {
    
    private test_JCharacters_() {
    }
    
    static void test_JCharacters() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Character[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Characters());
        final .java.lang.Character c = items[(int)0L];
        .java.lang.Character c$74;
        if ((c$74 = c) != null) {
            final .java.lang.Character c$75 = c$74;
            items[(int)1L] = c$75;
        }
        java.take_Characters(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_JCharacters_.test_JCharacters();
    }
}
final class test_Strings_ {
    
    private test_Strings_() {
    }
    
    static void test_Strings() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.String[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Strings());
        final .java.lang.String s = items[(int)0L];
        .java.lang.String s$77;
        if ((s$77 = s) != null) {
            final .java.lang.String s$78 = s$77;
            items[(int)1L] = s$78;
        }
        java.take_Strings(items);
        final .ceylon.language.String[] ceylonStrings = new .ceylon.language.String[(int)0L];
        final .ceylon.language.Array<.ceylon.language.String> ceylonStringArray = .com.redhat.ceylon.compiler.java.language.ObjectArray<.ceylon.language.String>.getArray(ceylonStrings);
        final .ceylon.language.Array<.java.lang.String> javaStringArray = .com.redhat.ceylon.compiler.java.language.ObjectArray<.java.lang.String>.getArray(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_Strings_.test_Strings();
    }
}
final class test_Objects_ {
    
    private test_Objects_() {
    }
    
    static void test_Objects() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .java.lang.Object[] items = .com.redhat.ceylon.compiler.java.Util.checkNull(java.return_Objects());
        final .java.lang.Object o = items[(int)0L];
        final .java.lang.Object o2 = .com.redhat.ceylon.compiler.java.Util.checkNull(items[(int)0L]);
        .java.lang.Object o$80;
        if ((o$80 = o) != null) {
            final .java.lang.Object o$81 = o$80;
            items[(int)1L] = o$81;
            items[(int)1L] = null;
        }
        java.take_Objects(items);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.test_Objects_.test_Objects();
    }
}