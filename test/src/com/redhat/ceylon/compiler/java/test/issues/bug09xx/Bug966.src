package com.redhat.ceylon.compiler.java.test.issues.bug09xx;

public abstract class Bug966<Element extends .ceylon.language.Ordinal<? extends Element> & .ceylon.language.Comparable<? super Element>> extends .java.lang.Object implements .ceylon.language.Sequence<Element>, .ceylon.language.Category {
    
    public Bug966(Element first, Element last) {
        super();
        this.first = first;
        this.last = last;
        this.$ceylon$language$Sequence$this = new .ceylon.language.Sequence$impl<Element>(this);
        this.$ceylon$language$Sequential$this = new .ceylon.language.Sequential$impl<Element>(this);
        this.$ceylon$language$List$this = new .ceylon.language.List$impl<Element>(this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<Element>(this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<Element, .java.lang.Object>((.ceylon.language.Iterable<Element, .java.lang.Object>)(.ceylon.language.Iterable)this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<Element, .java.lang.Object>((.ceylon.language.Container<Element, .java.lang.Object>)(.ceylon.language.Container)this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends Element>>((.ceylon.language.Cloneable<.ceylon.language.Collection<? extends Element>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, Element>(this);
        this.$ceylon$language$Ranged$this = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends Element>>((.ceylon.language.Ranged<.ceylon.language.Integer, .ceylon.language.List<? extends Element>>)(.ceylon.language.Ranged)this);
    }
    protected final .ceylon.language.Sequence$impl<Element> $ceylon$language$Sequence$this;
    
    @.java.lang.Override
    public final boolean getEmpty() {
        return $ceylon$language$Sequence$this.getEmpty();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends Element> getSequence() {
        return $ceylon$language$Sequence$this.getSequence();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends Element> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Sequence$this.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequence<? extends Result> collect(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Sequence$this.collect(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends Element> getClone() {
        return $ceylon$language$Sequence$this.getClone();
    }
    protected final .ceylon.language.Sequential$impl<Element> $ceylon$language$Sequential$this;
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return $ceylon$language$Sequential$this.toString();
    }
    protected final .ceylon.language.List$impl<Element> $ceylon$language$List$this;
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this.defines(index);
    }
    
    @.java.lang.Override
    public boolean equals(final .java.lang.Object that) {
        return $ceylon$language$List$this.equals(that);
    }
    
    @.java.lang.Override
    public int hashCode() {
        return $ceylon$language$List$this.hashCode();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withLeading(final Other element) {
        return $ceylon$language$List$this.withLeading(element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withTrailing(final Other element) {
        return $ceylon$language$List$this.withTrailing(element);
    }
    protected final .ceylon.language.Collection$impl<Element> $ceylon$language$Collection$this;
    protected final .ceylon.language.Iterable$impl<Element, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Iterable$this.contains(element);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ?> map(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ?> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold(initial, accumulating);
    }
    
    @.java.lang.Override
    public Element find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public Element findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ?> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ?> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ?> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ?> getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ?> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ?> chain(final .ceylon.language.Iterable<? extends Other, ?> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ?>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.chain(other);
    }
    protected final .ceylon.language.Container$impl<Element, .java.lang.Object> $ceylon$language$Container$this;
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    protected final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends Element>> $ceylon$language$Cloneable$this;
    protected final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, Element> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this.getKeys();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ?> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ?> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> items(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ?> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    protected final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends Element>> $ceylon$language$Ranged$this;
    private final Element first;
    
    @.java.lang.Override
    public final Element getFirst() {
        return first;
    }
    private final Element last;
    
    @.java.lang.Override
    public final Element getLast() {
        return last;
    }
    
    @.java.lang.Override
    public final long getSize() {
        if (getLast() instanceof .ceylon.language.Enumerable) {
            if (getFirst() instanceof .ceylon.language.Enumerable) {
                return .ceylon.language.Integer.getMagnitude(((.ceylon.language.Enumerable<? extends .java.lang.Object>)(.ceylon.language.Enumerable)last).getIntegerValue() - ((.ceylon.language.Enumerable<? extends .java.lang.Object>)(.ceylon.language.Enumerable)first).getIntegerValue()) + 1L;
            }
        }
        return ((.ceylon.language.Integer).ceylon.language.nothing_.getNothing$()).longValue();
    }
}
