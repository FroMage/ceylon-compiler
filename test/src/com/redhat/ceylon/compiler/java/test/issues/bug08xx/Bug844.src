package com.redhat.ceylon.compiler.java.test.issues.bug08xx;

public class Bug844_Top<Element> {
    
    public Bug844_Top() {
        this.firstAttribute = (Element).ceylon.language.bottom_.getBottom$();
    }
    
    public Element first() {
        return (Element).ceylon.language.bottom_.getBottom$();
    }
    private final Element firstAttribute;
    
    public Element getFirstAttribute() {
        return firstAttribute;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.issues.bug08xx.Bug844_Top();
    }
}
public class Bug844_Bottom<Element, First extends Element> extends .com.redhat.ceylon.compiler.java.test.issues.bug08xx.Bug844_Top<Element> {
    
    public Bug844_Bottom(First firstAttribute) {
        super();
        this.firstAttribute = firstAttribute;
    }
    
    @.java.lang.Override
    public final First first() {
        return (First).ceylon.language.bottom_.getBottom$();
    }
    private final First firstAttribute;
    
    @.java.lang.Override
    public final First getFirstAttribute() {
        return firstAttribute;
    }
}
public abstract class Bug844_Tuple<Element, First extends Element, Rest> extends .java.lang.Object implements .ceylon.language.Sequence<Element> {
    
    public Bug844_Tuple(First first, .ceylon.language.Sequential<? extends Element> rest) {
        super();
        this.first = first;
        this.rest = rest;
        this.$ceylon$language$Sequence$this = new .ceylon.language.Sequence$impl<Element>(this);
        this.$ceylon$language$Sequential$this = new .ceylon.language.Sequential$impl<Element>(this);
        this.$ceylon$language$List$this = new .ceylon.language.List$impl<Element>(this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<Element>(this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<Element>(this);
        this.$ceylon$language$ContainerWithFirstElement$this = new .ceylon.language.ContainerWithFirstElement$impl<Element, .java.lang.Object>((.ceylon.language.ContainerWithFirstElement<Element, .java.lang.Object>)(.ceylon.language.ContainerWithFirstElement)this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl(this);
        this.$ceylon$language$Sized$this = new .ceylon.language.Sized$impl(this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends Element>>((.ceylon.language.Cloneable<.ceylon.language.Collection<? extends Element>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, Element>(this);
        this.$ceylon$language$Ranged$this = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends Element>>((.ceylon.language.Ranged<.ceylon.language.Integer, .ceylon.language.List<? extends Element>>)(.ceylon.language.Ranged)this);
        this.$ceylon$language$FixedSized$this = new .ceylon.language.FixedSized$impl<Element>(this);
        this.$ceylon$language$Some$this = new .ceylon.language.Some$impl<Element>(this);
    }
    protected final .ceylon.language.Sequence$impl<Element> $ceylon$language$Sequence$this;
    
    @.java.lang.Override
    public Element getLast() {
        return $ceylon$language$Sequence$this.getLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends Element> getSequence() {
        return $ceylon$language$Sequence$this.getSequence();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends Element> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Sequence$this.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequence<? extends Result> collect(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Sequence$this.collect(collecting);
    }
    protected final .ceylon.language.Sequential$impl<Element> $ceylon$language$Sequential$this;
    protected final .ceylon.language.List$impl<Element> $ceylon$language$List$this;
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$List$this.getSize();
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this.defines(index);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterator<? extends Element> getIterator() {
        return $ceylon$language$List$this.getIterator();
    }
    
    @.java.lang.Override
    public boolean equals(final .java.lang.Object that) {
        return $ceylon$language$List$this.equals(that);
    }
    
    @.java.lang.Override
    public int hashCode() {
        return $ceylon$language$List$this.hashCode();
    }
    
    @.java.lang.Override
    public Element findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withLeading(final Other element) {
        return $ceylon$language$List$this.withLeading(element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withTrailing(final Other element) {
        return $ceylon$language$List$this.withTrailing(element);
    }
    protected final .ceylon.language.Collection$impl<Element> $ceylon$language$Collection$this;
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Collection$this.contains(element);
    }
    protected final .ceylon.language.Iterable$impl<Element> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result> map(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold(initial, accumulating);
    }
    
    @.java.lang.Override
    public Element find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable chain(final .ceylon.language.Iterable<? extends Other> other) {
        return $ceylon$language$Iterable$this.chain(other);
    }
    
    @.java.lang.Override
    public <Grouping>.ceylon.language.Map<? extends Grouping, ? extends .ceylon.language.Sequence<? extends Element>> group(final .ceylon.language.Callable<? extends Grouping> grouping) {
        return $ceylon$language$Iterable$this.group(grouping);
    }
    protected final .ceylon.language.ContainerWithFirstElement$impl<Element, .java.lang.Object> $ceylon$language$ContainerWithFirstElement$this;
    protected final .ceylon.language.Container$impl $ceylon$language$Container$this;
    protected final .ceylon.language.Sized$impl $ceylon$language$Sized$this;
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .java.lang.Object> containsEvery$elements() {
        return $ceylon$language$Category$this.containsEvery$elements();
    }
    
    @.java.lang.Override
    public final boolean containsEvery() {
        return $ceylon$language$Category$this.containsEvery();
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Sequential<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .java.lang.Object> containsAny$elements() {
        return $ceylon$language$Category$this.containsAny$elements();
    }
    
    @.java.lang.Override
    public final boolean containsAny() {
        return $ceylon$language$Category$this.containsAny();
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Sequential<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    protected final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends Element>> $ceylon$language$Cloneable$this;
    protected final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, Element> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    public .ceylon.language.Correspondence$impl<? super .ceylon.language.Integer, ? extends Element> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Correspondence$impl<? super .ceylon.language.Integer, ? extends Element>.Items Items$new(final .ceylon.language.Sequence<? extends .ceylon.language.Integer> arg0) {
        return $ceylon$language$Correspondence$this.Items$new(arg0);
    }
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this.getKeys();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> definesEvery$keys() {
        return $ceylon$language$Correspondence$this.definesEvery$keys();
    }
    
    @.java.lang.Override
    public final boolean definesEvery() {
        return $ceylon$language$Correspondence$this.definesEvery();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> definesAny$keys() {
        return $ceylon$language$Correspondence$this.definesAny$keys();
    }
    
    @.java.lang.Override
    public final boolean definesAny() {
        return $ceylon$language$Correspondence$this.definesAny();
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> items$keys() {
        return $ceylon$language$Correspondence$this.items$keys();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> items() {
        return $ceylon$language$Correspondence$this.items();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> items(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    protected final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends Element>> $ceylon$language$Ranged$this;
    protected final .ceylon.language.FixedSized$impl<Element> $ceylon$language$FixedSized$this;
    protected final .ceylon.language.Some$impl<Element> $ceylon$language$Some$this;
    
    @.java.lang.Override
    public final boolean getEmpty() {
        return $ceylon$language$Some$this.getEmpty();
    }
    private final First first;
    
    @.java.lang.Override
    public final First getFirst() {
        return first;
    }
    private final .ceylon.language.Sequential<? extends Element> rest;
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> getRest() {
        return rest;
    }
    
    @.java.lang.Override
    public final .java.lang.String toString() {
        return new .java.lang.StringBuilder().append("(").append((
            let
            {
                .ceylon.language.String $ceylontmp1 = (
                    let
                    {
                        .java.lang.Object $safe$0 = getFirst();
                    }
                    returning $safe$0 != null ? .ceylon.language.String.instance($safe$0.toString()) : null;
                );
            }
            returning $ceylontmp1 != null ? $ceylontmp1 : .ceylon.language.String.instance("null");
        ).toString()).append(", ").append(((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.String>)(.ceylon.language.Ranged).ceylon.language.String.instance(((.ceylon.language.Collection<? extends Element>)(.ceylon.language.Collection)getRest()).toString())).spanFrom(.ceylon.language.Integer.instance(1L)).toString()).toString();
    }
    
    @.java.lang.Override
    public final Element item(final .ceylon.language.Integer index) {
        {
            .java.lang.Object $sel$2 = index.compare(.ceylon.language.Integer.instance(0L));
            if ($sel$2 == .ceylon.language.smaller_.getSmaller$()) {
                return null;
            } else if ($sel$2 == .ceylon.language.equal_.getEqual$()) {
                return getFirst();
            } else if ($sel$2 == .ceylon.language.larger_.getLarger$()) {
                return ((.ceylon.language.List<? extends Element>)(.ceylon.language.List)getRest()).item(index.minus(.ceylon.language.Integer.instance(1L)));
            } else throw new .com.redhat.ceylon.compiler.java.language.EnumeratedTypeError("Supposedly exhaustive switch was not exhaustive");
        }
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getLastIndex() {
        .ceylon.language.Integer $restLastIndex$4;
        if (($restLastIndex$4 = ((.ceylon.language.List<? extends Element>)(.ceylon.language.List)getRest()).getLastIndex()) != null) {
            final long $restLastIndex$5 = $restLastIndex$4.longValue();
            return .ceylon.language.Integer.instance($restLastIndex$5 + 1L);
        } else {
            return .ceylon.language.Integer.instance(0L);
        }
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequence<? extends Element> getReversed() {
        return (.ceylon.language.Sequence<? extends Element>)(.ceylon.language.Sequence)getRest().getReversed().<First>withTrailing(getFirst());
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> segment(final .ceylon.language.Integer from, final long length) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends Element> $ceylontmp6 = from.compare(.ceylon.language.Integer.instance(0L)).asSmallAs() ? (.ceylon.language.Sequence<? extends Element>)(.ceylon.language.Sequence)((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends Element>>)(.ceylon.language.Ranged)getRest()).segment(.ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(length).plus(from).minus(.ceylon.language.Integer.instance(1L)).longValue()).<First>withLeading(getFirst()) : null;
            }
            returning $ceylontmp6 != null ? $ceylontmp6 : ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends Element>>)(.ceylon.language.Ranged)getRest()).segment(from.minus(.ceylon.language.Integer.instance(1L)), length);
        );
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> span(final .ceylon.language.Integer from, final .ceylon.language.Integer end) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends Element> $ceylontmp7 = from.compare(end).asSmallAs() ? ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends Element>>)(.ceylon.language.Ranged)this).segment(from, end.minus(from).plus(.ceylon.language.Integer.instance(1L)).longValue()) : null;
            }
            returning $ceylontmp7 != null ? $ceylontmp7 : ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends Element>>)(.ceylon.language.Ranged)this).segment(end, from.minus(end).plus(.ceylon.language.Integer.instance(1L)).longValue()).getReversed().getSequence();
        );
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> spanFrom(final .ceylon.language.Integer from) {
        return .ceylon.language.bottom_.getBottom$();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> spanTo(final .ceylon.language.Integer to) {
        return .ceylon.language.bottom_.getBottom$();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequence<? extends Element> getClone() {
        return this;
    }
}