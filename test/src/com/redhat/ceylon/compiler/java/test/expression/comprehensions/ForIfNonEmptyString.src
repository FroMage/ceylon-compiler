package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

class ForIfNonEmptySequence {
    
    ForIfNonEmptySequence() {
    }
    
    public final void m(final .ceylon.language.Sequential<? extends .ceylon.language.String> ss) {
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Character>(){
            
            public final .ceylon.language.Iterator<.ceylon.language.Character> getIterator() {
                return new .ceylon.language.Iterator<.ceylon.language.Character>(){
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> iter$0 = ss.getIterator();
                    private .ceylon.language.String s;
                    private boolean s$exhausted;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmpitem0 = iter$0.next();
                        s$exhausted = $ceylontmpitem0 == .ceylon.language.finished_.getFinished$();
                        if (s$exhausted) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmpitem0;
                            return true;
                        }
                    }
                    private .ceylon.language.Sequential<? extends .ceylon.language.Character> $s$2;
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.s()) break;
                            .ceylon.language.String $s$1 = null;
                            if (($s$1 = s) instanceof .ceylon.language.Sequence) {
                                $s$2 = $s$1;
                                break;
                            }
                        }
                        return !s$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        return this.next1() ? ((.ceylon.language.Sequence<? extends .ceylon.language.Character>)(.ceylon.language.Sequence)$s$2).getFirst() : .ceylon.language.finished_.getFinished$();
                    }
                };
            }
        });
    }
    
    public final void mvar(final .ceylon.language.Sequential<? extends .ceylon.language.String> ss) {
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Character>(){
            
            public final .ceylon.language.Iterator<.ceylon.language.Character> getIterator() {
                return new .ceylon.language.Iterator<.ceylon.language.Character>(){
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> iter$0 = ss.getIterator();
                    private .ceylon.language.String s;
                    private boolean s$exhausted;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmpitem3 = iter$0.next();
                        s$exhausted = $ceylontmpitem3 == .ceylon.language.finished_.getFinished$();
                        if (s$exhausted) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmpitem3;
                            return true;
                        }
                    }
                    private .ceylon.language.Sequential<? extends .ceylon.language.Character> $t$5;
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.s()) break;
                            .ceylon.language.String $t$4 = null;
                            if (($t$4 = s) instanceof .ceylon.language.Sequence) {
                                $t$5 = $t$4;
                                break;
                            }
                        }
                        return !s$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        return this.next1() ? ((.ceylon.language.Sequence<? extends .ceylon.language.Character>)(.ceylon.language.Sequence)$t$5).getFirst() : .ceylon.language.finished_.getFinished$();
                    }
                };
            }
        });
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfNonEmptySequence();
    }
}