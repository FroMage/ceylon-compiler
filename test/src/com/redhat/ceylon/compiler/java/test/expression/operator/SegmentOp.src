package com.redhat.ceylon.compiler.java.test.expression.operator;

class SegmentOp {
    
    SegmentOp() {
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> $int(final long start, final long length) {
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> segment = .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>spreadOp(.ceylon.language.Integer.instance(start), length);
        return segment;
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Character> $char(final int start, final long length) {
        final .ceylon.language.Sequential<? extends .ceylon.language.Character> segment = .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Character>spreadOp(.ceylon.language.Character.instance(start), length);
        return segment;
    }
    
    public final <T extends .ceylon.language.Ordinal<? extends T>>.ceylon.language.Sequential<? extends T> t(final T start, final long length) {
        final .ceylon.language.Sequential<? extends T> segment = .com.redhat.ceylon.compiler.java.Util.<T>spreadOp(start, length);
        return segment;
    }
    
    public final <T extends .ceylon.language.Ordinal<? extends T>, S>.ceylon.language.Sequential<? extends T> t2(final .java.lang.Object start, final long length) {
        final .ceylon.language.Sequential<? extends T> segment = .com.redhat.ceylon.compiler.java.Util.<T>spreadOp((T)start, length);
        return segment;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.SegmentOp();
    }
}