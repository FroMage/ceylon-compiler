package com.redhat.ceylon.compiler.java.test.structure.method;

class VarargsMethodSpecifyingMethodWithVarargs implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    VarargsMethodSpecifyingMethodWithVarargs() {
    }
    
    private final void foo$priv() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$seq$0 = foo$seq();
                foo$priv$($ceylontmp$seq$0);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.Integer> foo$seq() {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private void foo$priv$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> seq) {
    }
    
    private final void foo$priv(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> seq) {
        (
            let
            {
                foo$priv$(seq);
            }
            returning null;
        );
    }
    
    private final .java.lang.Object bar$priv() {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$ints$1 = bar$ints();
            }
            returning bar$priv$($ceylontmp$ints$1);
        );
    }
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.Integer> bar$ints() {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private .java.lang.Object bar$priv$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ints) {
        return (
            let
            {
                foo$priv(ints);
            }
            returning null;
        );
    }
    
    private final .java.lang.Object bar$priv(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ints) {
        return bar$priv$(ints);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.method.VarargsMethodSpecifyingMethodWithVarargs();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.structure.method.VarargsMethodSpecifyingMethodWithVarargs.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.method.VarargsMethodSpecifyingMethodWithVarargs.class);
}