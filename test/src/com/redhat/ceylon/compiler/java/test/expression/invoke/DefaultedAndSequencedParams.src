package com.redhat.ceylon.compiler.java.test.expression.invoke;

class DefaultedAndSequenced implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    DefaultedAndSequenced() {
    }
    
    private final void m$priv(final .java.lang.String s) {
        (
            let
            {
                long $ceylontmp$i$1 = m$i(s);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$b$2 = m$b(s, $ceylontmp$i$1);
                m$priv(s, $ceylontmp$i$1, $ceylontmp$b$2);
            }
            returning null;
        );
    }
    
    private final long m$i(final .java.lang.String s) {
        return 1L;
    }
    
    private final void m$priv(final .java.lang.String s, final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$b$4 = m$b(s, i);
                m$priv(s, i, $ceylontmp$b$4);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> m$b(final .java.lang.String s, final long i) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    private final void m$priv(final .java.lang.String s, final long i, final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> b) {
    }
    
    private final .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced self$priv() {
        return this;
    }
    
    private final void positional$priv() {
        m$priv("");
        m$priv("", 2L);
        m$priv("", 2L, .ceylon.language.ArraySequence.<.ceylon.language.Boolean>instance(.ceylon.language.Boolean.$TypeDescriptor, new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)}));
        final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> x = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.Boolean.instance(false), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$()));
        m$priv("", 2L, x);
    }
    
    private final void qmePositional$priv() {
        self$priv().m$priv("");
        self$priv().m$priv("", 2L);
        self$priv().m$priv("", 2L, .ceylon.language.ArraySequence.<.ceylon.language.Boolean>instance(.ceylon.language.Boolean.$TypeDescriptor, new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)}));
        final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> x = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.Boolean.instance(false), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$()));
        self$priv().m$priv("", 2L, x);
    }
    
    private final void qtePositional$priv() {
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m$priv("");
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m$priv("", 2L);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m$priv("", 2L, .ceylon.language.ArraySequence.<.ceylon.language.Boolean>instance(.ceylon.language.Boolean.$TypeDescriptor, new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)}));
        final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> x = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.Boolean.instance(false), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$()));
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m$priv("", 2L, x);
    }
    
    private final void namedArgs$priv() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$5$this$ = this;
                .java.lang.String $arg$5$0 = "";
                long $arg$5$1 = $arg$5$this$.m$i($arg$5$0);
                .ceylon.language.Sequential $arg$5$2 = $arg$5$this$.m$b($arg$5$0, $arg$5$1);
                m$priv($arg$5$0, $arg$5$1, $arg$5$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$6$this$ = this;
                .java.lang.String $arg$6$0 = "";
                long $arg$6$1 = 2L;
                .ceylon.language.Sequential $arg$6$2 = $arg$6$this$.m$b($arg$6$0, $arg$6$1);
                m$priv($arg$6$0, $arg$6$1, $arg$6$2);
            }
            returning null;
        );
        (
            let
            {
                .java.lang.String $arg$7$0 = "";
                long $arg$7$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$7$2 = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$());
                m$priv($arg$7$0, $arg$7$1, $arg$7$2);
            }
            returning null;
        );
        (
            let
            {
                .java.lang.String $arg$8$0 = "";
                long $arg$8$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$8$2 = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.Boolean.instance(true), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Boolean.instance(true), .ceylon.language.empty_.getEmpty$()));
                m$priv($arg$8$0, $arg$8$1, $arg$8$2);
            }
            returning null;
        );
    }
    
    private final void qmeNamedArgs$priv() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$9$callable$ = self$priv();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$9$this$ = $arg$9$callable$;
                .java.lang.String $arg$9$0 = "";
                long $arg$9$1 = $arg$9$this$.m$i($arg$9$0);
                .ceylon.language.Sequential $arg$9$2 = $arg$9$this$.m$b($arg$9$0, $arg$9$1);
                $arg$9$callable$.m$priv($arg$9$0, $arg$9$1, $arg$9$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$10$callable$ = self$priv();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$10$this$ = $arg$10$callable$;
                .java.lang.String $arg$10$0 = "";
                long $arg$10$1 = 2L;
                .ceylon.language.Sequential $arg$10$2 = $arg$10$this$.m$b($arg$10$0, $arg$10$1);
                $arg$10$callable$.m$priv($arg$10$0, $arg$10$1, $arg$10$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$11$callable$ = self$priv();
                .java.lang.String $arg$11$0 = "";
                long $arg$11$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$11$2 = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$());
                $arg$11$callable$.m$priv($arg$11$0, $arg$11$1, $arg$11$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$12$callable$ = self$priv();
                .java.lang.String $arg$12$0 = "";
                long $arg$12$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$12$2 = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.Boolean.instance(true), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Boolean.instance(true), .ceylon.language.empty_.getEmpty$()));
                $arg$12$callable$.m$priv($arg$12$0, $arg$12$1, $arg$12$2);
            }
            returning null;
        );
    }
    
    private final void qteNamedArgs$priv() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$13$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$13$this$ = $arg$13$callable$;
                .java.lang.String $arg$13$0 = "";
                long $arg$13$1 = $arg$13$this$.m$i($arg$13$0);
                .ceylon.language.Sequential $arg$13$2 = $arg$13$this$.m$b($arg$13$0, $arg$13$1);
                $arg$13$callable$.m$priv($arg$13$0, $arg$13$1, $arg$13$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$14$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$14$this$ = $arg$14$callable$;
                .java.lang.String $arg$14$0 = "";
                long $arg$14$1 = 2L;
                .ceylon.language.Sequential $arg$14$2 = $arg$14$this$.m$b($arg$14$0, $arg$14$1);
                $arg$14$callable$.m$priv($arg$14$0, $arg$14$1, $arg$14$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$15$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .java.lang.String $arg$15$0 = "";
                long $arg$15$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$15$2 = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$());
                $arg$15$callable$.m$priv($arg$15$0, $arg$15$1, $arg$15$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$16$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .java.lang.String $arg$16$0 = "";
                long $arg$16$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$16$2 = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.Boolean.instance(true), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Boolean.instance(true), .ceylon.language.empty_.getEmpty$()));
                $arg$16$callable$.m$priv($arg$16$0, $arg$16$1, $arg$16$2);
            }
            returning null;
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced.class);
}