package com.redhat.ceylon.compiler.java.test.expression.invoke;

class DefaultedAndSequenced {
    
    DefaultedAndSequenced() {
    }
    
    private final void m(final .java.lang.String s) {
        (
            let
            {
                long $ceylontmp$i$1 = m$i(s);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$b$2 = m$b(s, $ceylontmp$i$1);
                m(s, $ceylontmp$i$1, $ceylontmp$b$2);
            }
            returning null;
        );
    }
    
    private final long m$i(final .java.lang.String s) {
        return 1L;
    }
    
    private final void m(final .java.lang.String s, final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$b$4 = m$b(s, i);
                m(s, i, $ceylontmp$b$4);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> m$b(final .java.lang.String s, final long i) {
        return new .ceylon.language.Tuple(.ceylon.language.Boolean.instance(true), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$()));
    }
    
    private final void m(final .java.lang.String s, final long i, final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> b) {
    }
    
    private final .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced self() {
        return this;
    }
    
    private final void positional() {
        m("");
        m("", 2L);
        m("", 2L, (
            let
            {
                .ceylon.language.Boolean[] $ceylontmp5 = new .ceylon.language.Boolean[]{.ceylon.language.Boolean.instance(false)};
            }
            returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Boolean>($ceylontmp5);
        ));
        final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> x = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>(.ceylon.language.Boolean.instance(false), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$()));
        m("", 2L, x);
    }
    
    private final void qmePositional() {
        self().m("");
        self().m("", 2L);
        self().m("", 2L, (
            let
            {
                .ceylon.language.Boolean[] $ceylontmp6 = new .ceylon.language.Boolean[]{.ceylon.language.Boolean.instance(false)};
            }
            returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Boolean>($ceylontmp6);
        ));
        final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> x = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>(.ceylon.language.Boolean.instance(false), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$()));
        self().m("", 2L, x);
    }
    
    private final void qtePositional() {
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m("");
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m("", 2L);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m("", 2L, (
            let
            {
                .ceylon.language.Boolean[] $ceylontmp7 = new .ceylon.language.Boolean[]{.ceylon.language.Boolean.instance(false)};
            }
            returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Boolean>($ceylontmp7);
        ));
        final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> x = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>(.ceylon.language.Boolean.instance(false), new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Empty>(.ceylon.language.Boolean.instance(false), .ceylon.language.empty_.getEmpty$()));
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m("", 2L, x);
    }
    
    private final void namedArgs() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$8$this$ = this;
                .java.lang.String $arg$8$0 = "";
                long $arg$8$1 = $arg$8$this$.m$i($arg$8$0);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$8$2$0 = $arg$8$this$.m$b($arg$8$0, $arg$8$1);
                m($arg$8$0, $arg$8$1, $arg$8$2$0);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$9$this$ = this;
                .java.lang.String $arg$9$0 = "";
                long $arg$9$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$9$2$0 = $arg$9$this$.m$b($arg$9$0, $arg$9$1);
                m($arg$9$0, $arg$9$1, $arg$9$2$0);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$10$this$ = this;
                .java.lang.String $arg$10$0 = "";
                long $arg$10$1 = 2L;
                .ceylon.language.Boolean $arg$10$2$0 = .ceylon.language.Boolean.instance(false);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$10$2$1 = $arg$10$this$.m$b($arg$10$0, $arg$10$1);
                m($arg$10$0, $arg$10$1, $arg$10$2$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$11$this$ = this;
                .java.lang.String $arg$11$0 = "";
                long $arg$11$1 = 2L;
                .ceylon.language.Boolean $arg$11$2$0 = .ceylon.language.Boolean.instance(true);
                .ceylon.language.Boolean $arg$11$2$1 = .ceylon.language.Boolean.instance(true);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$11$2$2 = $arg$11$this$.m$b($arg$11$0, $arg$11$1);
                m($arg$11$0, $arg$11$1, $arg$11$2$2);
            }
            returning null;
        );
    }
    
    private final void qmeNamedArgs() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$12$callable$ = self();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$12$this$ = $arg$12$callable$;
                .java.lang.String $arg$12$0 = "";
                long $arg$12$1 = $arg$12$this$.m$i($arg$12$0);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$12$2$0 = $arg$12$this$.m$b($arg$12$0, $arg$12$1);
                $arg$12$callable$.m($arg$12$0, $arg$12$1, $arg$12$2$0);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$13$callable$ = self();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$13$this$ = $arg$13$callable$;
                .java.lang.String $arg$13$0 = "";
                long $arg$13$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$13$2$0 = $arg$13$this$.m$b($arg$13$0, $arg$13$1);
                $arg$13$callable$.m($arg$13$0, $arg$13$1, $arg$13$2$0);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$14$callable$ = self();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$14$this$ = $arg$14$callable$;
                .java.lang.String $arg$14$0 = "";
                long $arg$14$1 = 2L;
                .ceylon.language.Boolean $arg$14$2$0 = .ceylon.language.Boolean.instance(false);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$14$2$1 = $arg$14$this$.m$b($arg$14$0, $arg$14$1);
                $arg$14$callable$.m($arg$14$0, $arg$14$1, $arg$14$2$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$15$callable$ = self();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$15$this$ = $arg$15$callable$;
                .java.lang.String $arg$15$0 = "";
                long $arg$15$1 = 2L;
                .ceylon.language.Boolean $arg$15$2$0 = .ceylon.language.Boolean.instance(true);
                .ceylon.language.Boolean $arg$15$2$1 = .ceylon.language.Boolean.instance(true);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$15$2$2 = $arg$15$this$.m$b($arg$15$0, $arg$15$1);
                $arg$15$callable$.m($arg$15$0, $arg$15$1, $arg$15$2$2);
            }
            returning null;
        );
    }
    
    private final void qteNamedArgs() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$16$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$16$this$ = $arg$16$callable$;
                .java.lang.String $arg$16$0 = "";
                long $arg$16$1 = $arg$16$this$.m$i($arg$16$0);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$16$2$0 = $arg$16$this$.m$b($arg$16$0, $arg$16$1);
                $arg$16$callable$.m($arg$16$0, $arg$16$1, $arg$16$2$0);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$17$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$17$this$ = $arg$17$callable$;
                .java.lang.String $arg$17$0 = "";
                long $arg$17$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$17$2$0 = $arg$17$this$.m$b($arg$17$0, $arg$17$1);
                $arg$17$callable$.m($arg$17$0, $arg$17$1, $arg$17$2$0);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$18$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$18$this$ = $arg$18$callable$;
                .java.lang.String $arg$18$0 = "";
                long $arg$18$1 = 2L;
                .ceylon.language.Boolean $arg$18$2$0 = .ceylon.language.Boolean.instance(false);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$18$2$1 = $arg$18$this$.m$b($arg$18$0, $arg$18$1);
                $arg$18$callable$.m($arg$18$0, $arg$18$1, $arg$18$2$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$19$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced $arg$19$this$ = $arg$19$callable$;
                .java.lang.String $arg$19$0 = "";
                long $arg$19$1 = 2L;
                .ceylon.language.Boolean $arg$19$2$0 = .ceylon.language.Boolean.instance(true);
                .ceylon.language.Boolean $arg$19$2$1 = .ceylon.language.Boolean.instance(true);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $arg$19$2$2 = $arg$19$this$.m$b($arg$19$0, $arg$19$1);
                $arg$19$callable$.m($arg$19$0, $arg$19$1, $arg$19$2$2);
            }
            returning null;
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
    }
}