package com.redhat.ceylon.compiler.java.test.interop;

final class methods_ {
    
    private methods_() {
    }
    
    static void methods() {
        final .java.io.File f1 = new .java.io.File("file1");
        final .java.io.File f2 = new .java.io.File("file2");
        .ceylon.language.print_.print(.ceylon.language.Boolean.instance(f1.canRead()));
        final long cmp = f1.compareTo(f2);
        f1.listFiles();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.methods_.methods();
    }
}
final class overloadedMethodsAndSubClasses_ {
    
    private overloadedMethodsAndSubClasses_() {
    }
    
    static void overloadedMethodsAndSubClasses() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass inst = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass();
        inst.method();
        inst.method(1L);
        inst.method(1L, 2L);
        inst.topMethod();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.overloadedMethodsAndSubClasses_.overloadedMethodsAndSubClasses();
    }
}
final class overloadedConstructors_ {
    
    private overloadedConstructors_() {
    }
    
    static void overloadedConstructors() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass inst = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass();
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass inst2 = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass(2L);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.overloadedConstructors_.overloadedConstructors();
    }
}
class OverloadedMembersAndSubClasses extends .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OverloadedMembersAndSubClasses() {
        super();
    }
    
    private final void test$priv$() {
        method();
        method(1L);
        method(1L, 2L);
        topMethod();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses.class);
}
class OverloadedMembersAndSubClasses2 extends .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OverloadedMembersAndSubClasses2() {
        super(2L);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses2();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses2.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses2.class);
}
final class variadicMethods_ {
    
    private variadicMethods_() {
    }
    
    static void variadicMethods() {
        
        final class box_ {
            
            private box_() {
            }
            
            <T>T box(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final T t) {
                return t;
            }
        }
        final box_ box = new box_();
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        java.variadicBoolean(new boolean[]{
                true,
                box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)).booleanValue(),
                true});
        java.variadicBoolean(.com.redhat.ceylon.compiler.java.Util.toBooleanArray((.ceylon.language.Sequential<? extends .ceylon.language.Boolean>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicBoolean(.com.redhat.ceylon.compiler.java.Util.toBooleanArray(new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Boolean>>>>(.ceylon.language.Boolean.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)),
                .ceylon.language.Boolean.instance(true)})));
        java.variadicBoolean(.com.redhat.ceylon.compiler.java.Util.toBooleanArray(new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Boolean>>>>(.ceylon.language.Boolean.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)),
                .ceylon.language.Boolean.instance(true)}), true, box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)).booleanValue()));
        java.variadicCeylonBoolean(.ceylon.language.Boolean.instance(true), box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)), .ceylon.language.Boolean.instance(true));
        java.variadicCeylonBoolean((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$0$0 = (.ceylon.language.Sequential<? extends .ceylon.language.Boolean>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Boolean>toArray($ceylontmp$0$0, new .ceylon.language.Boolean[(int)$ceylontmp$0$0.getSize()]);
        ));
        java.variadicCeylonBoolean((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$1$0 = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Boolean>>>>(.ceylon.language.Boolean.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Boolean.instance(true),
                        box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)),
                        .ceylon.language.Boolean.instance(true)});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Boolean>toArray($ceylontmp$1$0, new .ceylon.language.Boolean[(int)$ceylontmp$1$0.getSize()]);
        ));
        java.variadicChar(new char[]{
                (char)97,
                (char)box.<.ceylon.language.Character>box(.ceylon.language.Character.$TypeDescriptor$, .ceylon.language.Character.instance(98)).intValue(),
                (char)99});
        java.variadicChar(.com.redhat.ceylon.compiler.java.Util.toCharArray((.ceylon.language.Sequential<? extends .ceylon.language.Character>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicChar(.com.redhat.ceylon.compiler.java.Util.toCharArray(new .ceylon.language.Tuple<.ceylon.language.Character, .ceylon.language.Character, .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Character>>>>(.ceylon.language.Character.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Character.instance(97),
                box.<.ceylon.language.Character>box(.ceylon.language.Character.$TypeDescriptor$, .ceylon.language.Character.instance(98)),
                .ceylon.language.Character.instance(99)})));
        java.variadicByte(new byte[]{
                (byte)1L,
                (byte)box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)).longValue(),
                (byte)3L});
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)}), 1L));
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)}), 1L, box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)).longValue()));
        java.variadicShort(.com.redhat.ceylon.compiler.java.Util.toShortArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicShort(.com.redhat.ceylon.compiler.java.Util.toShortArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        java.variadicInt(.com.redhat.ceylon.compiler.java.Util.toIntArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicInt(.com.redhat.ceylon.compiler.java.Util.toIntArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        java.variadicLong(new long[]{
                1L,
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)).longValue(),
                3L});
        java.variadicLong(new long[]{1L});
        java.variadicLong(new long[]{box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L)).longValue()});
        java.variadicLong();
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> empty = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> full = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L)});
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray(empty));
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray(full));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicFloat(new float[]{
                (float)1.0,
                (float)box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)).doubleValue(),
                (float)3.0});
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .ceylon.language.Tuple<.ceylon.language.Float, .ceylon.language.Float, .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Float>>>>(.ceylon.language.Float.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)})));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .ceylon.language.Tuple<.ceylon.language.Float, .ceylon.language.Float, .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Float>>>>(.ceylon.language.Float.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)}), 1.0));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .ceylon.language.Tuple<.ceylon.language.Float, .ceylon.language.Float, .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Float>>>>(.ceylon.language.Float.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)}), 1.0, box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)).doubleValue()));
        java.variadicDouble(.com.redhat.ceylon.compiler.java.Util.toDoubleArray((.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicDouble(.com.redhat.ceylon.compiler.java.Util.toDoubleArray(new .ceylon.language.Tuple<.ceylon.language.Float, .ceylon.language.Float, .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Float>>>>(.ceylon.language.Float.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)})));
        java.variadicJavaString("a", box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")).toString(), "c");
        java.variadicJavaString("a");
        java.variadicJavaString(box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("a")).toString());
        java.variadicJavaString();
        final .ceylon.language.String string = .ceylon.language.String.instance("a");
        java.variadicJavaString((
            let
            {
                .ceylon.language.String $ceylontmp$2 = string;
            }
            returning $ceylontmp$2 != null ? $ceylontmp$2.toString() : null;
        ));
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray((.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray(new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>>(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")),
                .ceylon.language.String.instance("c")})));
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray(new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>>(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")),
                .ceylon.language.String.instance("c")}), "a", box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")).toString()));
        java.variadicCeylonString(.ceylon.language.String.instance("a"), box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")), .ceylon.language.String.instance("c"));
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$3$0 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$3$0, new .ceylon.language.String[(int)$ceylontmp$3$0.getSize()]);
        ));
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$4$0 = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>>(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.String.instance("a"),
                        box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")),
                        .ceylon.language.String.instance("c")});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$4$0, new .ceylon.language.String[(int)$ceylontmp$4$0.getSize()]);
        ));
        final .ceylon.language.Sequential<? extends .ceylon.language.String> emptyString = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
        final .ceylon.language.Sequential<? extends .ceylon.language.String> fullString = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")});
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$5$0 = emptyString;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$5$0, new .ceylon.language.String[(int)$ceylontmp$5$0.getSize()]);
        ));
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$6$0 = fullString;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$6$0, new .ceylon.language.String[(int)$ceylontmp$6$0.getSize()]);
        ));
        java.variadicObject(.ceylon.language.String.instance("a"), box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")), .ceylon.language.Integer.instance(1L), box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$7$0 = .ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp$7$0, new .java.lang.Object[(int)$ceylontmp$7$0.getSize()]);
        ));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$8$0 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.String.instance("a"),
                        box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")),
                        .ceylon.language.Integer.instance(1L),
                        box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L))});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp$8$0, new .java.lang.Object[(int)$ceylontmp$8$0.getSize()]);
        ));
        java.variadicObject(new .java.lang.String("a"), new .java.lang.Integer((int)1L));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$9$0 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.Integer.class)), new .java.lang.Object[]{
                        new .java.lang.String("a"),
                        new .java.lang.Integer((int)1L)});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp$9$0, new .java.lang.Object[(int)$ceylontmp$9$0.getSize()]);
        ));
        java.<.ceylon.language.Integer>variadicT(.ceylon.language.Integer.instance(1L), box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)), .ceylon.language.Integer.instance(3L));
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$10$0 = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp$10$0, new .ceylon.language.Integer[(int)$ceylontmp$10$0.getSize()]);
        ));
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$11$0 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                        .ceylon.language.Integer.instance(3L)});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp$11$0, new .ceylon.language.Integer[(int)$ceylontmp$11$0.getSize()]);
        ));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> sequence = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)});
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$12$0 = sequence;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp$12$0, new .ceylon.language.Integer[(int)$ceylontmp$12$0.getSize()]);
        ));
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$13$0 = sequence;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp$13$0, new .ceylon.language.Integer[(int)$ceylontmp$13$0.getSize() + 2], .ceylon.language.Integer.instance(1L), box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)));
        ));
        java.<.ceylon.language.String>variadicT(.ceylon.language.String.instance("a"), box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")), .ceylon.language.String.instance("c"));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.variadicMethods_.variadicMethods();
    }
}
final class tupleSpreading_ {
    
    private tupleSpreading_() {
    }
    
    static void tupleSpreading() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.TypesJava, ? extends .com.redhat.ceylon.compiler.java.test.interop.TypesJava, ? extends .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.TypesJava>>>>>>>>>>> tuple = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Character.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.TypesJava.class)), new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L),
                .ceylon.language.Float.instance(5.0),
                .ceylon.language.Float.instance(6.0),
                .ceylon.language.Character.instance(97),
                .ceylon.language.String.instance("foo"),
                java});
        java.takeAll(true, (byte)1L, (short)2L, (int)3L, 4L, (float)5.0, 6.0, (char)97, "foo", java);
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.TypesJava, ? extends .com.redhat.ceylon.compiler.java.test.interop.TypesJava, ? extends .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.TypesJava>>>>>>>>>>> tuple$14 = tuple;
                java.takeAll(((.ceylon.language.Boolean)tuple$14.get(.ceylon.language.Integer.instance(0L))).booleanValue(), (byte)((.ceylon.language.Integer)tuple$14.get(.ceylon.language.Integer.instance(1L))).longValue(), (short)((.ceylon.language.Integer)tuple$14.get(.ceylon.language.Integer.instance(2L))).longValue(), (int)((.ceylon.language.Integer)tuple$14.get(.ceylon.language.Integer.instance(3L))).longValue(), ((.ceylon.language.Integer)tuple$14.get(.ceylon.language.Integer.instance(4L))).longValue(), (float)((.ceylon.language.Float)tuple$14.get(.ceylon.language.Integer.instance(5L))).doubleValue(), ((.ceylon.language.Float)tuple$14.get(.ceylon.language.Integer.instance(6L))).doubleValue(), (char)((.ceylon.language.Character)tuple$14.get(.ceylon.language.Integer.instance(7L))).intValue(), ((.ceylon.language.String)tuple$14.get(.ceylon.language.Integer.instance(8L))).toString(), tuple$14.get(.ceylon.language.Integer.instance(9L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.TypesJava, ? extends .com.redhat.ceylon.compiler.java.test.interop.TypesJava, ? extends .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.TypesJava>>>>>>>>>> tuple$16 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.interop.TypesJava, ? extends .com.redhat.ceylon.compiler.java.test.interop.TypesJava, ? extends .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.interop.TypesJava>>>>>>>>>>>)(.ceylon.language.Tuple)tuple).getRest();
                java.takeAll(true, (byte)((.ceylon.language.Integer)tuple$16.get(.ceylon.language.Integer.instance(0L))).longValue(), (short)((.ceylon.language.Integer)tuple$16.get(.ceylon.language.Integer.instance(1L))).longValue(), (int)((.ceylon.language.Integer)tuple$16.get(.ceylon.language.Integer.instance(2L))).longValue(), ((.ceylon.language.Integer)tuple$16.get(.ceylon.language.Integer.instance(3L))).longValue(), (float)((.ceylon.language.Float)tuple$16.get(.ceylon.language.Integer.instance(4L))).doubleValue(), ((.ceylon.language.Float)tuple$16.get(.ceylon.language.Integer.instance(5L))).doubleValue(), (char)((.ceylon.language.Character)tuple$16.get(.ceylon.language.Integer.instance(6L))).intValue(), ((.ceylon.language.String)tuple$16.get(.ceylon.language.Integer.instance(7L))).toString(), tuple$16.get(.ceylon.language.Integer.instance(8L)));
            }
            returning null;
        );
        final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Character>>>>>> tuple2 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Character.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Character.instance(97),
                .ceylon.language.Character.instance(98),
                .ceylon.language.Character.instance(99)});
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Character>>>>>> tuple$18 = tuple2;
                java.takeAllVariadic(((.ceylon.language.Boolean)tuple$18.get(.ceylon.language.Integer.instance(0L))).booleanValue(), (byte)((.ceylon.language.Integer)tuple$18.get(.ceylon.language.Integer.instance(1L))).longValue(), .com.redhat.ceylon.compiler.java.Util.toCharArray((.ceylon.language.Sequential<? extends .ceylon.language.Character>)(.ceylon.language.Sequential)tuple$18.spanFrom(.ceylon.language.Integer.instance(2L))));
            }
            returning null;
        );
        final .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Character>>> tuple3 = new .ceylon.language.Tuple<.ceylon.language.Character, .ceylon.language.Character, .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Character>>>(.ceylon.language.Character.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Character.instance(99),
                .ceylon.language.Character.instance(100)});
        java.takeAllVariadic(true, (byte)1L, .com.redhat.ceylon.compiler.java.Util.toCharArray(tuple3, 97, 98));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.tupleSpreading_.tupleSpreading();
    }
}
final class comprehensions_ {
    
    private comprehensions_() {
    }
    
    static void comprehensions() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Float, .java.lang.Object>(.ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Float> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Float>(.ceylon.language.Float.$TypeDescriptor$){
                    {
                        $iterator$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$20 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$20 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$20;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return .ceylon.language.Float.instance(2.0);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Float, .java.lang.Object>(.ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Float> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Float>(.ceylon.language.Float.$TypeDescriptor$){
                    {
                        $iterator$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$21 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$21 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$21;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return .ceylon.language.Float.instance(2.0);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }, 1.0));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequence<? extends .ceylon.language.Float>)(.ceylon.language.Sequence)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Float, .java.lang.Object>(.ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Float> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Float>(.ceylon.language.Float.$TypeDescriptor$){
                    {
                        $iterator$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$22 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$22 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$22;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return .ceylon.language.Float.instance(2.0);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.getSequence()));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequence<? extends .ceylon.language.Float>)(.ceylon.language.Sequence)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Float, .java.lang.Object>(.ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Float> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Float>(.ceylon.language.Float.$TypeDescriptor$){
                    {
                        $iterator$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$23 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$23 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$23;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return .ceylon.language.Float.instance(2.0);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.getSequence(), 1.0));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.comprehensions_.comprehensions();
    }
}