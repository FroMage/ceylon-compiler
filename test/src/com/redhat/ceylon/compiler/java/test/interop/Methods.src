package com.redhat.ceylon.compiler.java.test.interop;

final class methods_ {
    
    private methods_() {
    }
    
    static void methods() {
        final .java.io.File f1 = new .java.io.File("file1");
        final .java.io.File f2 = new .java.io.File("file2");
        .ceylon.language.print_.print(.ceylon.language.Boolean.instance(f1.canRead()));
        final long cmp = f1.compareTo(f2);
        f1.listFiles();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.methods_.methods();
    }
}
final class overloadedMethodsAndSubClasses_ {
    
    private overloadedMethodsAndSubClasses_() {
    }
    
    static void overloadedMethodsAndSubClasses() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass inst = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass();
        inst.method();
        inst.method(1L);
        inst.method(1L, 2L);
        inst.topMethod();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.overloadedMethodsAndSubClasses_.overloadedMethodsAndSubClasses();
    }
}
final class overloadedConstructors_ {
    
    private overloadedConstructors_() {
    }
    
    static void overloadedConstructors() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass inst = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass();
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass inst2 = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass(2L);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.overloadedConstructors_.overloadedConstructors();
    }
}
class OverloadedMembersAndSubClasses extends .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OverloadedMembersAndSubClasses() {
        super();
    }
    
    private final void test$priv() {
        method();
        method(1L);
        method(1L, 2L);
        topMethod();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses.class);
}
class OverloadedMembersAndSubClasses2 extends .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OverloadedMembersAndSubClasses2() {
        super(2L);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses2();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses2.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses2.class);
}
final class variadicMethods_ {
    
    private variadicMethods_() {
    }
    
    static void variadicMethods() {
        
        final class box_ {
            
            private box_() {
            }
            
            <T>T box(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final T t) {
                return t;
            }
        }
        final box_ box = new box_();
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        java.variadicBoolean(new boolean[]{
                true,
                box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.instance(false)).booleanValue(),
                true});
        java.variadicBoolean(.com.redhat.ceylon.compiler.java.Util.toBooleanArray((.ceylon.language.Sequential<? extends .ceylon.language.Boolean>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicBoolean(.com.redhat.ceylon.compiler.java.Util.toBooleanArray(new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>>(.ceylon.language.Boolean.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.instance(false)),
                .ceylon.language.Boolean.instance(true)})));
        java.variadicBoolean(.com.redhat.ceylon.compiler.java.Util.toBooleanArray(new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>>(.ceylon.language.Boolean.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.instance(false)),
                .ceylon.language.Boolean.instance(true)}), true, box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.instance(false)).booleanValue()));
        java.variadicCeylonBoolean(.ceylon.language.Boolean.instance(true), box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.instance(false)), .ceylon.language.Boolean.instance(true));
        java.variadicCeylonBoolean((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp0$0 = (.ceylon.language.Sequential<? extends .ceylon.language.Boolean>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Boolean>toArray($ceylontmp0$0, new .ceylon.language.Boolean[(int)$ceylontmp0$0.getSize()]);
        ));
        java.variadicCeylonBoolean((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp1$0 = new .ceylon.language.Tuple<.ceylon.language.Boolean, .ceylon.language.Boolean, .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Tuple<.ceylon.language.Boolean, ? extends .ceylon.language.Boolean, ? extends .ceylon.language.Empty>>>(.ceylon.language.Boolean.$TypeDescriptor, new .java.lang.Object[]{
                        .ceylon.language.Boolean.instance(true),
                        box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor, .ceylon.language.Boolean.instance(false)),
                        .ceylon.language.Boolean.instance(true)});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Boolean>toArray($ceylontmp1$0, new .ceylon.language.Boolean[(int)$ceylontmp1$0.getSize()]);
        ));
        java.variadicChar(new char[]{
                (char)97,
                (char)box.<.ceylon.language.Character>box(.ceylon.language.Character.$TypeDescriptor, .ceylon.language.Character.instance(98)).intValue(),
                (char)99});
        java.variadicChar(.com.redhat.ceylon.compiler.java.Util.toCharArray((.ceylon.language.Sequential<? extends .ceylon.language.Character>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicChar(.com.redhat.ceylon.compiler.java.Util.toCharArray(new .ceylon.language.Tuple<.ceylon.language.Character, .ceylon.language.Character, .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Tuple<.ceylon.language.Character, ? extends .ceylon.language.Character, ? extends .ceylon.language.Empty>>>(.ceylon.language.Character.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Character.instance(97),
                box.<.ceylon.language.Character>box(.ceylon.language.Character.$TypeDescriptor, .ceylon.language.Character.instance(98)),
                .ceylon.language.Character.instance(99)})));
        java.variadicByte(new byte[]{
                (byte)1L,
                (byte)box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)).longValue(),
                (byte)3L});
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)}), 1L));
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)}), 1L, box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)).longValue()));
        java.variadicShort(.com.redhat.ceylon.compiler.java.Util.toShortArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicShort(.com.redhat.ceylon.compiler.java.Util.toShortArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        java.variadicInt(.com.redhat.ceylon.compiler.java.Util.toIntArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicInt(.com.redhat.ceylon.compiler.java.Util.toIntArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        java.variadicLong(new long[]{
                1L,
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)).longValue(),
                3L});
        java.variadicLong(new long[]{1L});
        java.variadicLong(new long[]{box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L)).longValue()});
        java.variadicLong();
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray(new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> empty = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> full = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L)});
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray(empty));
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray(full));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicFloat(new float[]{
                (float)1.0,
                (float)box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor, .ceylon.language.Float.instance(2.0)).doubleValue(),
                (float)3.0});
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .ceylon.language.Tuple<.ceylon.language.Float, .ceylon.language.Float, .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Empty>>>(.ceylon.language.Float.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)})));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .ceylon.language.Tuple<.ceylon.language.Float, .ceylon.language.Float, .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Empty>>>(.ceylon.language.Float.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)}), 1.0));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .ceylon.language.Tuple<.ceylon.language.Float, .ceylon.language.Float, .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Empty>>>(.ceylon.language.Float.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)}), 1.0, box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor, .ceylon.language.Float.instance(2.0)).doubleValue()));
        java.variadicDouble(.com.redhat.ceylon.compiler.java.Util.toDoubleArray((.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicDouble(.com.redhat.ceylon.compiler.java.Util.toDoubleArray(new .ceylon.language.Tuple<.ceylon.language.Float, .ceylon.language.Float, .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Tuple<.ceylon.language.Float, ? extends .ceylon.language.Float, ? extends .ceylon.language.Empty>>>(.ceylon.language.Float.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)})));
        java.variadicJavaString("a", box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("b")).toString(), "c");
        java.variadicJavaString("a");
        java.variadicJavaString(box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("a")).toString());
        java.variadicJavaString();
        final .ceylon.language.String string = .ceylon.language.String.instance("a");
        java.variadicJavaString((
            let
            {
                .ceylon.language.String $ceylontmp2 = string;
            }
            returning $ceylontmp2 != null ? $ceylontmp2.toString() : null;
        ));
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray((.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray(new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>>(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("b")),
                .ceylon.language.String.instance("c")})));
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray(new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>>(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("b")),
                .ceylon.language.String.instance("c")}), "a", box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("b")).toString()));
        java.variadicCeylonString(.ceylon.language.String.instance("a"), box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("b")), .ceylon.language.String.instance("c"));
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp3$0 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp3$0, new .ceylon.language.String[(int)$ceylontmp3$0.getSize()]);
        ));
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp4$0 = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>>(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{
                        .ceylon.language.String.instance("a"),
                        box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("b")),
                        .ceylon.language.String.instance("c")});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp4$0, new .ceylon.language.String[(int)$ceylontmp4$0.getSize()]);
        ));
        final .ceylon.language.Sequential<? extends .ceylon.language.String> emptyString = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
        final .ceylon.language.Sequential<? extends .ceylon.language.String> fullString = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")});
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp5$0 = emptyString;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp5$0, new .ceylon.language.String[(int)$ceylontmp5$0.getSize()]);
        ));
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp6$0 = fullString;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp6$0, new .ceylon.language.String[(int)$ceylontmp6$0.getSize()]);
        ));
        java.variadicObject(.ceylon.language.String.instance("a"), box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("b")), .ceylon.language.Integer.instance(1L), box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp7$0 = .ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp7$0, new .java.lang.Object[(int)$ceylontmp7$0.getSize()]);
        ));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp8$0 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor), new .java.lang.Object[]{
                        .ceylon.language.String.instance("a"),
                        box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("b")),
                        .ceylon.language.Integer.instance(1L),
                        box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L))});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp8$0, new .java.lang.Object[(int)$ceylontmp8$0.getSize()]);
        ));
        java.variadicObject(new .java.lang.String("a"), new .java.lang.Integer((int)1L));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp9$0 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.Integer.class)), new .java.lang.Object[]{
                        new .java.lang.String("a"),
                        new .java.lang.Integer((int)1L)});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp9$0, new .java.lang.Object[(int)$ceylontmp9$0.getSize()]);
        ));
        java.<.ceylon.language.Integer>variadicT(.ceylon.language.Integer.instance(1L), box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)), .ceylon.language.Integer.instance(3L));
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp10$0 = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp10$0, new .ceylon.language.Integer[(int)$ceylontmp10$0.getSize()]);
        ));
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp11$0 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)),
                        .ceylon.language.Integer.instance(3L)});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp11$0, new .ceylon.language.Integer[(int)$ceylontmp11$0.getSize()]);
        ));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> sequence = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)});
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp12$0 = sequence;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp12$0, new .ceylon.language.Integer[(int)$ceylontmp12$0.getSize()]);
        ));
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp13$0 = sequence;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp13$0, new .ceylon.language.Integer[(int)$ceylontmp13$0.getSize() + 2], .ceylon.language.Integer.instance(1L), box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(2L)));
        ));
        java.<.ceylon.language.String>variadicT(.ceylon.language.String.instance("a"), box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance("b")), .ceylon.language.String.instance("c"));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.variadicMethods_.variadicMethods();
    }
}