package com.redhat.ceylon.compiler.java.test.structure.nesting.ici;

interface I$IC$ICI<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> {
    
    public .com.redhat.ceylon.compiler.java.test.structure.nesting.ici.I$IC$ICI<T, X> $com$redhat$ceylon$compiler$java$test$structure$nesting$ici$I$impl$IC$ICI$impl();
}
interface I<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> {
    
    public .com.redhat.ceylon.compiler.java.test.structure.nesting.ici.I$impl<T, X> $com$redhat$ceylon$compiler$java$test$structure$nesting$ici$I$impl();
    
    public abstract <U>T m1(final X b);
    
    public abstract <U>U m1$u(final X b);
    
    public abstract <U>T m1(final X b, final U u);
}
final class I$impl<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> {
    
    I$impl(.com.redhat.ceylon.compiler.java.test.structure.nesting.ici.I<? extends T, ? super X> $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.structure.nesting.ici.I<? extends T, ? super X> $this;
    
    public final <U>T m1(final X b) {
        return (
            let
            {
                U $ceylontmp$u$1 = m1$u(b);
            }
            returning $this.m1(b, $ceylontmp$u$1);
        );
    }
    
    public final <U>U m1$u(final X b) {
        return null;
    }
    
    class IC {
        
        IC() {
        }
        
        final class ICI$impl {
            
            ICI$impl(.com.redhat.ceylon.compiler.java.test.structure.nesting.ici.I$IC$ICI<? extends T, ? super X> $this) {
                this.$this = $this;
            }
            private final .com.redhat.ceylon.compiler.java.test.structure.nesting.ici.I$IC$ICI<? extends T, ? super X> $this;
            
            private T m2$priv() {
                return .com.redhat.ceylon.compiler.java.test.structure.nesting.ici.I$impl.this.$this.m1(null);
            }
        }
    }
}