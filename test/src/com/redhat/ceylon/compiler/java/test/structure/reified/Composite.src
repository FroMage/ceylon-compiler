package com.redhat.ceylon.compiler.java.test.structure.reified;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 5)
@.ceylon.language.Shared$annotation
@.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Key",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {}),
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Value",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
public interface CompositeInterface<Key, Value> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeInterface$impl<Key, Value> $com$redhat$ceylon$compiler$java$test$structure$reified$CompositeInterface$impl();
}
@.com.redhat.ceylon.compiler.java.metadata.Ignore
public final class CompositeInterface$impl<Key, Value> {
    
    public CompositeInterface$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedKey, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedValue, .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeInterface<Key, Value> $this) {
        this.$reifiedKey = $reifiedKey;
        this.$reifiedValue = $reifiedValue;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedKey;
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedValue;
    private final .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeInterface<Key, Value> $this;
    
    public void $refine(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedKey, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedValue) {
        this.$reifiedValue = $reifiedValue;
        this.$reifiedKey = $reifiedKey;
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 5)
@.ceylon.language.Shared$annotation
@.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.test.structure.reified::CompositeInterface<Key&ceylon.language::Number,Value|ceylon.language::Integer>"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Key",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {}),
        @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                value = "Value",
                variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                satisfies = {},
                caseTypes = {})})
public class CompositeClass<Key, Value> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeInterface<.java.lang.Object, .java.lang.Object> {
    
    public CompositeClass(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedKey, @.com.redhat.ceylon.compiler.java.metadata.Ignore
    .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedValue) {
        this.$reifiedKey = $reifiedKey;
        this.$reifiedValue = $reifiedValue;
        this.$com$redhat$ceylon$compiler$java$test$structure$reified$CompositeInterface$this = new .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeInterface$impl<.java.lang.Object, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection($reifiedKey, .ceylon.language.Number.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union($reifiedValue, .ceylon.language.Integer.$TypeDescriptor), (.com.redhat.ceylon.compiler.java.test.structure.reified.CompositeInterface)this);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedKey;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedValue;
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeInterface$impl<.java.lang.Object, .java.lang.Object> $com$redhat$ceylon$compiler$java$test$structure$reified$CompositeInterface$this;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeInterface$impl<.java.lang.Object, .java.lang.Object> $com$redhat$ceylon$compiler$java$test$structure$reified$CompositeInterface$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$reified$CompositeInterface$this;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeClass(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.CompositeClass.class, $reifiedKey, $reifiedValue);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 5)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class reifiedCompositeInstantiate_ {
    
    private reifiedCompositeInstantiate_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Key",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {}),
            @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Value",
                    variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
    static <Key, Value>void reifiedCompositeInstantiate(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedKey, @.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedValue) {
        final .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeClass c = new .com.redhat.ceylon.compiler.java.test.structure.reified.CompositeClass(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection($reifiedKey, .ceylon.language.Number.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union($reifiedValue, .ceylon.language.Integer.$TypeDescriptor));
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.structure.reified.reifiedCompositeInstantiate_.reifiedCompositeInstantiate(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
}