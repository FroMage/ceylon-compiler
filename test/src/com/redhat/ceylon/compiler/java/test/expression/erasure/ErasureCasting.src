package com.redhat.ceylon.compiler.java.test.expression.erasure;

interface EC_A {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_A$impl();
    
    public abstract long $int();
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A.class);
}
final class EC_A$impl {
    
    EC_A$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A $this;
}
interface EC_B {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_B$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_B$impl();
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_B.class);
}
final class EC_B$impl {
    
    EC_B$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_B $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_B $this;
}
interface EC_C {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_C$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_C$impl();
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_C.class);
}
final class EC_C$impl {
    
    EC_C$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_C $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_C $this;
}
interface EC_ABC extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_B, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_C {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ABC$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ABC$impl();
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ABC.class);
}
final class EC_ABC$impl {
    
    EC_ABC$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ABC $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ABC $this;
}
interface EC_Parameterised<T> {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised$impl<T> $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_Parameterised$impl();
    
    public abstract T t();
}
final class EC_Parameterised$impl<T> {
    
    EC_Parameterised$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends T> $this) {
        this.$reifiedT = $reifiedT;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT;
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends T> $this;
    
    public void $refine(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT) {
        this.$reifiedT = $reifiedT;
    }
}
interface EC_ParameterisedSelfBound<T> {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedSelfBound$impl<T> $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ParameterisedSelfBound$impl();
    
    public abstract T t();
}
final class EC_ParameterisedSelfBound$impl<T> {
    
    EC_ParameterisedSelfBound$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedSelfBound<? extends T> $this) {
        this.$reifiedT = $reifiedT;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT;
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedSelfBound<? extends T> $this;
    
    public void $refine(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT) {
        this.$reifiedT = $reifiedT;
    }
}
interface EC_DoubleParameters<T1, T2> extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<.java.lang.Object> {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_DoubleParameters$impl<T1, T2> $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_DoubleParameters$impl();
}
final class EC_DoubleParameters$impl<T1, T2> {
    
    EC_DoubleParameters$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT1, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT2, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_DoubleParameters<T1, T2> $this) {
        this.$reifiedT1 = $reifiedT1;
        this.$reifiedT2 = $reifiedT2;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT1;
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT2;
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_DoubleParameters<T1, T2> $this;
    
    public void $refine(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT2) {
        this.$reifiedT2 = $reifiedT2;
        this.$reifiedT1 = $reifiedT1;
    }
}
final class erasureCasting_ {
    
    private erasureCasting_() {
    }
    
    static void erasureCasting(final .java.lang.Object tripleIntersectionParam, final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised rawParam, final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .java.lang.Object>> hasRawParam, final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_DoubleParameters<.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A> hasLostParameter, final .ceylon.language.Callable erasedReturnCallable, final .ceylon.language.Callable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A> erasedParamCallable, final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .java.lang.Object> hasErasedParameter, final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A a, final .ceylon.language.Sequence<? extends .ceylon.language.String> nonEmptyStringSequence, final .ceylon.language.Sequential erasedSequence) {
        final .java.lang.Object doubleIntersectionAttr = tripleIntersectionParam;
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A aAttr = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A)tripleIntersectionParam;
        final .java.lang.Object n = null;
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A aAttrOrNull = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A)n;
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A aAttrOrNullValue = null;
        final .ceylon.language.Callable<? extends .java.lang.Object> callable = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A>("EC_A(EC_A)"){
            
            @.java.lang.Override
            public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A $call(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A a = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A)$param$0;
                return a;
            }
        };
        final .ceylon.language.Callable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A> ecACallable = (.ceylon.language.Callable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A>)erasedReturnCallable;
        final .ceylon.language.Callable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A> ecABCCallable = erasedParamCallable;
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised parameterisedRawAttr = rawParam;
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A> parameterisedAttr = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A>)rawParam;
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A>> parameterisedParameterisedAttr = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A>>)(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised)hasRawParam;
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A aAttrFromNothing = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A).ceylon.language.nothing_.getNothing$();
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> sequence = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> sequence2 = (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp0 = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)(false ? .ceylon.language.empty_.getEmpty$() : null);
            }
            returning $ceylontmp0 != null ? $ceylontmp0 : new .ceylon.language.Range<.ceylon.language.Integer>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Range.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(2L));
        );
        .com.redhat.ceylon.compiler.java.test.expression.erasure.ec_boundsOnElement_.ec_boundsOnElement(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised).ceylon.language.nothing_.getNothing$());
        .com.redhat.ceylon.compiler.java.test.expression.erasure.ec_boundsOnElement2_.ec_boundsOnElement2(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$());
        .com.redhat.ceylon.compiler.java.test.expression.erasure.ec_boundsOnElement3_.ec_boundsOnElement3(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised)hasErasedParameter);
        final .ceylon.language.Callable<? extends .java.lang.Object> callableToBoundsOnElement3 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>("Anything(EC_Parameterised<Nothing>)"){
            
            @.java.lang.Override
            public .java.lang.Object $call(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised $$elements = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .java.lang.Object>)(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised)$param$0;
                return (
                    let
                    {
                        .com.redhat.ceylon.compiler.java.test.expression.erasure.ec_boundsOnElement3_.ec_boundsOnElement3(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, $$elements);
                    }
                    returning null;
                );
            }
        };
        .com.redhat.ceylon.compiler.java.test.expression.erasure.ec_boundsOnElement4_.<.ceylon.language.Integer, .ceylon.language.Empty>ec_boundsOnElement4(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$());
        .com.redhat.ceylon.compiler.java.test.expression.erasure.ec_boundsOnElement5_.ec_boundsOnElement5(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_B.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_C.$TypeDescriptor), (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A)tripleIntersectionParam);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A> lostParamAttr = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A>)(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised)hasLostParameter;
        final .ceylon.language.Sequential<? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> sequentialSequentialString = (.ceylon.language.Sequential<? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Sequential).com.redhat.ceylon.compiler.java.test.expression.erasure.ec_methodWithErasedBounds_.<.ceylon.language.String>ec_methodWithErasedBounds(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance(""));
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .ceylon.language.String>> parameterisedParameterisedString = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .ceylon.language.String>>)(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised).com.redhat.ceylon.compiler.java.test.expression.erasure.ec_methodWithErasedBounds2_.<.ceylon.language.String>ec_methodWithErasedBounds2(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.instance(""));
        if (.com.redhat.ceylon.compiler.java.Util.isReified(a, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedSelfBound.class, .ceylon.language.Anything.$TypeDescriptor))) {
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedSelfBound<? extends .java.lang.Object>)(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedSelfBound)a).t();
        }
        if (.com.redhat.ceylon.compiler.java.Util.isReified(a, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised.class, .ceylon.language.Anything.$TypeDescriptor))) {
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .java.lang.Object>)(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised)a).t();
        }
        final .ceylon.language.Sequential rawSequence = .ceylon.language.empty_.getEmpty$();
        .ceylon.language.Sequential $rawSequence$6;
        if (($rawSequence$6 = (.ceylon.language.Sequential<? extends .java.lang.Object>)(.ceylon.language.Sequential)rawSequence) instanceof .ceylon.language.Sequence) {
            final .ceylon.language.Sequence $rawSequence$7 = (.ceylon.language.Sequence)$rawSequence$6;
        }
        final boolean bool = ((.ceylon.language.Boolean).ceylon.language.nothing_.getNothing$()).booleanValue();
        .ceylon.language.String $nonOptionalString$9;
        if (($nonOptionalString$9 = (.ceylon.language.String).com.redhat.ceylon.compiler.java.test.expression.erasure.ec_TOrOptionalString_.<.ceylon.language.String>ec_TOrOptionalString(.ceylon.language.String.$TypeDescriptor)) != null) {
            final .java.lang.String $nonOptionalString$10 = $nonOptionalString$9.toString();
        }
        final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedTOrString<.ceylon.language.String>> sequenceOfErasedMethod = (.ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedTOrString<.ceylon.language.String>>)(.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequenceOfStrings = (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedTOrString<.ceylon.language.String>, ? extends .java.lang.Object> $spread$11$iterable = sequenceOfErasedMethod;
                .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$11$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor);
                .java.lang.Object $spread$11$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedTOrString<.ceylon.language.String>> $spread$11$iterator = $spread$11$iterable.getIterator(); !(($spread$11$iteration = $spread$11$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedTOrString<.ceylon.language.String> $spread$11$element = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedTOrString<.ceylon.language.String>)$spread$11$iteration;
                    $spread$11$sequenceBuilder.append((.ceylon.language.String)$spread$11$element.t());
                }
            }
            returning $spread$11$sequenceBuilder.getSequence();
        );
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> nonEmptyIntegerSequence = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)(
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$12$iterable = (.ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object>)(.ceylon.language.Iterable)nonEmptyStringSequence;
                .ceylon.language.SequenceBuilder<.ceylon.language.Integer> $spread$12$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor);
                .java.lang.Object $spread$12$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$12$iterator = $spread$12$iterable.getIterator(); !(($spread$12$iteration = $spread$12$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$12$element = (.ceylon.language.String)$spread$12$iteration;
                    $spread$12$sequenceBuilder.append(.ceylon.language.Integer.instance($spread$12$element.getSize()));
                }
            }
            returning $spread$12$sequenceBuilder.getSequence();
        );
        .java.lang.Object $elem$13;
        for (.ceylon.language.Iterator<? extends .java.lang.Object> $erasedValue$iter$14 = erasedSequence.getIterator(); !(($elem$13 = $erasedValue$iter$14.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object erasedValue = (.java.lang.Object)$elem$13;
        }
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> sequenceOfInts = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)(
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A, ? extends .java.lang.Object> $spread$15$iterable = (.ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A, ? extends .java.lang.Object>)(.ceylon.language.Iterable)erasedSequence;
                .ceylon.language.SequenceBuilder<.ceylon.language.Integer> $spread$15$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor);
                .java.lang.Object $spread$15$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A> $spread$15$iterator = $spread$15$iterable.getIterator(); !(($spread$15$iteration = $spread$15$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A $spread$15$element = (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A)$spread$15$iteration;
                    $spread$15$sequenceBuilder.append(.ceylon.language.Integer.instance(((.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A)$spread$15$element).$int()));
                }
            }
            returning $spread$15$sequenceBuilder.getSequence();
        );
        final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.Singleton<? extends .ceylon.language.Character>, ? extends .ceylon.language.Singleton<? extends .ceylon.language.Character>, ? extends .ceylon.language.Empty>>> t = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor)), .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor)), .ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .ceylon.language.Empty.$TypeDescriptor)), .ceylon.language.Integer.instance(1L), new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor)), .ceylon.language.String.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.String.instance("2"), new .ceylon.language.Tuple<.ceylon.language.Singleton<? extends .ceylon.language.Character>, .ceylon.language.Singleton<? extends .ceylon.language.Character>, .ceylon.language.Empty>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Singleton.class, .ceylon.language.Character.$TypeDescriptor), .ceylon.language.Empty.$TypeDescriptor, new .ceylon.language.Singleton<.ceylon.language.Character>(.ceylon.language.Character.$TypeDescriptor, .ceylon.language.Character.instance(51)), .ceylon.language.empty_.getEmpty$())));
        final .ceylon.language.Sequential t2 = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .java.lang.Object>>)(.ceylon.language.Ranged)t).span(.ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(1L));
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Tuple<.java.lang.Object, ? extends .ceylon.language.Integer> nonRawTuple = new .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor), .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L));
        final long nonRawTupleFirst = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Tuple<.java.lang.Object, ? extends .ceylon.language.Integer>)(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Tuple)nonRawTuple).getFirst().longValue();
        final int unboxedInteger = ((.ceylon.language.Sequence<? extends .ceylon.language.Character>).ceylon.language.String.<.ceylon.language.Character>withLeading(.ceylon.language.Character.$TypeDescriptor, "abc", .ceylon.language.Character.instance(100))).getFirst().intValue();
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> nonEmptySequence = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer> {
                    
                    $ComprehensionIterator$() {
                        super(.ceylon.language.Integer.$TypeDescriptor);
                        iter$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Range.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).getIterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0;
                    private .ceylon.language.Integer c;
                    private boolean c$exhausted;
                    
                    private final boolean c() {
                        final .java.lang.Object $ceylontmpitem16 = iter$0.next();
                        c$exhausted = $ceylontmpitem16 == .ceylon.language.finished_.getFinished$();
                        if (c$exhausted) {
                            return false;
                        } else {
                            c = (.ceylon.language.Integer)$ceylontmpitem16;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        return this.c() ? c : .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        }.getSequence();
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> integerSequential = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer> {
                    
                    $ComprehensionIterator$() {
                        super(.ceylon.language.Integer.$TypeDescriptor);
                        iter$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Range.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).getIterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0;
                    private .ceylon.language.Integer c;
                    private boolean c$exhausted;
                    
                    private final boolean c() {
                        final .java.lang.Object $ceylontmpitem17 = iter$0.next();
                        c$exhausted = $ceylontmpitem17 == .ceylon.language.finished_.getFinished$();
                        if (c$exhausted) {
                            return false;
                        } else {
                            c = (.ceylon.language.Integer)$ceylontmpitem17;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        return this.c() ? c : .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        }.getSequence();
        final .ceylon.language.Tuple<.ceylon.language.Sequential<? extends .java.lang.Object>, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>>, ? extends .ceylon.language.Tuple<.ceylon.language.Sequential<? extends .ceylon.language.String>, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>, ? extends .ceylon.language.Empty>> tupleOfSequentialSomething = (.ceylon.language.Tuple).ceylon.language.nothing_.getNothing$();
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequenceOfStrings2 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .java.lang.Object>>)(.ceylon.language.Correspondence)tupleOfSequentialSomething).get(.ceylon.language.Integer.instance(1L));
        final .ceylon.language.Tuple<.ceylon.language.Sequential<? extends .ceylon.language.String>, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>, ? extends .ceylon.language.Empty> sequenceOfSequenceOfStrings = (.ceylon.language.Tuple<.ceylon.language.Sequential<? extends .ceylon.language.String>, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>, ? extends .ceylon.language.Empty>)(.ceylon.language.Tuple).com.redhat.ceylon.compiler.java.Util.tuple_spanFrom((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Sequential<? extends .java.lang.Object>>>)(.ceylon.language.Ranged)tupleOfSequentialSomething, .ceylon.language.Integer.instance(1L));
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .java.lang.Object>> callableOfCallable = (.ceylon.language.Callable).ceylon.language.nothing_.getNothing$();
        final .ceylon.language.Callable<? extends .java.lang.Object> callableResult = .com.redhat.ceylon.compiler.java.test.expression.erasure.ec_callableWithBonds_.ec_callableWithBonds(.ceylon.language.Anything.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, callableOfCallable).$call();
        final .java.lang.Object n1 = .ceylon.language.min_.min(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .ceylon.language.Null.$TypeDescriptor, (.ceylon.language.Iterable).ceylon.language.empty_.getEmpty$());
        final .java.lang.Object n2 = (
            let
            {
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $arg$18$reified$0 = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType;
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $arg$18$reified$1 = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType;
                .ceylon.language.Iterable $arg$18$0 = (.ceylon.language.Iterable).ceylon.language.empty_.getEmpty$();
            }
            returning .ceylon.language.min_.min($arg$18$reified$0, $arg$18$reified$1, $arg$18$0);
        );
    }
}
final class valueOrNada_ {
    
    private valueOrNada_() {
    }
    
    static <Value, Nada>void valueOrNada(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedValue, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedNada, final .java.lang.Object valueOrNada) {
        .java.lang.Object $valueOrNada$20;
        if (($valueOrNada$20 = valueOrNada) != null) {
            final Value $valueOrNada$21 = (Value)$valueOrNada$20;
        }
    }
}
interface EC_ParameterisedTOrString<T> {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedTOrString$impl<T> $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ParameterisedTOrString$impl();
    
    public abstract .java.lang.Object t();
}
final class EC_ParameterisedTOrString$impl<T> {
    
    EC_ParameterisedTOrString$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedTOrString<T> $this) {
        this.$reifiedT = $reifiedT;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT;
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ParameterisedTOrString<T> $this;
    
    public void $refine(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT) {
        this.$reifiedT = $reifiedT;
    }
}
final class ec_TOrOptionalString_ {
    
    private ec_TOrOptionalString_() {
    }
    
    static <T>.java.lang.Object ec_TOrOptionalString(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.erasure.ec_TOrOptionalString_.ec_TOrOptionalString(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
}
final class ec_boundsOnElement_ {
    
    private ec_boundsOnElement_() {
    }
    
    static <Element extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends Element>>void ec_boundsOnElement(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, final Element elements) {
    }
}
final class ec_boundsOnElement2_ {
    
    private ec_boundsOnElement2_() {
    }
    
    static <Element extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A>void ec_boundsOnElement2(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, final .ceylon.language.Sequential<? extends Element> elements) {
    }
}
final class ec_boundsOnElement3_ {
    
    private ec_boundsOnElement3_() {
    }
    
    static <Element extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A>void ec_boundsOnElement3(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends Element> elements) {
    }
}
final class ec_boundsOnElement4_ {
    
    private ec_boundsOnElement4_() {
    }
    
    static <Element, Rest>void ec_boundsOnElement4(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedRest, final .ceylon.language.Sequential<? extends Element> elements) {
    }
}
final class ec_boundsOnElement5_ {
    
    private ec_boundsOnElement5_() {
    }
    
    static <Element extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_A>void ec_boundsOnElement5(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, final Element t) {
    }
}
final class ec_methodWithErasedBounds_ {
    
    private ec_methodWithErasedBounds_() {
    }
    
    static <Element>.ceylon.language.Sequential<? extends .ceylon.language.Sequential<? extends .java.lang.Object>> ec_methodWithErasedBounds(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, final Element data) {
        return (.ceylon.language.Sequential).ceylon.language.nothing_.getNothing$();
    }
}
final class ec_methodWithErasedBounds2_ {
    
    private ec_methodWithErasedBounds2_() {
    }
    
    static <Element>.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised<? extends .java.lang.Object>> ec_methodWithErasedBounds2(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, final Element data) {
        return (.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Parameterised).ceylon.language.nothing_.getNothing$();
    }
}
interface EC_ErasedMember<Element, Absent> {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, Absent> $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$impl();
    
    public .java.lang.Object getAttr();
    
    public .java.lang.Object m();
    
    public .java.lang.Object defaultedParams();
    
    public abstract .java.lang.Object defaultedParams$p();
    
    public .java.lang.Object defaultedParams(final .java.lang.Object p);
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, Absent>.Class Class$new(final .java.lang.Object p);
    
    public abstract .java.lang.Object $Class$init$p();
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, Absent>.Class Class$new();
}
final class EC_ErasedMember$impl<Element, Absent> {
    
    EC_ErasedMember$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedAbsent, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember<Element, Absent> $this) {
        this.$reifiedElement = $reifiedElement;
        this.$reifiedAbsent = $reifiedAbsent;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement;
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedAbsent;
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember<Element, Absent> $this;
    
    public void $refine(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedAbsent) {
        this.$reifiedAbsent = $reifiedAbsent;
        this.$reifiedElement = $reifiedElement;
    }
    
    public final .java.lang.Object getAttr() {
        return .ceylon.language.nothing_.getNothing$();
    }
    
    public .java.lang.Object m() {
        return .ceylon.language.nothing_.getNothing$();
    }
    
    public final .java.lang.Object defaultedParams() {
        return (
            let
            {
                .java.lang.Object $ceylontmp$p$23 = defaultedParams$p();
            }
            returning defaultedParams($ceylontmp$p$23);
        );
    }
    
    public final .java.lang.Object defaultedParams$p() {
        return .ceylon.language.nothing_.getNothing$();
    }
    
    public .java.lang.Object defaultedParams(final .java.lang.Object p) {
        return null;
    }
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, Absent>.Class Class$new(final .java.lang.Object p) {
        return new Class(p);
    }
    
    public final .java.lang.Object $Class$init$p() {
        return .ceylon.language.nothing_.getNothing$();
    }
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, Absent>.Class Class$new() {
        return (
            let
            {
                .java.lang.Object $ceylontmp$p$31 = $Class$init$p();
            }
            returning new Class($ceylontmp$p$31);
        );
    }
    
    public class Class implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
        
        protected Class(final .java.lang.Object p) {
        }
        
        @.java.lang.Override
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember.class, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl.this.$reifiedElement, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl.this.$reifiedAbsent), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl.Class.class));
        }
    }
}
class EC_ErasedMemberImpl<Element> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember<Element, .java.lang.Object> {
    
    EC_ErasedMemberImpl(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement) {
        this.$reifiedElement = $reifiedElement;
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, .java.lang.Object>($reifiedElement, .ceylon.language.Null.$TypeDescriptor, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement;
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, .java.lang.Object> $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, .java.lang.Object> $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this;
    }
    
    @.java.lang.Override
    public Element getAttr() {
        return (Element)$com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this.getAttr();
    }
    
    @.java.lang.Override
    public Element m() {
        return (Element)$com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this.m();
    }
    
    @.java.lang.Override
    public final Element defaultedParams$p() {
        return (Element)$com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this.defaultedParams$p();
    }
    
    @.java.lang.Override
    public final .java.lang.Object defaultedParams() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this.defaultedParams();
    }
    
    @.java.lang.Override
    public .java.lang.Object defaultedParams(final .java.lang.Object p) {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this.defaultedParams(p);
    }
    
    @.java.lang.Override
    public final Element $Class$init$p() {
        return (Element)$com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this.$Class$init$p();
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, .java.lang.Object>.Class Class$new() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this.Class$new();
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMember$impl<Element, .java.lang.Object>.Class Class$new(final .java.lang.Object p) {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$EC_ErasedMember$this.Class$new(p);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMemberImpl(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_ErasedMemberImpl.class, $reifiedElement);
    }
}
class EC_Tuple<Element, First extends Element> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    EC_Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedFirst, final First first) {
        this.$reifiedElement = $reifiedElement;
        this.$reifiedFirst = $reifiedFirst;
        this.first = first;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedElement;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedFirst;
    private final First first;
    
    public final First getFirst() {
        return first;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EC_Tuple.class, $reifiedElement, $reifiedFirst);
    }
}
final class ec_callableWithBonds_ {
    
    private ec_callableWithBonds_() {
    }
    
    static <Result, FirstArgs extends .ceylon.language.Sequential<? extends .java.lang.Object>, SecondArgs extends .ceylon.language.Sequential<? extends .java.lang.Object>>.ceylon.language.Callable<? extends .ceylon.language.Callable<? extends Result>> ec_callableWithBonds(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedFirstArgs, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedSecondArgs, final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends Result>> c) {
        return (.ceylon.language.Callable).ceylon.language.nothing_.getNothing$();
    }
}