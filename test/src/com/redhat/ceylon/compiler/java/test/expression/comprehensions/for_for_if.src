package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

final class forForIf_ {
    
    private forForIf_() {
    }
    private static final .ceylon.language.Sequential<? extends .ceylon.language.Integer>[] value;
    static {
        value = new .ceylon.language.Sequential[]{new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer>(){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> getIterator() {
                return new .ceylon.language.Iterator<.ceylon.language.Integer>(){
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(5L)).getIterator();
                    private .ceylon.language.Integer y;
                    private boolean y$exhausted;
                    
                    private final boolean y() {
                        final .java.lang.Object $ceylontmpitem0 = iter$0.next();
                        y$exhausted = $ceylontmpitem0 == .ceylon.language.exhausted_.getExhausted$();
                        if (y$exhausted) {
                            return false;
                        } else {
                            y = (.ceylon.language.Integer)$ceylontmpitem0;
                        }
                        return true;
                    }
                    private .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$1;
                    
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$1() {
                        if (iter$1 == null) this.y();
                        iter$1 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(5L)).getIterator();
                        return iter$1;
                    }
                    private .ceylon.language.Integer x;
                    private boolean x$exhausted;
                    
                    private final boolean x() {
                        if (iter$1 == null) this.iter$1();
                        final .java.lang.Object $ceylontmpitem1 = iter$1.next();
                        x$exhausted = $ceylontmpitem1 == .ceylon.language.exhausted_.getExhausted$();
                        if (x$exhausted) {
                            if (this.y()) {
                                iter$1 = this.iter$1();
                                return this.x();
                            }
                            return false;
                        } else {
                            x = (.ceylon.language.Integer)$ceylontmpitem1;
                        }
                        return true;
                    }
                    
                    private final boolean next2() {
                        while (true) {
                            if (!this.x()) break;
                            if (x.compare(y).largerThan()) {
                                break;
                            }
                        }
                        return !x$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        return this.next2() ? x.times(y) : .ceylon.language.exhausted_.getExhausted$();
                    }
                };
            }
        }.getSequence()};
    }
    
    static .ceylon.language.Sequential<? extends .ceylon.language.Integer> getForForIf$() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.RecursiveInitializationException();
        }
    }
}