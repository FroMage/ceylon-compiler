package com.redhat.ceylon.compiler.java.test.expression.operator;

final class spread_ {
    
    private spread_() {
    }
    
    static void spread(final .ceylon.language.Sequence<? extends .ceylon.language.String> seq, final .java.lang.String x) {
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> ini1 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)(
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$0$iterable = seq;
                .ceylon.language.SequenceBuilder<.ceylon.language.Integer> $spread$0$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor);
                .java.lang.Object $spread$0$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$0$iterator = $spread$0$iterable.iterator(); !(($spread$0$iteration = $spread$0$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$0$element = (.ceylon.language.String)$spread$0$iteration;
                    $spread$0$sequenceBuilder.append(.ceylon.language.Integer.instance($spread$0$element.getSize()));
                }
            }
            returning $spread$0$sequenceBuilder.getSequence();
        );
        final .ceylon.language.Sequence<? extends .ceylon.language.String> ini2 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)(
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$1$iterable = seq;
                .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$1$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor);
                .java.lang.String $spread$1$arg$0 = x;
                .java.lang.String $spread$1$arg$1 = x;
                .java.lang.Object $spread$1$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$1$iterator = $spread$1$iterable.iterator(); !(($spread$1$iteration = $spread$1$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$1$element = (.ceylon.language.String)$spread$1$iteration;
                    $spread$1$sequenceBuilder.append(.ceylon.language.String.instance($spread$1$element.replace($spread$1$arg$0, $spread$1$arg$1)));
                }
            }
            returning $spread$1$sequenceBuilder.getSequence();
        );
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> seq2 = seq;
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ini3 = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$2$iterable = seq2;
                .ceylon.language.SequenceBuilder<.ceylon.language.Integer> $spread$2$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor);
                .java.lang.Object $spread$2$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$2$iterator = $spread$2$iterable.iterator(); !(($spread$2$iteration = $spread$2$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$2$element = (.ceylon.language.String)$spread$2$iteration;
                    $spread$2$sequenceBuilder.append(.ceylon.language.Integer.instance($spread$2$element.getSize()));
                }
            }
            returning $spread$2$sequenceBuilder.getSequence();
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.String> ini4 = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$3$iterable = seq2;
                .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$3$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor);
                .java.lang.String $spread$3$arg$0 = x;
                .java.lang.String $spread$3$arg$1 = x;
                .java.lang.Object $spread$3$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$3$iterator = $spread$3$iterable.iterator(); !(($spread$3$iteration = $spread$3$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$3$element = (.ceylon.language.String)$spread$3$iteration;
                    $spread$3$sequenceBuilder.append(.ceylon.language.String.instance($spread$3$element.replace($spread$3$arg$0, $spread$3$arg$1)));
                }
            }
            returning $spread$3$sequenceBuilder.getSequence();
        );
        final .ceylon.language.List<? extends .ceylon.language.String> seq3 = seq;
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ini5 = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$4$iterable = seq3;
                .ceylon.language.SequenceBuilder<.ceylon.language.Integer> $spread$4$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor);
                .java.lang.Object $spread$4$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$4$iterator = $spread$4$iterable.iterator(); !(($spread$4$iteration = $spread$4$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$4$element = (.ceylon.language.String)$spread$4$iteration;
                    $spread$4$sequenceBuilder.append(.ceylon.language.Integer.instance($spread$4$element.getSize()));
                }
            }
            returning $spread$4$sequenceBuilder.getSequence();
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.String> ini6 = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $spread$5$iterable = seq3;
                .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$5$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor);
                .java.lang.String $spread$5$arg$0 = x;
                .java.lang.String $spread$5$arg$1 = x;
                .java.lang.Object $spread$5$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$5$iterator = $spread$5$iterable.iterator(); !(($spread$5$iteration = $spread$5$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$5$element = (.ceylon.language.String)$spread$5$iteration;
                    $spread$5$sequenceBuilder.append(.ceylon.language.String.instance($spread$5$element.replace($spread$5$arg$0, $spread$5$arg$1)));
                }
            }
            returning $spread$5$sequenceBuilder.getSequence();
        );
    }
}