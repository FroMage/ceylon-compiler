package com.redhat.ceylon.compiler.java.test.expression.invoke;

final class spreadArguments_ {
    
    private spreadArguments_() {
    }
    
    static void spreadArguments(final long i, final .java.lang.String s) {
    }
}
class SpreadArguments<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SpreadArguments(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final long i, final T s) {
        this.$reifiedT = $reifiedT;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT;
    
    public final void m(final long i, final T s) {
    }
    
    public final void m2(final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends T> $ceylontmp$s$0 = m2$s(i);
                m2$(i, $ceylontmp$s$0);
            }
            returning null;
        );
    }
    
    public final .ceylon.language.Sequential<? extends T> m2$s(final long i) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private void m2$(final long i, final .ceylon.language.Sequential<? extends T> s) {
    }
    
    public final void m2(final long i, final .ceylon.language.Sequential<? extends T> s) {
        (
            let
            {
                m2$(i, s);
            }
            returning null;
        );
    }
    
    private final void spreadTuple$priv(final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>> args) {
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>> $tuple$1 = args;
                .com.redhat.ceylon.compiler.java.test.expression.invoke.spreadArguments_.spreadArguments(((.ceylon.language.Integer)$tuple$1.get(.ceylon.language.Integer.instance(0L))).longValue(), ((.ceylon.language.String)$tuple$1.get(.ceylon.language.Integer.instance(1L))).toString());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty> $tuple$3 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>)(.ceylon.language.Tuple)args).getRest();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.spreadArguments_.spreadArguments(0L, ((.ceylon.language.String)$tuple$3.get(.ceylon.language.Integer.instance(0L))).toString());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>> $tuple$5 = args;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, ((.ceylon.language.Integer)$tuple$5.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.String)$tuple$5.get(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty> $tuple$7 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>)(.ceylon.language.Tuple)args).getRest();
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, 0L, (.ceylon.language.String)$tuple$7.get(.ceylon.language.Integer.instance(0L)));
        );
        final .ceylon.language.Callable<? extends .java.lang.Object> f = (.ceylon.language.Callable).ceylon.language.nothing_.$get();
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>> $tuple$9 = args;
            }
            returning f.$call((.ceylon.language.Integer)$tuple$9.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.String)$tuple$9.get(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty> $tuple$11 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>)(.ceylon.language.Tuple)args).getRest();
            }
            returning f.$call(.ceylon.language.Integer.instance(1L), (.ceylon.language.String)$tuple$11.get(.ceylon.language.Integer.instance(0L)));
        );
        final .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> sa = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments).ceylon.language.nothing_.$get();
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty> $tuple$13 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(0L));
                sa.m2(((.ceylon.language.Integer)$tuple$13.get(.ceylon.language.Integer.instance(0L))).longValue());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>> $tuple$15 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor), .ceylon.language.Integer.instance(0L), .ceylon.language.String.instance("hello"));
                sa.m2(((.ceylon.language.Integer)$tuple$15.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$tuple$15.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>> $tuple$17 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor), .ceylon.language.Integer.instance(0L), .ceylon.language.String.instance("hello"), .ceylon.language.String.instance("world"));
                sa.m2(((.ceylon.language.Integer)$tuple$17.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$tuple$17.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.String>>> t = (.ceylon.language.Tuple).ceylon.language.nothing_.$get();
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.String>>> $tuple$19 = t;
                sa.m2(((.ceylon.language.Integer)$tuple$19.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$tuple$19.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
    }
    
    private final void spreadTupleWithSpreadOp$priv(final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>> args) {
        final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iter = (.ceylon.language.Iterable).ceylon.language.nothing_.$get();
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> $spread$21$iterable = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> $spread$21$sequenceBuilder = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>> $tuple$22 = args;
                long $spread$21$arg$0 = ((.ceylon.language.Integer)$tuple$22.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.String $spread$21$arg$1 = (.ceylon.language.String)$tuple$22.get(.ceylon.language.Integer.instance(1L));
                .java.lang.Object $spread$21$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> $spread$21$iterator = $spread$21$iterable.iterator(); !(($spread$21$iteration = $spread$21$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> $spread$21$element = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)$spread$21$iteration;
                    $spread$21$sequenceBuilder.append((
                        let
                        {
                            $spread$21$element.m($spread$21$arg$0, $spread$21$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning $spread$21$sequenceBuilder.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> $spread$23$iterable = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> $spread$23$sequenceBuilder = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor);
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty> $tuple$24 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>)(.ceylon.language.Tuple)args).getRest();
                long $spread$23$arg$0 = 0L;
                .ceylon.language.String $spread$23$arg$1 = (.ceylon.language.String)$tuple$24.get(.ceylon.language.Integer.instance(0L));
                .java.lang.Object $spread$23$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> $spread$23$iterator = $spread$23$iterable.iterator(); !(($spread$23$iteration = $spread$23$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> $spread$23$element = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)$spread$23$iteration;
                    $spread$23$sequenceBuilder.append((
                        let
                        {
                            $spread$23$element.m($spread$23$arg$0, $spread$23$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning $spread$23$sequenceBuilder.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> $spread$25$iterable = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> $spread$25$sequenceBuilder = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor);
                long $spread$25$arg$0 = 0L;
                .ceylon.language.Sequential<? extends .ceylon.language.String> $spread$25$arg$1 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>)(.ceylon.language.Tuple)args).getRest();
                .java.lang.Object $spread$25$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> $spread$25$iterator = $spread$25$iterable.iterator(); !(($spread$25$iteration = $spread$25$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> $spread$25$element = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)$spread$25$iteration;
                    $spread$25$sequenceBuilder.append((
                        let
                        {
                            $spread$25$element.m2($spread$25$arg$0, $spread$25$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning $spread$25$sequenceBuilder.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> $spread$26$iterable = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> $spread$26$sequenceBuilder = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor);
                long $spread$26$arg$0 = 0L;
                .ceylon.language.Sequential<? extends .ceylon.language.String> $spread$26$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>)(.ceylon.language.Tuple)args).getRest().getRest();
                .java.lang.Object $spread$26$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> $spread$26$iterator = $spread$26$iterable.iterator(); !(($spread$26$iteration = $spread$26$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> $spread$26$element = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)$spread$26$iteration;
                    $spread$26$sequenceBuilder.append((
                        let
                        {
                            $spread$26$element.m2($spread$26$arg$0, $spread$26$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning $spread$26$sequenceBuilder.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> $spread$27$iterable = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> $spread$27$sequenceBuilder = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor);
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty> $tuple$28 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(0L));
                long $spread$27$arg$0 = ((.ceylon.language.Integer)$tuple$28.get(.ceylon.language.Integer.instance(0L))).longValue();
                .java.lang.Object $spread$27$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> $spread$27$iterator = $spread$27$iterable.iterator(); !(($spread$27$iteration = $spread$27$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> $spread$27$element = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)$spread$27$iteration;
                    $spread$27$sequenceBuilder.append((
                        let
                        {
                            $spread$27$element.m2($spread$27$arg$0);
                        }
                        returning null;
                    ));
                }
            }
            returning $spread$27$sequenceBuilder.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> $spread$29$iterable = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> $spread$29$sequenceBuilder = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>> $tuple$30 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor), .ceylon.language.Integer.instance(0L), .ceylon.language.String.instance("hello"));
                long $spread$29$arg$0 = ((.ceylon.language.Integer)$tuple$30.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequential<? extends .ceylon.language.String> $spread$29$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$tuple$30.spanFrom(.ceylon.language.Integer.instance(1L));
                .java.lang.Object $spread$29$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> $spread$29$iterator = $spread$29$iterable.iterator(); !(($spread$29$iteration = $spread$29$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> $spread$29$element = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)$spread$29$iteration;
                    $spread$29$sequenceBuilder.append((
                        let
                        {
                            $spread$29$element.m2($spread$29$arg$0, $spread$29$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning $spread$29$sequenceBuilder.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> $spread$31$iterable = iter;
                .ceylon.language.SequenceBuilder<.java.lang.Object> $spread$31$sequenceBuilder = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>> $tuple$32 = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor), .ceylon.language.Integer.instance(0L), .ceylon.language.String.instance("hello"), .ceylon.language.String.instance("world"));
                long $spread$31$arg$0 = ((.ceylon.language.Integer)$tuple$32.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequential<? extends .ceylon.language.String> $spread$31$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$tuple$32.spanFrom(.ceylon.language.Integer.instance(1L));
                .java.lang.Object $spread$31$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> $spread$31$iterator = $spread$31$iterable.iterator(); !(($spread$31$iteration = $spread$31$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> $spread$31$element = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)$spread$31$iteration;
                    $spread$31$sequenceBuilder.append((
                        let
                        {
                            $spread$31$element.m2($spread$31$arg$0, $spread$31$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning $spread$31$sequenceBuilder.getSequence();
        );
    }
    
    public final void m4() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$i$33 = m4$i();
                m4$($ceylontmp$i$33);
            }
            returning null;
        );
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> m4$i() {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private void m4$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
    }
    
    public final void m4(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
        (
            let
            {
                m4$(i);
            }
            returning null;
        );
    }
    
    private final void spreadIterator$priv(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iter, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> nonEmptyIter) {
        m4(iter.getSequence());
        m4(nonEmptyIter.getSequence());
    }
    
    private final void spreadIteratorWithSpreadOp$priv(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iter, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> nonEmptyIter) {
        final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> sas = (.ceylon.language.Iterable).ceylon.language.nothing_.$get();
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> $spread$34$iterable = sas;
                .ceylon.language.SequenceBuilder<.java.lang.Object> $spread$34$sequenceBuilder = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor);
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $spread$34$arg$0 = iter.getSequence();
                .java.lang.Object $spread$34$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> $spread$34$iterator = $spread$34$iterable.iterator(); !(($spread$34$iteration = $spread$34$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> $spread$34$element = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)$spread$34$iteration;
                    $spread$34$sequenceBuilder.append((
                        let
                        {
                            $spread$34$element.m4($spread$34$arg$0);
                        }
                        returning null;
                    ));
                }
            }
            returning $spread$34$sequenceBuilder.getSequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> $spread$35$iterable = sas;
                .ceylon.language.SequenceBuilder<.java.lang.Object> $spread$35$sequenceBuilder = new .ceylon.language.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor);
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $spread$35$arg$0 = nonEmptyIter.getSequence();
                .java.lang.Object $spread$35$iteration;
                for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> $spread$35$iterator = $spread$35$iterable.iterator(); !(($spread$35$iteration = $spread$35$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> $spread$35$element = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)$spread$35$iteration;
                    $spread$35$sequenceBuilder.append((
                        let
                        {
                            $spread$35$element.m4($spread$35$arg$0);
                        }
                        returning null;
                    ));
                }
            }
            returning $spread$35$sequenceBuilder.getSequence();
        );
    }
    
    private final void spreadTupleWithDefaultedAndSequenced$priv() {
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> f = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Integer.$TypeDescriptor)))), "Integer(Integer, Integer=, Integer*)", (short)2){
            
            private final long $$b(final long a) {
                return 2L;
            }
            
            private final .ceylon.language.Sequential<? extends .ceylon.language.Integer> $$c(final long a, final long b) {
                return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call(final .java.lang.Object $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = $$b(a);
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c = $$c(a, b);
                return $call$typed(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c = $$c(a, b);
                return $call$typed(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$2;
                return $call$typed(a, b, c);
            }
            
            private .ceylon.language.Integer $call$typed(long a, long b, .ceylon.language.Sequential<? extends .ceylon.language.Integer> c) {
                return .ceylon.language.Integer.instance(1L);
            }
        };
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty> one = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L));
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>> two = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L));
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>> three = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L));
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>> four = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L), .ceylon.language.Integer.instance(4L));
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty> $tuple$36 = one;
            }
            returning f.$call((.ceylon.language.Integer)$tuple$36.get(.ceylon.language.Integer.instance(0L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>> $tuple$38 = two;
            }
            returning f.$call((.ceylon.language.Integer)$tuple$38.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)$tuple$38.get(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>> $tuple$40 = three;
            }
            returning f.$call((.ceylon.language.Integer)$tuple$40.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)$tuple$40.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$tuple$40.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>> $tuple$42 = four;
            }
            returning f.$call((.ceylon.language.Integer)$tuple$42.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)$tuple$42.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$tuple$42.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty> $tuple$44 = one;
            }
            returning f.$call(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)$tuple$44.get(.ceylon.language.Integer.instance(0L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>> $tuple$46 = two;
            }
            returning f.$call(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)$tuple$46.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$tuple$46.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>> $tuple$48 = three;
            }
            returning f.$call(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)$tuple$48.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$tuple$48.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>> $tuple$50 = four;
            }
            returning f.$call(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)$tuple$50.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$tuple$50.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        f.$call(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.$get());
        f.$call(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), one);
        f.$call(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), two);
        f.$call(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialInstance(.ceylon.language.Integer.$TypeDescriptor, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.$get(), .ceylon.language.Integer.instance(3L)));
        f.$call(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialInstance(.ceylon.language.Integer.$TypeDescriptor, one, .ceylon.language.Integer.instance(3L)));
        f.$call(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialInstance(.ceylon.language.Integer.$TypeDescriptor, two, .ceylon.language.Integer.instance(3L)));
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments.class, $reifiedT);
    }
}