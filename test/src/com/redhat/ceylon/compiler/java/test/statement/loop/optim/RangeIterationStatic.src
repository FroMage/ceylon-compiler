package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

class RangeIterationStatic<Element extends .ceylon.language.Enumerable<Element>> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    RangeIterationStatic(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    
    private final void rangeOfIntegers$priv$(final .ceylon.language.Range<.ceylon.language.Integer> seq) {
        .java.lang.Object elem$0;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> item$iterator$$1 = seq.iterator();
        loop_0: while (!((elem$0 = item$iterator$$1.next()) instanceof .ceylon.language.Finished)) {
            final long item = ((.ceylon.language.Integer)elem$0).longValue();
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(item + 5L));
        }
    }
    
    private final void rangeOfIntegersWithBreak$priv$(final .ceylon.language.Range<.ceylon.language.Integer> array) {
        boolean doforelse$2 = true;
        .java.lang.Object elem$3;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> element$iterator$$4 = array.iterator();
        loop_1: while (!((elem$3 = element$iterator$$4.next()) instanceof .ceylon.language.Finished)) {
            final long element = ((.ceylon.language.Integer)elem$3).longValue();
            
            final class x_ {
                
                private x_() {
                }
                
                long x() {
                    return element + 10L;
                }
            }
            final x_ x = new x_();
            if (element == 10L) {
                doforelse$2 = false;
                break loop_1;
            }
        }
        if (doforelse$2) {
            .ceylon.language.print_.print(.ceylon.language.String.instance("foo"));
        }
    }
    
    private final void rangeOfIntegerWithStep$priv$(final .ceylon.language.Range<.ceylon.language.Integer> seq, final long step) {
        .java.lang.Object elem$6;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> item$iterator$$7 = ((.ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object>)seq.by(step)).iterator();
        loop_2: while (!((elem$6 = item$iterator$$7.next()) instanceof .ceylon.language.Finished)) {
            final long item = ((.ceylon.language.Integer)elem$6).longValue();
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(item));
        }
    }
    
    private final void rangeOfElementWithStep$priv$(final .ceylon.language.Range<Element> seq, final long step) {
        .java.lang.Object elem$8;
        .ceylon.language.Iterator<? extends Element> item$iterator$$9 = ((.ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object>)(.ceylon.language.Iterable)seq).iterator();
        loop_3: while (!((elem$8 = item$iterator$$9.next()) instanceof .ceylon.language.Finished)) {
            final Element item = (Element)elem$8;
            .ceylon.language.print_.print(item);
        }
        .java.lang.Object elem$10;
        .ceylon.language.Iterator<? extends Element> item$iterator$$11 = ((.ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object>)(.ceylon.language.Iterable)seq).iterator();
        loop_4: while (!((elem$10 = item$iterator$$11.next()) instanceof .ceylon.language.Finished)) {
            final Element item = (Element)elem$10;
            .ceylon.language.print_.print(item);
            break loop_4;
        }
    }
    
    private final void rangeOfElementWithStepAndDefReturn$priv$(final .ceylon.language.Range<Element> seq, final long step) {
        .java.lang.Object elem$12;
        .ceylon.language.Iterator<? extends Element> item$iterator$$13 = ((.ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object>)(.ceylon.language.Iterable)seq).iterator();
        loop_5: while (!((elem$12 = item$iterator$$13.next()) instanceof .ceylon.language.Finished)) {
            final Element item = (Element)elem$12;
            if (true) {
                return;
            }
            throw new .java.lang.Error("Ceylon flow error");
        }
    }
    
    private final void rangeOfElementWithStepAndObfuscDefReturn$priv$(final .ceylon.language.Range<Element> seq, final long step) {
        .java.lang.Object elem$15;
        .ceylon.language.Iterator<? extends Element> item$iterator$$16 = ((.ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object>)(.ceylon.language.Iterable)seq).iterator();
        loop_6: while (!((elem$15 = item$iterator$$16.next()) instanceof .ceylon.language.Finished)) {
            final Element item = (Element)elem$15;
            .ceylon.language.print_.print(item);
            if (false) {
                throw new .java.lang.Error("Ceylon flow error");
            } else {
                return;
            }
        }
    }
    
    private final void rangeOfElementWithStepAndDefExit$priv$(final .ceylon.language.Range<Element> seq, final long step) {
        .java.lang.Object elem$18;
        .ceylon.language.Iterator<? extends Element> item$iterator$$19 = ((.ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object>)(.ceylon.language.Iterable)seq).iterator();
        loop_7: while (!((elem$18 = item$iterator$$19.next()) instanceof .ceylon.language.Finished)) {
            final Element item = (Element)elem$18;
            if (true) {
                break loop_7;
            }
        }
    }
    
    private final void rangeOfElementWithStepAndObfuscDefExit$priv$(final .ceylon.language.Range<Element> seq, final long step) {
        .java.lang.Object elem$21;
        .ceylon.language.Iterator<? extends Element> item$iterator$$22 = ((.ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object>)(.ceylon.language.Iterable)seq).iterator();
        loop_8: while (!((elem$21 = item$iterator$$22.next()) instanceof .ceylon.language.Finished)) {
            final Element item = (Element)elem$21;
            .ceylon.language.print_.print(item);
            if (false) {
            } else {
                break loop_8;
            }
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.RangeIterationStatic(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.RangeIterationStatic.class, $reified$Element);
    }
}