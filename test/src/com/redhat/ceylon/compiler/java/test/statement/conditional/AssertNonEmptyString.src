package com.redhat.ceylon.compiler.java.test.statement.conditional;

class AssertNonEmptySequence {
    
    AssertNonEmptySequence() {
    }
    
    public final void m(final .java.lang.String s) {
        final .ceylon.language.Sequential<? extends .ceylon.language.Character> $s$2;
        .ceylon.language.String $s$1 = null;
        if (($s$1 = .ceylon.language.String.instance(s)) instanceof .ceylon.language.Sequence) {
            $s$2 = (.ceylon.language.Sequential<? extends .ceylon.language.Character>)$s$1;
        } else throw new .ceylon.language.AssertionException("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nonempty s"));
        .ceylon.language.print_.print($s$2.getFirst());
    }
    
    public final void mvar(final .java.lang.String s) {
        final .ceylon.language.Sequential<? extends .ceylon.language.Character> $t$5;
        .ceylon.language.String $t$4 = null;
        if (($t$4 = .ceylon.language.String.instance(s)) instanceof .ceylon.language.Sequence) {
            $t$5 = (.ceylon.language.Sequential<? extends .ceylon.language.Character>)$t$4;
        } else throw new .ceylon.language.AssertionException("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nonempty t=s"));
        .ceylon.language.print_.print($t$5.getFirst());
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.statement.conditional.AssertNonEmptySequence();
    }
}