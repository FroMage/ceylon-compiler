package com.redhat.ceylon.compiler.java.test.statement.conditional;

class AssertNonEmptySequence {
    
    AssertNonEmptySequence() {
    }
    
    public final void m(final .java.lang.String s) {
        .ceylon.language.String $s$0;
        if (!(($s$0 = .ceylon.language.String.instance(s)) instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$s$0).getEmpty())) throw new .ceylon.language.Exception(.ceylon.language.String.instance("Assertion failed" + .java.lang.System.lineSeparator() + ("\tviolated " + "nonempty s" + .java.lang.System.lineSeparator() + "\tat " + "AssertNonEmptyString.ceylon:23:8-23:27")), null);
        .ceylon.language.print_.print(.ceylon.language.String.getFirst(s));
    }
    
    public final void mvar(final .java.lang.String s) {
        .ceylon.language.String $t$1;
        if (!(($t$1 = .ceylon.language.String.instance(s)) instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$t$1).getEmpty())) throw new .ceylon.language.Exception(.ceylon.language.String.instance("Assertion failed" + .java.lang.System.lineSeparator() + ("\tviolated " + "nonempty t=s" + .java.lang.System.lineSeparator() + "\tat " + "AssertNonEmptyString.ceylon:27:8-27:29")), null);
        final .ceylon.language.List<? extends .ceylon.language.Character> t = (.ceylon.language.List<? extends .ceylon.language.Character>)$t$1;
        .ceylon.language.print_.print(((.ceylon.language.Some<? extends .ceylon.language.Character>)t).getFirst());
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.statement.conditional.AssertNonEmptySequence();
    }
}