package com.redhat.ceylon.compiler.java.test.expression.invoke;

class NamedArgumentWithSequence {
    
    NamedArgumentWithSequence() {
    }
    
    private final void m$priv(final long a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$b$1 = m$b(a);
                m$priv(a, $ceylontmp$b$1);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.Integer> m$b(final long a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    private final void m$priv(final long a, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> b) {
    }
    
    private final void m2$priv(final .java.lang.Throwable a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Throwable> $ceylontmp$b$3 = m2$b(a);
                m2$priv(a, $ceylontmp$b$3);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .java.lang.Throwable> m2$b(final .java.lang.Throwable a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    private final void m2$priv(final .java.lang.Throwable a, final .ceylon.language.Sequential<? extends .java.lang.Throwable> b) {
    }
    
    private final void m3$priv(final .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence> $ceylontmp$b$5 = m3$b(a);
                m3$priv(a, $ceylontmp$b$5);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence> m3$b(final .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    private final void m3$priv(final .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence a, final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence> b) {
    }
    
    private final void invoke$priv() {
        (
            let
            {
                long $arg$6$0 = 1L;
                .ceylon.language.Sequential $arg$6$1 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.instance(2L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>(.ceylon.language.Integer.instance(3L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.instance(4L), .ceylon.language.empty_.getEmpty$())));
                m$priv($arg$6$0, $arg$6$1);
            }
            returning null;
        );
        final .java.lang.Throwable e = new .ceylon.language.Exception(.ceylon.language.String.instance(""), null);
        (
            let
            {
                .java.lang.Throwable $arg$7$0 = e;
                .ceylon.language.Sequential $arg$7$1 = new .ceylon.language.Tuple<.java.lang.Throwable, .java.lang.Throwable, .ceylon.language.Tuple<.java.lang.Throwable, ? extends .java.lang.Throwable, ? extends .ceylon.language.Tuple<.java.lang.Throwable, ? extends .java.lang.Throwable, ? extends .ceylon.language.Empty>>>(e, new .ceylon.language.Tuple<.java.lang.Throwable, .java.lang.Throwable, .ceylon.language.Tuple<.java.lang.Throwable, ? extends .java.lang.Throwable, ? extends .ceylon.language.Empty>>(e, new .ceylon.language.Tuple<.java.lang.Throwable, .java.lang.Throwable, .ceylon.language.Empty>(e, .ceylon.language.empty_.getEmpty$())));
                m2$priv($arg$7$0, $arg$7$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence $arg$8$0 = this;
                .ceylon.language.Sequential $arg$8$1 = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .ceylon.language.Empty>>>(this, new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .ceylon.language.Empty>>(this, new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .ceylon.language.Empty>(this, .ceylon.language.empty_.getEmpty$())));
                m3$priv($arg$8$0, $arg$8$1);
            }
            returning null;
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence();
    }
}