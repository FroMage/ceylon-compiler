package com.redhat.ceylon.compiler.java.test.expression.invoke;

class NamedArgumentWithSequence implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    NamedArgumentWithSequence() {
    }
    
    private final void m$priv(final long a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$b$0 = m$b(a);
                m$priv$(a, $ceylontmp$b$0);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .ceylon.language.Integer> m$b(final long a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private final void m$priv$(final long a, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> b) {
    }
    
    private final void m$priv(final long a, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> b) {
        (
            let
            {
                m$priv$(a, b);
            }
            returning null;
        );
    }
    
    private final void m2$priv(final .java.lang.Throwable a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Throwable> $ceylontmp$b$1 = m2$b(a);
                m2$priv$(a, $ceylontmp$b$1);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .java.lang.Throwable> m2$b(final .java.lang.Throwable a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private final void m2$priv$(final .java.lang.Throwable a, final .ceylon.language.Sequential<? extends .java.lang.Throwable> b) {
    }
    
    private final void m2$priv(final .java.lang.Throwable a, final .ceylon.language.Sequential<? extends .java.lang.Throwable> b) {
        (
            let
            {
                m2$priv$(a, b);
            }
            returning null;
        );
    }
    
    private final void m3$priv(final .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence> $ceylontmp$b$2 = m3$b(a);
                m3$priv$(a, $ceylontmp$b$2);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence> m3$b(final .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private final void m3$priv$(final .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence a, final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence> b) {
    }
    
    private final void m3$priv(final .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence a, final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence> b) {
        (
            let
            {
                m3$priv$(a, b);
            }
            returning null;
        );
    }
    
    private final void invoke$priv() {
        (
            let
            {
                long $arg$3$0 = 1L;
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $arg$3$1 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor)), .ceylon.language.Integer.instance(2L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.Integer.instance(3L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Integer.instance(4L), .ceylon.language.empty_.$get())));
                m$priv($arg$3$0, $arg$3$1);
            }
            returning null;
        );
        final .java.lang.Throwable e = new .ceylon.language.Exception(.ceylon.language.String.instance(""), null);
        (
            let
            {
                .java.lang.Throwable $arg$4$0 = e;
                .ceylon.language.Sequential<? extends .java.lang.Throwable> $arg$4$1 = new .ceylon.language.Tuple<.java.lang.Throwable, .java.lang.Throwable, .ceylon.language.Tuple<.java.lang.Throwable, ? extends .java.lang.Throwable, ? extends .ceylon.language.Tuple<.java.lang.Throwable, ? extends .java.lang.Throwable, ? extends .ceylon.language.Empty>>>(.ceylon.language.Exception.$TypeDescriptor, .ceylon.language.Exception.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Exception.$TypeDescriptor, .ceylon.language.Exception.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Exception.$TypeDescriptor, .ceylon.language.Exception.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor)), e, new .ceylon.language.Tuple<.java.lang.Throwable, .java.lang.Throwable, .ceylon.language.Tuple<.java.lang.Throwable, ? extends .java.lang.Throwable, ? extends .ceylon.language.Empty>>(.ceylon.language.Exception.$TypeDescriptor, .ceylon.language.Exception.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Exception.$TypeDescriptor, .ceylon.language.Exception.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), e, new .ceylon.language.Tuple<.java.lang.Throwable, .java.lang.Throwable, .ceylon.language.Empty>(.ceylon.language.Exception.$TypeDescriptor, .ceylon.language.Exception.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, e, .ceylon.language.empty_.$get())));
                m2$priv($arg$4$0, $arg$4$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence $arg$5$0 = this;
                .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence> $arg$5$1 = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .ceylon.language.Empty>>>(.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor)), this, new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, ? extends .ceylon.language.Empty>>(.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), this, new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence, .ceylon.language.Empty>(.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, this, .ceylon.language.empty_.$get())));
                m3$priv($arg$5$0, $arg$5$1);
            }
            returning null;
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.NamedArgumentWithSequence.class);
}