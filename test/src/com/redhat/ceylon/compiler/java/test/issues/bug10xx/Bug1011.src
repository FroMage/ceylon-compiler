package com.redhat.ceylon.compiler.java.test.issues.bug10xx;

final class bug1011_ {
    
    private bug1011_() {
    }
    
    static void bug1011(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> it) {
        (
            let
            {
                .ceylon.language.Iterable $arg$0$0 = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
                    
                    public final .ceylon.language.Iterator<.ceylon.language.Integer> getIterator() {
                        
                        final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer> {
                            
                            $ComprehensionIterator$() {
                                super(.ceylon.language.Integer.$TypeDescriptor);
                                iter$0 = new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L)).getIterator();
                            }
                            private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0;
                            private .ceylon.language.Integer x;
                            private boolean x$exhausted;
                            
                            private final boolean x() {
                                final .java.lang.Object $ceylontmpitem1 = iter$0.next();
                                x$exhausted = $ceylontmpitem1 == .ceylon.language.finished_.getFinished$();
                                if (x$exhausted) {
                                    return false;
                                } else {
                                    x = (.ceylon.language.Integer)$ceylontmpitem1;
                                    return true;
                                }
                            }
                            
                            public final .java.lang.Object next() {
                                if (this.x()) {
                                    final .ceylon.language.Integer x = this.x;
                                    return x;
                                } else return .ceylon.language.finished_.getFinished$();
                            }
                        }
                        return new $ComprehensionIterator$();
                    }
                };
                .com.redhat.ceylon.compiler.java.test.issues.bug10xx.bug1011_.bug1011($arg$0$0);
            }
            returning null;
        );
    }
}
final class foo_ {
    
    private foo_() {
    }
    
    static <Key, Item>.ceylon.language.Map<? extends Item, ? extends .ceylon.language.Set<? extends Key>> foo(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedKey, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedItem, final .ceylon.language.Map<? extends Key, ? extends Item> map, final .ceylon.language.Entry<? extends Item, ? extends .ceylon.language.Set<? extends Key>> extra) {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $arg$2$reified$0 = $reifiedItem;
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $arg$2$reified$1 = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey);
                .ceylon.language.Iterable $arg$2$0 = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)), .ceylon.language.Null.$TypeDescriptor){
                    
                    public final .ceylon.language.Iterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> getIterator() {
                        
                        final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> {
                            
                            $ComprehensionIterator$() {
                                super(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)));
                                iter$0 = map.getIterator();
                            }
                            private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                            private Key key;
                            private Item item;
                            private boolean kv$key$item$exhausted;
                            
                            private final boolean kv$key$item() {
                                final .java.lang.Object $ceylontmpitem3 = iter$0.next();
                                kv$key$item$exhausted = $ceylontmpitem3 == .ceylon.language.finished_.getFinished$();
                                if (kv$key$item$exhausted) {
                                    return false;
                                } else {
                                    key = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem3).getKey();
                                    item = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem3).getItem();
                                    return true;
                                }
                            }
                            
                            public final .java.lang.Object next() {
                                if (this.kv$key$item()) {
                                    final Key key = this.key;
                                    final Item item = this.item;
                                    return new .ceylon.language.Entry<Item, .ceylon.language.LazySet<? extends Key>>($reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey), item, new .ceylon.language.LazySet<Key>($reifiedKey, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<Key, .java.lang.Object>($reifiedKey, .ceylon.language.Null.$TypeDescriptor){
                                        
                                        public final .ceylon.language.Iterator<Key> getIterator() {
                                            
                                            final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<Key> {
                                                
                                                $ComprehensionIterator$() {
                                                    super($reifiedKey);
                                                    iter$0 = map.getIterator();
                                                }
                                                private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                                                private Key k;
                                                private Item i;
                                                private boolean kv$k$i$exhausted;
                                                
                                                private final boolean kv$k$i() {
                                                    final .java.lang.Object $ceylontmpitem4 = iter$0.next();
                                                    kv$k$i$exhausted = $ceylontmpitem4 == .ceylon.language.finished_.getFinished$();
                                                    if (kv$k$i$exhausted) {
                                                        return false;
                                                    } else {
                                                        k = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem4).getKey();
                                                        i = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem4).getItem();
                                                        return true;
                                                    }
                                                }
                                                
                                                private final boolean next1() {
                                                    while (true) {
                                                        if (!this.kv$k$i()) break;
                                                        if (i.equals(item)) {
                                                            break;
                                                        }
                                                    }
                                                    return !kv$k$i$exhausted;
                                                }
                                                
                                                public final .java.lang.Object next() {
                                                    if (this.next1()) {
                                                        final Key k = this.k;
                                                        final Item i = this.i;
                                                        return k;
                                                    } else return .ceylon.language.finished_.getFinished$();
                                                }
                                            }
                                            return new $ComprehensionIterator$();
                                        }
                                    }.getSequence()));
                                } else return .ceylon.language.finished_.getFinished$();
                            }
                        }
                        return new $ComprehensionIterator$();
                    }
                };
            }
            returning new .ceylon.language.LazyMap<Item, .ceylon.language.LazySet<? extends Key>>($arg$2$reified$0, $arg$2$reified$1, $arg$2$0);
        );
        new .ceylon.language.LazyMap<Item, .ceylon.language.LazySet<? extends Key>>($reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey), (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)), .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> {
                    
                    $ComprehensionIterator$() {
                        super(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)));
                        iter$0 = map.getIterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                    private Key key;
                    private Item item;
                    private boolean kv$key$item$exhausted;
                    
                    private final boolean kv$key$item() {
                        final .java.lang.Object $ceylontmpitem5 = iter$0.next();
                        kv$key$item$exhausted = $ceylontmpitem5 == .ceylon.language.finished_.getFinished$();
                        if (kv$key$item$exhausted) {
                            return false;
                        } else {
                            key = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem5).getKey();
                            item = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem5).getItem();
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.kv$key$item()) {
                            final Key key = this.key;
                            final Item item = this.item;
                            return new .ceylon.language.Entry<Item, .ceylon.language.LazySet<? extends Key>>($reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey), item, new .ceylon.language.LazySet<Key>($reifiedKey, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<Key, .java.lang.Object>($reifiedKey, .ceylon.language.Null.$TypeDescriptor){
                                
                                public final .ceylon.language.Iterator<Key> getIterator() {
                                    
                                    final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<Key> {
                                        
                                        $ComprehensionIterator$() {
                                            super($reifiedKey);
                                            iter$0 = map.getIterator();
                                        }
                                        private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                                        private Key k;
                                        private Item i;
                                        private boolean kv$k$i$exhausted;
                                        
                                        private final boolean kv$k$i() {
                                            final .java.lang.Object $ceylontmpitem6 = iter$0.next();
                                            kv$k$i$exhausted = $ceylontmpitem6 == .ceylon.language.finished_.getFinished$();
                                            if (kv$k$i$exhausted) {
                                                return false;
                                            } else {
                                                k = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem6).getKey();
                                                i = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem6).getItem();
                                                return true;
                                            }
                                        }
                                        
                                        private final boolean next1() {
                                            while (true) {
                                                if (!this.kv$k$i()) break;
                                                if (i.equals(item)) {
                                                    break;
                                                }
                                            }
                                            return !kv$k$i$exhausted;
                                        }
                                        
                                        public final .java.lang.Object next() {
                                            if (this.next1()) {
                                                final Key k = this.k;
                                                final Item i = this.i;
                                                return k;
                                            } else return .ceylon.language.finished_.getFinished$();
                                        }
                                    }
                                    return new $ComprehensionIterator$();
                                }
                            }.getSequence()));
                        } else return .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        });
        (
            let
            {
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $arg$7$reified$0 = $reifiedItem;
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $arg$7$reified$1 = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Set.class, $reifiedKey);
                .ceylon.language.Iterable $arg$7$0 = .com.redhat.ceylon.compiler.java.language.ArrayIterable.<.ceylon.language.Entry>instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Set.class, $reifiedKey)), new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)), .ceylon.language.Null.$TypeDescriptor){
                    
                    public final .ceylon.language.Iterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> getIterator() {
                        
                        final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> {
                            
                            $ComprehensionIterator$() {
                                super(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)));
                                iter$0 = map.getIterator();
                            }
                            private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                            private Key key;
                            private Item item;
                            private boolean kv$key$item$exhausted;
                            
                            private final boolean kv$key$item() {
                                final .java.lang.Object $ceylontmpitem8 = iter$0.next();
                                kv$key$item$exhausted = $ceylontmpitem8 == .ceylon.language.finished_.getFinished$();
                                if (kv$key$item$exhausted) {
                                    return false;
                                } else {
                                    key = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem8).getKey();
                                    item = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem8).getItem();
                                    return true;
                                }
                            }
                            
                            public final .java.lang.Object next() {
                                if (this.kv$key$item()) {
                                    final Key key = this.key;
                                    final Item item = this.item;
                                    return new .ceylon.language.Entry<Item, .ceylon.language.LazySet<? extends Key>>($reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey), item, new .ceylon.language.LazySet<Key>($reifiedKey, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<Key, .java.lang.Object>($reifiedKey, .ceylon.language.Null.$TypeDescriptor){
                                        
                                        public final .ceylon.language.Iterator<Key> getIterator() {
                                            
                                            final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<Key> {
                                                
                                                $ComprehensionIterator$() {
                                                    super($reifiedKey);
                                                    iter$0 = map.getIterator();
                                                }
                                                private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                                                private Key k;
                                                private Item i;
                                                private boolean kv$k$i$exhausted;
                                                
                                                private final boolean kv$k$i() {
                                                    final .java.lang.Object $ceylontmpitem9 = iter$0.next();
                                                    kv$k$i$exhausted = $ceylontmpitem9 == .ceylon.language.finished_.getFinished$();
                                                    if (kv$k$i$exhausted) {
                                                        return false;
                                                    } else {
                                                        k = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem9).getKey();
                                                        i = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem9).getItem();
                                                        return true;
                                                    }
                                                }
                                                
                                                private final boolean next1() {
                                                    while (true) {
                                                        if (!this.kv$k$i()) break;
                                                        if (i.equals(item)) {
                                                            break;
                                                        }
                                                    }
                                                    return !kv$k$i$exhausted;
                                                }
                                                
                                                public final .java.lang.Object next() {
                                                    if (this.next1()) {
                                                        final Key k = this.k;
                                                        final Item i = this.i;
                                                        return k;
                                                    } else return .ceylon.language.finished_.getFinished$();
                                                }
                                            }
                                            return new $ComprehensionIterator$();
                                        }
                                    }.getSequence()));
                                } else return .ceylon.language.finished_.getFinished$();
                            }
                        }
                        return new $ComprehensionIterator$();
                    }
                }, extra);
            }
            returning new .ceylon.language.LazyMap<Item, .ceylon.language.Set<? extends Key>>($arg$7$reified$0, $arg$7$reified$1, $arg$7$0);
        );
        new .ceylon.language.LazyMap<Item, .ceylon.language.Set<? extends Key>>($reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Set.class, $reifiedKey), (.ceylon.language.Iterable).com.redhat.ceylon.compiler.java.language.ArrayIterable.<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.Set<? extends Key>>>instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Set.class, $reifiedKey)), new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)), .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> {
                    
                    $ComprehensionIterator$() {
                        super(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)));
                        iter$0 = map.getIterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                    private Key key;
                    private Item item;
                    private boolean kv$key$item$exhausted;
                    
                    private final boolean kv$key$item() {
                        final .java.lang.Object $ceylontmpitem10 = iter$0.next();
                        kv$key$item$exhausted = $ceylontmpitem10 == .ceylon.language.finished_.getFinished$();
                        if (kv$key$item$exhausted) {
                            return false;
                        } else {
                            key = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem10).getKey();
                            item = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem10).getItem();
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.kv$key$item()) {
                            final Key key = this.key;
                            final Item item = this.item;
                            return new .ceylon.language.Entry<Item, .ceylon.language.LazySet<? extends Key>>($reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey), item, new .ceylon.language.LazySet<Key>($reifiedKey, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<Key, .java.lang.Object>($reifiedKey, .ceylon.language.Null.$TypeDescriptor){
                                
                                public final .ceylon.language.Iterator<Key> getIterator() {
                                    
                                    final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<Key> {
                                        
                                        $ComprehensionIterator$() {
                                            super($reifiedKey);
                                            iter$0 = map.getIterator();
                                        }
                                        private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                                        private Key k;
                                        private Item i;
                                        private boolean kv$k$i$exhausted;
                                        
                                        private final boolean kv$k$i() {
                                            final .java.lang.Object $ceylontmpitem11 = iter$0.next();
                                            kv$k$i$exhausted = $ceylontmpitem11 == .ceylon.language.finished_.getFinished$();
                                            if (kv$k$i$exhausted) {
                                                return false;
                                            } else {
                                                k = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem11).getKey();
                                                i = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem11).getItem();
                                                return true;
                                            }
                                        }
                                        
                                        private final boolean next1() {
                                            while (true) {
                                                if (!this.kv$k$i()) break;
                                                if (i.equals(item)) {
                                                    break;
                                                }
                                            }
                                            return !kv$k$i$exhausted;
                                        }
                                        
                                        public final .java.lang.Object next() {
                                            if (this.next1()) {
                                                final Key k = this.k;
                                                final Item i = this.i;
                                                return k;
                                            } else return .ceylon.language.finished_.getFinished$();
                                        }
                                    }
                                    return new $ComprehensionIterator$();
                                }
                            }.getSequence()));
                        } else return .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        }, extra));
        final .java.lang.Object v1 = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)), .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> {
                    
                    $ComprehensionIterator$() {
                        super(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)));
                        iter$0 = map.getIterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                    private Key key;
                    private Item item;
                    private boolean kv$key$item$exhausted;
                    
                    private final boolean kv$key$item() {
                        final .java.lang.Object $ceylontmpitem12 = iter$0.next();
                        kv$key$item$exhausted = $ceylontmpitem12 == .ceylon.language.finished_.getFinished$();
                        if (kv$key$item$exhausted) {
                            return false;
                        } else {
                            key = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem12).getKey();
                            item = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem12).getItem();
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.kv$key$item()) {
                            final Key key = this.key;
                            final Item item = this.item;
                            return new .ceylon.language.Entry<Item, .ceylon.language.LazySet<? extends Key>>($reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey), item, new .ceylon.language.LazySet<Key>($reifiedKey, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<Key, .java.lang.Object>($reifiedKey, .ceylon.language.Null.$TypeDescriptor){
                                
                                public final .ceylon.language.Iterator<Key> getIterator() {
                                    
                                    final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<Key> {
                                        
                                        $ComprehensionIterator$() {
                                            super($reifiedKey);
                                            iter$0 = map.getIterator();
                                        }
                                        private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                                        private Key k;
                                        private Item i;
                                        private boolean kv$k$i$exhausted;
                                        
                                        private final boolean kv$k$i() {
                                            final .java.lang.Object $ceylontmpitem13 = iter$0.next();
                                            kv$k$i$exhausted = $ceylontmpitem13 == .ceylon.language.finished_.getFinished$();
                                            if (kv$k$i$exhausted) {
                                                return false;
                                            } else {
                                                k = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem13).getKey();
                                                i = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem13).getItem();
                                                return true;
                                            }
                                        }
                                        
                                        private final boolean next1() {
                                            while (true) {
                                                if (!this.kv$k$i()) break;
                                                if (i.equals(item)) {
                                                    break;
                                                }
                                            }
                                            return !kv$k$i$exhausted;
                                        }
                                        
                                        public final .java.lang.Object next() {
                                            if (this.next1()) {
                                                final Key k = this.k;
                                                final Item i = this.i;
                                                return k;
                                            } else return .ceylon.language.finished_.getFinished$();
                                        }
                                    }
                                    return new $ComprehensionIterator$();
                                }
                            }.getSequence()));
                        } else return .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        };
        final .java.lang.Object v2 = .com.redhat.ceylon.compiler.java.language.ArrayIterable.<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.Set<? extends Key>>>instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Set.class, $reifiedKey)), new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)), .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> getIterator() {
                
                final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Entry<? extends Item, ? extends .ceylon.language.LazySet<? extends Key>>> {
                    
                    $ComprehensionIterator$() {
                        super(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, $reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey)));
                        iter$0 = map.getIterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                    private Key key;
                    private Item item;
                    private boolean kv$key$item$exhausted;
                    
                    private final boolean kv$key$item() {
                        final .java.lang.Object $ceylontmpitem14 = iter$0.next();
                        kv$key$item$exhausted = $ceylontmpitem14 == .ceylon.language.finished_.getFinished$();
                        if (kv$key$item$exhausted) {
                            return false;
                        } else {
                            key = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem14).getKey();
                            item = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem14).getItem();
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.kv$key$item()) {
                            final Key key = this.key;
                            final Item item = this.item;
                            return new .ceylon.language.Entry<Item, .ceylon.language.LazySet<? extends Key>>($reifiedItem, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.LazySet.class, $reifiedKey), item, new .ceylon.language.LazySet<Key>($reifiedKey, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<Key, .java.lang.Object>($reifiedKey, .ceylon.language.Null.$TypeDescriptor){
                                
                                public final .ceylon.language.Iterator<Key> getIterator() {
                                    
                                    final class $ComprehensionIterator$ extends .com.redhat.ceylon.compiler.java.language.AbstractIterator<Key> {
                                        
                                        $ComprehensionIterator$() {
                                            super($reifiedKey);
                                            iter$0 = map.getIterator();
                                        }
                                        private final .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends Key, ? extends Item>> iter$0;
                                        private Key k;
                                        private Item i;
                                        private boolean kv$k$i$exhausted;
                                        
                                        private final boolean kv$k$i() {
                                            final .java.lang.Object $ceylontmpitem15 = iter$0.next();
                                            kv$k$i$exhausted = $ceylontmpitem15 == .ceylon.language.finished_.getFinished$();
                                            if (kv$k$i$exhausted) {
                                                return false;
                                            } else {
                                                k = (Key)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem15).getKey();
                                                i = (Item)((.ceylon.language.Entry<? extends Key, ? extends Item>)$ceylontmpitem15).getItem();
                                                return true;
                                            }
                                        }
                                        
                                        private final boolean next1() {
                                            while (true) {
                                                if (!this.kv$k$i()) break;
                                                if (i.equals(item)) {
                                                    break;
                                                }
                                            }
                                            return !kv$k$i$exhausted;
                                        }
                                        
                                        public final .java.lang.Object next() {
                                            if (this.next1()) {
                                                final Key k = this.k;
                                                final Item i = this.i;
                                                return k;
                                            } else return .ceylon.language.finished_.getFinished$();
                                        }
                                    }
                                    return new $ComprehensionIterator$();
                                }
                            }.getSequence()));
                        } else return .ceylon.language.finished_.getFinished$();
                    }
                }
                return new $ComprehensionIterator$();
            }
        }, extra);
        return (.ceylon.language.Map).ceylon.language.nothing_.getNothing$();
    }
}