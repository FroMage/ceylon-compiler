package com.redhat.ceylon.compiler.java.test.expression.operator;

public abstract class LogicalOperatorsParent<B> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    public LogicalOperatorsParent(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedB) {
        this.$reifiedB = $reifiedB;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedB;
    
    public abstract B getBoxedB1();
    
    public abstract void setBoxedB1(final B boxedB1);
    
    public abstract B getBoxedB2();
    
    public abstract void setBoxedB2(final B boxedB2);
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperatorsParent.class, $reifiedB);
    }
}
public class LogicalOperators extends .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperatorsParent<.ceylon.language.Boolean> {
    
    public LogicalOperators() {
        super(.ceylon.language.Boolean.$TypeDescriptor);
        this.b1 = false;
        this.b2 = false;
        this.boxedB1 = .ceylon.language.Boolean.instance(getB1());
        this.boxedB2 = .ceylon.language.Boolean.instance(getB2());
    }
    private boolean b1;
    
    public final boolean getB1() {
        return b1;
    }
    
    public final void setB1(final boolean b1) {
        this.b1 = b1;
    }
    private boolean b2;
    
    public final boolean getB2() {
        return b2;
    }
    
    public final void setB2(final boolean b2) {
        this.b2 = b2;
    }
    private .ceylon.language.Boolean boxedB1;
    
    @.java.lang.Override
    public final .ceylon.language.Boolean getBoxedB1() {
        return boxedB1;
    }
    
    @.java.lang.Override
    public final void setBoxedB1(final .ceylon.language.Boolean boxedB1) {
        this.boxedB1 = boxedB1;
    }
    private .ceylon.language.Boolean boxedB2;
    
    @.java.lang.Override
    public final .ceylon.language.Boolean getBoxedB2() {
        return boxedB2;
    }
    
    @.java.lang.Override
    public final void setBoxedB2(final .ceylon.language.Boolean boxedB2) {
        this.boxedB2 = boxedB2;
    }
    
    public .java.lang.Object logical() {
        setB1(!getB2());
        setB1(true || getB2());
        setB1(false && getB2());
        setB1((
            let
            {
                boolean $ceylontmpop0 = getB1() || getB2();
                setB1($ceylontmpop0);
            }
            returning $ceylontmpop0;
        ));
        setB1((
            let
            {
                boolean $ceylontmpop1 = getB1() && getB2();
                setB1($ceylontmpop1);
            }
            returning $ceylontmpop1;
        ));
        setB1((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperators $ceylontmpopE2 = this;
                boolean $ceylontmpopV3 = $ceylontmpopE2.getB1() || this.getB2();
                $ceylontmpopE2.setB1($ceylontmpopV3);
            }
            returning $ceylontmpopV3;
        ));
        setB1((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperators $ceylontmpopE4 = this;
                boolean $ceylontmpopV5 = $ceylontmpopE4.getB1() && this.getB2();
                $ceylontmpopE4.setB1($ceylontmpopV5);
            }
            returning $ceylontmpopV5;
        ));
        return null;
    }
    
    public .java.lang.Object logicalBoxed() {
        setBoxedB1(.ceylon.language.Boolean.instance(!getBoxedB2().booleanValue()));
        setBoxedB1(.ceylon.language.Boolean.instance(true || getBoxedB2().booleanValue()));
        setBoxedB1(.ceylon.language.Boolean.instance(false && getBoxedB2().booleanValue()));
        setBoxedB1(.ceylon.language.Boolean.instance((
            let
            {
                boolean $ceylontmpop6 = getBoxedB1().booleanValue() || getBoxedB2().booleanValue();
                setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpop6));
            }
            returning $ceylontmpop6;
        )));
        setBoxedB1(.ceylon.language.Boolean.instance((
            let
            {
                boolean $ceylontmpop7 = getBoxedB1().booleanValue() && getBoxedB2().booleanValue();
                setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpop7));
            }
            returning $ceylontmpop7;
        )));
        setBoxedB1(.ceylon.language.Boolean.instance((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperators $ceylontmpopE8 = this;
                boolean $ceylontmpopV9 = $ceylontmpopE8.getBoxedB1().booleanValue() || this.getBoxedB2().booleanValue();
                $ceylontmpopE8.setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpopV9));
            }
            returning $ceylontmpopV9;
        )));
        setBoxedB1(.ceylon.language.Boolean.instance((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperators $ceylontmpopE10 = this;
                boolean $ceylontmpopV11 = $ceylontmpopE10.getBoxedB1().booleanValue() && this.getBoxedB2().booleanValue();
                $ceylontmpopE10.setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpopV11));
            }
            returning $ceylontmpopV11;
        )));
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperators();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperators.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperators.class);
}
public class LogicalOperatorsSub extends .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperators {
    
    public LogicalOperatorsSub() {
        super();
    }
    
    @.java.lang.Override
    public final .java.lang.Object logical() {
        setB1((
            let
            {
                boolean $ceylontmpopV13 = super.getB1() || super.getB2();
                super.setB1($ceylontmpopV13);
            }
            returning $ceylontmpopV13;
        ));
        setB1((
            let
            {
                boolean $ceylontmpopV15 = super.getB1() && super.getB2();
                super.setB1($ceylontmpopV15);
            }
            returning $ceylontmpopV15;
        ));
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object logicalBoxed() {
        setBoxedB1(.ceylon.language.Boolean.instance((
            let
            {
                boolean $ceylontmpopV17 = super.getBoxedB1().booleanValue() || super.getBoxedB2().booleanValue();
                super.setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpopV17));
            }
            returning $ceylontmpopV17;
        )));
        setBoxedB1(.ceylon.language.Boolean.instance((
            let
            {
                boolean $ceylontmpopV19 = super.getBoxedB1().booleanValue() && super.getBoxedB2().booleanValue();
                super.setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpopV19));
            }
            returning $ceylontmpopV19;
        )));
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperatorsSub();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperatorsSub.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.LogicalOperatorsSub.class);
}