package com.redhat.ceylon.compiler.java.test.structure.concrete;

class ListImplementor<X> implements .ceylon.language.List<X> {
    
    ListImplementor() {
        this.$ceylon$language$List$this = new .ceylon.language.List$impl<X>(this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<X>(this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<X, .java.lang.Object>(this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<X, .java.lang.Object>(this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends X>>((.ceylon.language.Cloneable<.ceylon.language.Collection<? extends X>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, X>(this);
        this.$ceylon$language$Ranged$this = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends X>>(this);
    }
    protected final .ceylon.language.List$impl<X> $ceylon$language$List$this;
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$List$this.getSize();
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this.defines(index);
    }
    
    @.java.lang.Override
    public X getFirst() {
        return $ceylon$language$List$this.getFirst();
    }
    
    @.java.lang.Override
    public X getLast() {
        return $ceylon$language$List$this.getLast();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withLeading(final Other element) {
        return $ceylon$language$List$this.withLeading(element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withTrailing(final Other element) {
        return $ceylon$language$List$this.withTrailing(element);
    }
    protected final .ceylon.language.Collection$impl<X> $ceylon$language$Collection$this;
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Collection$this.getEmpty();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Collection$this.contains(element);
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return $ceylon$language$Collection$this.toString();
    }
    protected final .ceylon.language.Iterable$impl<X, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ?> getRest() {
        return $ceylon$language$Iterable$this.getRest();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ?> map(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ?> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold(initial, accumulating);
    }
    
    @.java.lang.Override
    public X find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public X findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.collect(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ?> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ?> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ?> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ?> getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends X>, ?> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ?> chain(final .ceylon.language.Iterable<? extends Other, ?> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ?>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.chain(other);
    }
    protected final .ceylon.language.Container$impl<X, .java.lang.Object> $ceylon$language$Container$this;
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    protected final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends X>> $ceylon$language$Cloneable$this;
    protected final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, X> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this.getKeys();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ?> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ?> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> items(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ?> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    protected final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends X>> $ceylon$language$Ranged$this;
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> getClone() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> segment(final .ceylon.language.Integer from, final long length) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getLastIndex() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> span(final .ceylon.language.Integer from, final .ceylon.language.Integer to) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> spanFrom(final .ceylon.language.Integer from) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> spanTo(final .ceylon.language.Integer to) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final int hashCode() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final boolean equals(final .java.lang.Object other) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final X item(final .ceylon.language.Integer index) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> getReversed() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterator<? extends X> getIterator() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor();
    }
}