package com.redhat.ceylon.compiler.java.test.structure.concrete;

class ListImplementor<X> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.List<X> {
    
    ListImplementor(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedX) {
        this.$reifiedX = $reifiedX;
        this.$ceylon$language$List$this = new .ceylon.language.List$impl<X>($reifiedX, this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<X>($reifiedX, this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<X, .java.lang.Object>($reifiedX, .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<X, .java.lang.Object>($reifiedX, .ceylon.language.Null.$TypeDescriptor, this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends X>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Collection.class, $reifiedX), (.ceylon.language.Cloneable<.ceylon.language.Collection<? extends X>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, X>(.ceylon.language.Integer.$TypeDescriptor, $reifiedX, this);
        this.$ceylon$language$Ranged$this = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends X>>(.ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.List.class, $reifiedX), this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedX;
    protected final .ceylon.language.List$impl<X> $ceylon$language$List$this;
    
    @.java.lang.Override
    public .ceylon.language.List$impl<X> $ceylon$language$List$impl() {
        return $ceylon$language$List$this;
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$List$this.getSize();
    }
    
    @.java.lang.Override
    public boolean shorterThan(final long length) {
        return $ceylon$language$List$this.shorterThan(length);
    }
    
    @.java.lang.Override
    public boolean longerThan(final long length) {
        return $ceylon$language$List$this.longerThan(length);
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this.defines(index);
    }
    
    @.java.lang.Override
    public X findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public X getFirst() {
        return $ceylon$language$List$this.getFirst();
    }
    
    @.java.lang.Override
    public X getLast() {
        return $ceylon$language$List$this.getLast();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withLeading(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final Other element) {
        return $ceylon$language$List$this.withLeading($reifiedOther, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withTrailing(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final Other element) {
        return $ceylon$language$List$this.withTrailing($reifiedOther, element);
    }
    
    @.java.lang.Override
    public boolean startsWith(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this.startsWith(sublist);
    }
    
    @.java.lang.Override
    public boolean endsWith(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this.endsWith(sublist);
    }
    
    @.java.lang.Override
    public boolean includesAt(final long index, final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this.includesAt(index, sublist);
    }
    
    @.java.lang.Override
    public boolean includes(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this.includes(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> inclusions(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this.inclusions(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstInclusion(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this.firstInclusion(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastInclusion(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this.lastInclusion(sublist);
    }
    
    @.java.lang.Override
    public boolean occursAt(final long index, final .java.lang.Object element) {
        return $ceylon$language$List$this.occursAt(index, element);
    }
    
    @.java.lang.Override
    public boolean occurs(final .java.lang.Object element) {
        return $ceylon$language$List$this.occurs(element);
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$List$this.contains(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> occurrences(final .java.lang.Object element) {
        return $ceylon$language$List$this.occurrences(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstOccurrence(final .java.lang.Object element) {
        return $ceylon$language$List$this.firstOccurrence(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastOccurrence(final .java.lang.Object element) {
        return $ceylon$language$List$this.lastOccurrence(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> indexes(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this.indexes(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> trim(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$List$this.trim(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> trimLeading(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$List$this.trimLeading(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> trimTrailing(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$List$this.trimTrailing(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> initial(final long length) {
        return $ceylon$language$List$this.initial(length);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> terminal(final long length) {
        return $ceylon$language$List$this.terminal(length);
    }
    protected final .ceylon.language.Collection$impl<X> $ceylon$language$Collection$this;
    
    @.java.lang.Override
    public .ceylon.language.Collection$impl<X> $ceylon$language$Collection$impl() {
        return $ceylon$language$Collection$this;
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Collection$this.getEmpty();
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return $ceylon$language$Collection$this.toString();
    }
    protected final .ceylon.language.Iterable$impl<X, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<X, .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this;
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map($reifiedResult, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold($reifiedResult, initial, accumulating);
    }
    
    @.java.lang.Override
    public X find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedResult, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.collect($reifiedResult, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> skippingWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> skip) {
        return $ceylon$language$Iterable$this.skippingWhile(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> takingWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> take) {
        return $ceylon$language$Iterable$this.takingWhile(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends X>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> following(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final Other head) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.following($reifiedOther, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent> chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOther, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedOtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends OtherAbsent>)$ceylon$language$Iterable$this.chain($reifiedOther, $reifiedOtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedDefault, final Default defaultValue) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.defaultNullElements($reifiedDefault, defaultValue);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> getCycled() {
        return $ceylon$language$Iterable$this.getCycled();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> cycle(final long times) {
        return $ceylon$language$Iterable$this.cycle(times);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> repeat(final long times) {
        return $ceylon$language$Iterable$this.repeat(times);
    }
    protected final .ceylon.language.Container$impl<X, .java.lang.Object> $ceylon$language$Container$this;
    
    @.java.lang.Override
    public .ceylon.language.Container$impl<X, .java.lang.Object> $ceylon$language$Container$impl() {
        return $ceylon$language$Container$this;
    }
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    protected final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends X>> $ceylon$language$Cloneable$this;
    
    @.java.lang.Override
    public .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends X>> $ceylon$language$Cloneable$impl() {
        return $ceylon$language$Cloneable$this;
    }
    protected final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, X> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    public .ceylon.language.Correspondence$impl<.ceylon.language.Integer, X> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this;
    }
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this.getKeys();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> items(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    protected final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends X>> $ceylon$language$Ranged$this;
    
    @.java.lang.Override
    public .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends X>> $ceylon$language$Ranged$impl() {
        return $ceylon$language$Ranged$this;
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> getClone() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> segment(final .ceylon.language.Integer from, final long length) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getLastIndex() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> span(final .ceylon.language.Integer from, final .ceylon.language.Integer to) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> spanFrom(final .ceylon.language.Integer from) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> spanTo(final .ceylon.language.Integer to) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final int hashCode() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final boolean equals(final .java.lang.Object other) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final X get(final .ceylon.language.Integer index) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> getReversed() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterator<? extends X> iterator() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.List<? extends X> getRest() {
        return (.ceylon.language.List).ceylon.language.nothing_.get_();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor.class, $reifiedX);
    }
}