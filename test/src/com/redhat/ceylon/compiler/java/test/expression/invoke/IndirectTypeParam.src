package com.redhat.ceylon.compiler.java.test.expression.invoke;

final class indirectTypeParam_topLevel_ {
    
    private indirectTypeParam_topLevel_() {
    }
    
    static <T>T indirectTypeParam_topLevel(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final T t) {
        return t;
    }
}
final class indirectTypeParam_ {
    
    private indirectTypeParam_() {
    }
    
    static <X>void indirectTypeParam(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedX) {
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> f1 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), "Integer(Integer)"){
            
            @.java.lang.Override
            public .ceylon.language.Integer $call(final .java.lang.Object $param$0) {
                final .ceylon.language.Integer $$t = (.ceylon.language.Integer)$param$0;
                return .com.redhat.ceylon.compiler.java.test.expression.invoke.indirectTypeParam_topLevel_.<.ceylon.language.Integer>indirectTypeParam_topLevel(.ceylon.language.Integer.$TypeDescriptor, $$t);
            }
        };
        long i = f1.$call(.ceylon.language.Integer.instance(1L)).longValue();
        
        final class local_ {
            
            private local_() {
            }
            
            <T>T local(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final T t) {
                return t;
            }
        }
        final local_ local = new local_();
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> f2 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), "Integer(Integer)"){
            
            @.java.lang.Override
            public .ceylon.language.Integer $call(final .java.lang.Object $param$0) {
                final .ceylon.language.Integer $$t = (.ceylon.language.Integer)$param$0;
                return local.<.ceylon.language.Integer>local(.ceylon.language.Integer.$TypeDescriptor, $$t);
            }
        };
        i = f2.$call(.ceylon.language.Integer.instance(1L)).longValue();
        
        final class mpl_ {
            
            private mpl_() {
            }
            
            <T>.ceylon.language.Callable<? extends .java.lang.Object> mpl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedT, final T t) {
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, "Anything()"){
                    
                    @.java.lang.Override
                    public .java.lang.Object $call() {
                        throw new .ceylon.language.Exception(null, null);
                    }
                };
            }
        }
        final mpl_ mpl = new mpl_();
        
        final class f3_ {
            
            private f3_() {
            }
            
            .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .java.lang.Object>> f3(final long i) {
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Anything.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.Empty.$TypeDescriptor, "Anything()()"){
                    
                    @.java.lang.Override
                    public .ceylon.language.Callable<? extends .java.lang.Object> $call() {
                        return mpl.<.ceylon.language.Integer>mpl(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(i));
                    }
                };
            }
        }
        final f3_ f3 = new f3_();
        f3.f3(1L).$call();
        final .ceylon.language.Callable<? extends .ceylon.language.Sequential<? extends .java.lang.Object>> j = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Sequential<? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Object.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Iterable.class, .ceylon.language.Object.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor)), "Object[]({Object*}*)"){
            
            @.java.lang.Override
            public .ceylon.language.Sequential<? extends .java.lang.Object> $call() {
                return .ceylon.language.join_.<.java.lang.Object>join(.ceylon.language.Object.$TypeDescriptor);
            }
            
            @.java.lang.Override
            public .ceylon.language.Sequential<? extends .java.lang.Object> $call(final .java.lang.Object $param$0) {
                final .ceylon.language.Sequential $$iterables = (.ceylon.language.Sequential<? extends .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>>)(.ceylon.language.Sequential)$param$0;
                return .ceylon.language.join_.<.java.lang.Object>join(.ceylon.language.Object.$TypeDescriptor, $$iterables);
            }
        };
        final .ceylon.language.Callable<? extends .ceylon.language.Sequential<? extends X>> j2 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Sequential<? extends X>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, $reifiedX), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Iterable.class, $reifiedX, .ceylon.language.Null.$TypeDescriptor)), "X[]({X*}*)"){
            
            @.java.lang.Override
            public .ceylon.language.Sequential<? extends X> $call() {
                return .ceylon.language.join_.<X>join($reifiedX);
            }
            
            @.java.lang.Override
            public .ceylon.language.Sequential<? extends X> $call(final .java.lang.Object $param$0) {
                final .ceylon.language.Sequential $$iterables = (.ceylon.language.Sequential<? extends .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object>>)(.ceylon.language.Sequential)$param$0;
                return .ceylon.language.join_.<X>join($reifiedX, $$iterables);
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.indirectTypeParam_.indirectTypeParam(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
}