package com.redhat.ceylon.compiler.java.test.issues.bug04xx;

class Bug404 {
    
    Bug404() {
    }
    
    private final void test() {
        boolean sync;
        sync = (
            let
            {
                .ceylon.language.String $ceylontmp0 = .ceylon.language.String.instance(.ceylon.language.Float.toString(1.0));
            }
            returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>(.ceylon.language.String.instance("1"), .ceylon.language.String.instance("1.0")).contains($ceylontmp0);
        );
        final .ceylon.language.List<? extends .ceylon.language.String> empty = (.ceylon.language.List).ceylon.language.empty_.getEmpty$();
        sync = !(
            let
            {
                .java.lang.Object $ceylontmp4 = (
                    let
                    {
                        .ceylon.language.FixedSized<? extends .ceylon.language.String> $spreadTest$1 = (.ceylon.language.FixedSized<? extends .ceylon.language.String>)empty;
                    }
                    returning (.ceylon.language.List<? extends .ceylon.language.String>)(!$spreadTest$1.getEmpty() ? (
                        let
                        {
                            .ceylon.language.Sequence<? extends .ceylon.language.String> $spread$2$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)$spreadTest$1;
                            int $spread$2$2 = (int)$spread$2$0.getSize();
                            .ceylon.language.String[] $spread$2$4 = new .ceylon.language.String[$spread$2$2];
                            for (int $index$3 = 0; $index$3 < $spread$2$2; $index$3++) $spread$2$4[$index$3] = .ceylon.language.String.instance($spread$2$0.item(.ceylon.language.Integer.instance($index$3)).getUppercased());
                        }
                        returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>($spread$2$4);
                    ) : .ceylon.language.empty_.getEmpty$());
                );
            }
            returning $ceylontmp4 instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$ceylontmp4).getEmpty();
        );
        final .ceylon.language.List<? extends .ceylon.language.String> full = new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>(.ceylon.language.String.instance("foo"));
        sync = (
            let
            {
                .java.lang.Object $ceylontmp8 = (
                    let
                    {
                        .ceylon.language.FixedSized<? extends .ceylon.language.String> $spreadTest$5 = (.ceylon.language.FixedSized<? extends .ceylon.language.String>)full;
                    }
                    returning (.ceylon.language.List<? extends .ceylon.language.String>)(!$spreadTest$5.getEmpty() ? (
                        let
                        {
                            .ceylon.language.Sequence<? extends .ceylon.language.String> $spread$6$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)$spreadTest$5;
                            int $spread$6$2 = (int)$spread$6$0.getSize();
                            .ceylon.language.String[] $spread$6$4 = new .ceylon.language.String[$spread$6$2];
                            for (int $index$7 = 0; $index$7 < $spread$6$2; $index$7++) $spread$6$4[$index$7] = .ceylon.language.String.instance($spread$6$0.item(.ceylon.language.Integer.instance($index$7)).getUppercased());
                        }
                        returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>($spread$6$4);
                    ) : .ceylon.language.empty_.getEmpty$());
                );
            }
            returning $ceylontmp8 instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$ceylontmp8).getEmpty();
        );
        final .ceylon.language.List<? extends .ceylon.language.String> spread1 = (
            let
            {
                .ceylon.language.FixedSized<? extends .ceylon.language.String> $spreadTest$9 = (.ceylon.language.FixedSized<? extends .ceylon.language.String>)full;
            }
            returning (.ceylon.language.List<? extends .ceylon.language.String>)(!$spreadTest$9.getEmpty() ? (
                let
                {
                    .ceylon.language.Sequence<? extends .ceylon.language.String> $spread$10$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)$spreadTest$9;
                    int $spread$10$2 = (int)$spread$10$0.getSize();
                    .ceylon.language.String[] $spread$10$4 = new .ceylon.language.String[$spread$10$2];
                    for (int $index$11 = 0; $index$11 < $spread$10$2; $index$11++) $spread$10$4[$index$11] = .ceylon.language.String.instance($spread$10$0.item(.ceylon.language.Integer.instance($index$11)).getUppercased());
                }
                returning new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.String>($spread$10$4);
            ) : .ceylon.language.empty_.getEmpty$());
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug404();
    }
}