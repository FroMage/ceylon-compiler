package com.redhat.ceylon.compiler.java.test.issues.bug04xx;

class Bug404 {
    
    Bug404() {
    }
    
    private final void test() {
        boolean sync;
        sync = (
            let
            {
                .ceylon.language.String $ceylontmp0 = .ceylon.language.String.instance(.ceylon.language.Float.toString(1.0));
            }
            returning new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Empty>>(.ceylon.language.String.instance("1"), new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Empty>(.ceylon.language.String.instance("1.0"), .ceylon.language.empty_.getEmpty$())).contains($ceylontmp0);
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.String> empty = (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
        sync = !(
            let
            {
                .java.lang.Object $ceylontmp2 = (
                    let
                    {
                        .ceylon.language.Iterable<? extends .ceylon.language.String> $spread$1$iterable = empty;
                        .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$1$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>();
                        .java.lang.Object $spread$1$iteration;
                        for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$1$iterator = $spread$1$iterable.getIterator(); !(($spread$1$iteration = $spread$1$iterator.next()) instanceof .ceylon.language.Finished); ) {
                            .ceylon.language.String $spread$1$element = (.ceylon.language.String)$spread$1$iteration;
                            $spread$1$sequenceBuilder.append(.ceylon.language.String.instance($spread$1$element.getUppercased()));
                        }
                    }
                    returning $spread$1$sequenceBuilder.getSequence();
                );
            }
            returning $ceylontmp2 instanceof .ceylon.language.Sequence;
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.String> full = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Empty>(.ceylon.language.String.instance("foo"), .ceylon.language.empty_.getEmpty$());
        sync = (
            let
            {
                .java.lang.Object $ceylontmp4 = (
                    let
                    {
                        .ceylon.language.Iterable<? extends .ceylon.language.String> $spread$3$iterable = full;
                        .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$3$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>();
                        .java.lang.Object $spread$3$iteration;
                        for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$3$iterator = $spread$3$iterable.getIterator(); !(($spread$3$iteration = $spread$3$iterator.next()) instanceof .ceylon.language.Finished); ) {
                            .ceylon.language.String $spread$3$element = (.ceylon.language.String)$spread$3$iteration;
                            $spread$3$sequenceBuilder.append(.ceylon.language.String.instance($spread$3$element.getUppercased()));
                        }
                    }
                    returning $spread$3$sequenceBuilder.getSequence();
                );
            }
            returning $ceylontmp4 instanceof .ceylon.language.Sequence;
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.String> spread1 = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String> $spread$5$iterable = full;
                .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$5$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>();
                .java.lang.Object $spread$5$iteration;
                for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$5$iterator = $spread$5$iterable.getIterator(); !(($spread$5$iteration = $spread$5$iterator.next()) instanceof .ceylon.language.Finished); ) {
                    .ceylon.language.String $spread$5$element = (.ceylon.language.String)$spread$5$iteration;
                    $spread$5$sequenceBuilder.append(.ceylon.language.String.instance($spread$5$element.getUppercased()));
                }
            }
            returning $spread$5$sequenceBuilder.getSequence();
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug404();
    }
}