package com.redhat.ceylon.compiler.java.test.expression.erasure;

interface Top {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Top$impl();
    
    public abstract .java.lang.Object top();
    
    public abstract long getTopAttribute();
    
    public abstract .java.lang.Object getLeftAndRightAttribute();
    
    public abstract .java.lang.Object leftAndRightMethod(final .java.lang.Object param);
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.Top.class);
}
final class Top$impl {
    
    Top$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.Top $this) {
    }
}
interface Left extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Left$impl();
    
    public abstract .java.lang.Object left();
    
    public abstract long getLeftAttribute();
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.Left.class);
}
final class Left$impl {
    
    Left$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.Left $this) {
    }
}
interface Right extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.Right$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Right$impl();
    
    public abstract .java.lang.Object right();
    
    public abstract long getRightAttribute();
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.Right.class);
}
final class Right$impl {
    
    Right$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.Right $this) {
    }
}
class CMiddle implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, .com.redhat.ceylon.compiler.java.test.expression.erasure.Right {
    
    CMiddle() {
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this$ = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl(this);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this$ = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl(this);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Right$this$ = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Right$impl(this);
        this.topAttribute = 1L;
        this.leftAttribute = 1L;
        this.rightAttribute = 1L;
        this.leftAndRightAttribute = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this$;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Left$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this$;
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this$;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Top$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this$;
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.Right$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Right$this$;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.Right$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Right$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$Right$this$;
    }
    
    @.java.lang.Override
    public final .java.lang.Object left() {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object top() {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object right() {
        return null;
    }
    private final long topAttribute;
    
    @.java.lang.Override
    public final long getTopAttribute() {
        return topAttribute;
    }
    private final long leftAttribute;
    
    @.java.lang.Override
    public final long getLeftAttribute() {
        return leftAttribute;
    }
    private final long rightAttribute;
    
    @.java.lang.Override
    public final long getRightAttribute() {
        return rightAttribute;
    }
    private final .java.lang.Object leftAndRightAttribute;
    
    @.java.lang.Override
    public final .java.lang.Object getLeftAndRightAttribute() {
        return leftAndRightAttribute;
    }
    
    @.java.lang.Override
    public final .java.lang.Object leftAndRightMethod(final .java.lang.Object param) {
        return param;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle.class);
}
class CLeft implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.expression.erasure.Left {
    
    CLeft() {
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this$ = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl(this);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this$ = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl(this);
        this.topAttribute = 1L;
        this.leftAttribute = 1L;
        this.leftAndRightAttribute = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this$;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Left$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this$;
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this$;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Top$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this$;
    }
    
    @.java.lang.Override
    public final .java.lang.Object left() {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object top() {
        return null;
    }
    private final long topAttribute;
    
    @.java.lang.Override
    public final long getTopAttribute() {
        return topAttribute;
    }
    private final long leftAttribute;
    
    @.java.lang.Override
    public final long getLeftAttribute() {
        return leftAttribute;
    }
    private final .java.lang.Object leftAndRightAttribute;
    
    @.java.lang.Override
    public final .java.lang.Object getLeftAndRightAttribute() {
        return leftAndRightAttribute;
    }
    
    @.java.lang.Override
    public final .java.lang.Object leftAndRightMethod(final .java.lang.Object param) {
        return param;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft.class);
}
interface EmptyInterface {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$EmptyInterface$impl();
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface.class);
}
final class EmptyInterface$impl {
    
    EmptyInterface$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface $this) {
    }
}
class MyException extends .ceylon.language.Exception implements .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface {
    
    MyException(final .ceylon.language.String m, final .java.lang.Exception x) {
        super(m, x);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$EmptyInterface$this$ = new .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface$impl(this);
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$EmptyInterface$this$;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$EmptyInterface$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$EmptyInterface$this$;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.erasure.MyException.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.MyException.class);
}
interface MyNumeric extends .ceylon.language.Numeric<.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric>, .ceylon.language.Integral<.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric>, .ceylon.language.Comparable<.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric> {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$MyNumeric$impl();
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric.class);
}
final class MyNumeric$impl {
    
    MyNumeric$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric $this) {
    }
}
class Test implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    Test(final .java.lang.Object n) {
        this.n = n;
        this.leftAttribute = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
        this.middleAttribute = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    private final .java.lang.Object n;
    
    private final .java.lang.Object getN$priv$() {
        return n;
    }
    
    private final void takesTop$priv$(final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top top) {
    }
    
    private final void takesLeft$priv$(final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left left) {
    }
    
    private final .java.lang.Object givesLeftAndRight$priv$() {
        return new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    private .com.redhat.ceylon.compiler.java.test.expression.erasure.Left leftAttribute;
    
    public final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left getLeftAttribute() {
        return leftAttribute;
    }
    
    public final void setLeftAttribute(final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left leftAttribute) {
        this.leftAttribute = leftAttribute;
    }
    private .java.lang.Object middleAttribute;
    
    public final .java.lang.Object getMiddleAttribute() {
        return middleAttribute;
    }
    
    public final void setMiddleAttribute(final .java.lang.Object middleAttribute) {
        this.middleAttribute = middleAttribute;
    }
    
    private final void testUnion$priv$() {
        final .java.lang.Object middle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).top();
        final long n1 = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).getTopAttribute();
        takesTop$priv$((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle);
        .java.lang.Object middle$1;
        if ((middle$1 = middle) instanceof .com.redhat.ceylon.compiler.java.test.expression.erasure.Left) {
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left middle$2 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle$1;
            final long n2 = middle$2.getLeftAttribute();
            middle$2.left();
            takesLeft$priv$(middle$2);
        }
    }
    
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left testIntersection$priv$(final .java.lang.Object p1, final .java.lang.Object p1OrNull, final .java.lang.Object tops, final .java.lang.Object topsOrNull, final .java.lang.Object erasedTest) {
        final .java.lang.Object middle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).top();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle).left();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)middle).right();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)givesLeftAndRight$priv$()).top();
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle().top();
        long sync = 0L;
        sync = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).getTopAttribute();
        sync = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle).getLeftAttribute();
        sync = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)middle).getRightAttribute();
        sync = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)givesLeftAndRight$priv$()).getTopAttribute();
        sync = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle().getTopAttribute();
        takesTop$priv$((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle);
        takesLeft$priv$((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle);
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.Top arg$3$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle;
                takesTop$priv$(arg$3$0);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.Left arg$4$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle;
                takesLeft$priv$(arg$4$0);
            }
            returning null;
        );
        .java.lang.Object middleVar = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left left2;
        left2 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        .com.redhat.ceylon.compiler.java.test.expression.erasure.Left left3 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        left3 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        setLeftAttribute((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar);
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).setLeftAttribute((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar);
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle)(
            let
            {
                .java.lang.Object $ceylontmp$op$5 = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
                middleVar = $ceylontmp$op$5;
            }
            returning $ceylontmp$op$5;
        )).left();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)(
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.Test $ceylontmp$opE$6 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest;
                .java.lang.Object $ceylontmp$opV$7 = middleVar;
                $ceylontmp$opE$6.setMiddleAttribute($ceylontmp$opV$7);
            }
            returning $ceylontmp$opV$7;
        )).left();
        final .ceylon.language.Entry entry = new .ceylon.language.Entry(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection(.ceylon.language.Number.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection(.ceylon.language.Number.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface.$TypeDescriptor$), p1, p1);
        if (true || true) {
            final .java.lang.Object x = new .com.redhat.ceylon.compiler.java.test.expression.erasure.MyException(null, null);
            ((.java.lang.Exception)x).printStackTrace();
            final .java.lang.Throwable cause = ((.java.lang.Exception)x).getCause();
            throw (.java.lang.Throwable)x;
        }
        return (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle;
    }
    
    private final void testNullHandlingOperators$priv$(final .java.lang.Object p1, final .java.lang.Object p1OrNull) {
        .java.lang.Object p1OrNull$10;
        if ((p1OrNull$10 = p1OrNull) != null) {
            final .java.lang.Object p1OrNull$11 = p1OrNull$10;
        }
        boolean bSync = false;
        bSync = p1OrNull != null;
        final .java.lang.Object p2 = (
            let
            {
                .java.lang.Object $ceylontmp$12 = p1OrNull;
            }
            returning $ceylontmp$12 != null ? $ceylontmp$12 : p1;
        );
        final .ceylon.language.Number n = (.ceylon.language.Number)(
            let
            {
                .java.lang.Object $ceylontmp$13 = p1OrNull;
            }
            returning $ceylontmp$13 != null ? $ceylontmp$13 : p1;
        );
    }
    
    private final void testArithmeticOperators$priv$(final .java.lang.Object p1, final .java.lang.Object erasedTest) {
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric unboxed = (.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric)p1;
        final .java.lang.Object boxed = this.getN$priv$();
        .java.lang.Object n = this.getN$priv$();
        .com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric sync = null;
        sync = ((.ceylon.language.Summable<.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric>)(.ceylon.language.Summable)n).plus((.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric)n);
        sync = ((.ceylon.language.Invertable<.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric>)(.ceylon.language.Invertable)n).minus((.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric)n);
        sync = ((.ceylon.language.Numeric<.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric>)(.ceylon.language.Numeric)n).times((.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric)n);
        sync = ((.ceylon.language.Integral<.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric>)(.ceylon.language.Integral)n).remainder((.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric)n);
        sync = ((.ceylon.language.Invertable<.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric>)(.ceylon.language.Invertable)n).getNegated();
        sync = (.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric)n;
    }
    
    private final void testComparisonOperators$priv$(final .java.lang.Object p1, final .java.lang.Object erasedTest, final .java.lang.Object container) {
        boolean sync = false;
        sync = erasedTest == erasedTest;
        sync = p1.equals(p1);
        sync = ((.ceylon.language.Comparable<? super .com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric>)(.ceylon.language.Comparable)p1).compare((.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric)p1) == .ceylon.language.smaller_.get_();
        final .ceylon.language.Comparison cmp = ((.ceylon.language.Comparable<? super .com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric>)(.ceylon.language.Comparable)p1).compare((.com.redhat.ceylon.compiler.java.test.expression.erasure.MyNumeric)p1);
        sync = (
            let
            {
                .java.lang.Object $ceylontmp$14 = p1;
            }
            returning ((.ceylon.language.Category<? super .java.lang.Object>)(.ceylon.language.Category)container).contains($ceylontmp$14);
        );
        if (p1 instanceof .ceylon.language.Category && .com.redhat.ceylon.compiler.java.Util.isReified(p1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Category.class, .ceylon.language.Object.$TypeDescriptor$))) {
        }
        sync = (
            let
            {
                .java.lang.Object $ceylontmp$17 = p1;
            }
            returning $ceylontmp$17 instanceof .ceylon.language.Category && .com.redhat.ceylon.compiler.java.Util.isReified($ceylontmp$17, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Category.class, .ceylon.language.Object.$TypeDescriptor$));
        );
    }
    
    private final void testSequences$priv$(final .java.lang.Object p1, final .java.lang.Object leftsAndRights, final .java.lang.Object leftsAndRightsEntries, final .java.lang.Object topsOrNull) {
        final .java.lang.Object naturals = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, new .java.lang.Object[]{p1});
        final .ceylon.language.Integer n5 = (.ceylon.language.Integer)((.ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .java.lang.Object>)(.ceylon.language.Correspondence)naturals).get((.ceylon.language.Integer)p1);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top t = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)((.ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .java.lang.Object>)(.ceylon.language.Correspondence)leftsAndRights).get((.ceylon.language.Integer)p1);
        final .java.lang.Object naturalsOrNull = new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, new .java.lang.Object[]{p1});
        .java.lang.Object subrange = null;
        subrange = (.ceylon.language.Sequential<? extends .java.lang.Object>)(.ceylon.language.Sequential)((.ceylon.language.Ranged<? super .ceylon.language.Integer, .java.lang.Object, ? extends .ceylon.language.Sequential<? extends .java.lang.Object>>)(.ceylon.language.Ranged)naturals).span((.ceylon.language.Integer)p1, (.ceylon.language.Integer)p1);
        subrange = (.ceylon.language.Sequential<? extends .java.lang.Object>)(.ceylon.language.Sequential)((.ceylon.language.Ranged<? super .ceylon.language.Integer, .java.lang.Object, ? extends .ceylon.language.Sequential<? extends .java.lang.Object>>)(.ceylon.language.Ranged)naturals).spanFrom((.ceylon.language.Integer)p1);
        subrange = (.ceylon.language.Sequential<? extends .java.lang.Object>)(.ceylon.language.Sequential)((.ceylon.language.Ranged<? super .ceylon.language.Integer, .java.lang.Object, ? extends .ceylon.language.Sequential<? extends .java.lang.Object>>)(.ceylon.language.Ranged)naturals).spanTo((.ceylon.language.Integer)p1);
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> plainIntegers = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)new .ceylon.language.Tuple(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, new .java.lang.Object[]{p1});
        final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> iterable$20 = (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)naturals;
        final boolean isArraySequence$21 = iterable$20 instanceof .ceylon.language.ArraySequence;
        .java.lang.Object elem$18 = null;
        final .java.lang.Object array$22;
        int i$23 = 0;
        final int length$24;
        if (isArraySequence$21) {
            array$22 = ((.ceylon.language.ArraySequence)iterable$20).$getArray$();
            i$23 = ((.ceylon.language.ArraySequence)iterable$20).$getFirst$();
            length$24 = i$23 + ((.ceylon.language.ArraySequence)iterable$20).$getLength$();
        } else {
            array$22 = null;
            length$24 = 0;
        }
        .ceylon.language.Iterator<? extends .java.lang.Object> it$iterator$$19 = isArraySequence$21 ? null : iterable$20.iterator();
        loop_0: while (isArraySequence$21 ? i$23 < length$24 : !((elem$18 = it$iterator$$19.next()) instanceof .ceylon.language.Finished)) {
            if (isArraySequence$21) elem$18 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$22, i$23++);
            final .java.lang.Object it = (.java.lang.Object)elem$18;
            final .ceylon.language.Numeric<.ceylon.language.Integer> n6 = (.ceylon.language.Numeric)it;
        }
        .java.lang.Object elem$25;
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left> itLeft$iterator$$26 = ((.ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRights).iterator();
        loop_1: while (!((elem$25 = itLeft$iterator$$26.next()) instanceof .ceylon.language.Finished)) {
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left itLeft = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)elem$25;
            itLeft.top();
            itLeft.left();
        }
        .java.lang.Object elem$27;
        .ceylon.language.Iterator<? extends .java.lang.Object> itErased$iterator$$28 = ((.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRights).iterator();
        loop_2: while (!((elem$27 = itErased$iterator$$28.next()) instanceof .ceylon.language.Finished)) {
            final .java.lang.Object itErased = (.java.lang.Object)elem$27;
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErased).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErased).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErased).right();
        }
        .java.lang.Object elem$29;
        .ceylon.language.Iterator<? extends .java.lang.Object> itErasedValue$iterator$$30 = ((.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRights).iterator();
        loop_3: while (!((elem$29 = itErasedValue$iterator$$30.next()) instanceof .ceylon.language.Finished)) {
            final .java.lang.Object itErasedValue = (.java.lang.Object)elem$29;
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErasedValue).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErasedValue).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErasedValue).right();
        }
        .java.lang.Object elem$31;
        .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left>> itLeft1$iterator$$32 = ((.ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRightsEntries).iterator();
        loop_4: while (!((elem$31 = itLeft1$iterator$$32.next()) instanceof .ceylon.language.Finished)) {
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left itLeft1 = ((.ceylon.language.Entry<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left>)elem$31).getKey();
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left itLeft2 = ((.ceylon.language.Entry<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left>)elem$31).getItem();
            itLeft1.top();
            itLeft1.left();
            itLeft2.top();
            itLeft2.left();
        }
        .java.lang.Object elem$33;
        .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .java.lang.Object, ? extends .java.lang.Object>> itErased1$iterator$$34 = ((.ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .java.lang.Object, ? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRightsEntries).iterator();
        loop_5: while (!((elem$33 = itErased1$iterator$$34.next()) instanceof .ceylon.language.Finished)) {
            final .java.lang.Object itErased1 = ((.ceylon.language.Entry)elem$33).getKey();
            final .java.lang.Object itErased2 = ((.ceylon.language.Entry)elem$33).getItem();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErased1).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErased1).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErased1).right();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErased2).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErased2).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErased2).right();
        }
        .java.lang.Object elem$35;
        .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .java.lang.Object, ? extends .java.lang.Object>> itErasedValue1$iterator$$36 = ((.ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .java.lang.Object, ? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRightsEntries).iterator();
        loop_6: while (!((elem$35 = itErasedValue1$iterator$$36.next()) instanceof .ceylon.language.Finished)) {
            final .java.lang.Object itErasedValue1 = ((.ceylon.language.Entry)elem$35).getKey();
            final .java.lang.Object itErasedValue2 = ((.ceylon.language.Entry)elem$35).getItem();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErasedValue1).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErasedValue1).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErasedValue1).right();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErasedValue2).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErasedValue2).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErasedValue2).right();
        }
        final .ceylon.language.Sequence<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top> topSequence = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle, .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle>>(.com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle.$TypeDescriptor$, new .java.lang.Object[]{new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle()});
        final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top, ? extends .java.lang.Object> iterable$39 = topSequence;
        final boolean isArraySequence$40 = iterable$39 instanceof .ceylon.language.ArraySequence;
        .java.lang.Object elem$37 = null;
        final .java.lang.Object array$41;
        int i$42 = 0;
        final int length$43;
        if (isArraySequence$40) {
            array$41 = ((.ceylon.language.ArraySequence)iterable$39).$getArray$();
            i$42 = ((.ceylon.language.ArraySequence)iterable$39).$getFirst$();
            length$43 = i$42 + ((.ceylon.language.ArraySequence)iterable$39).$getLength$();
        } else {
            array$41 = null;
            length$43 = 0;
        }
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top> it$iterator$$38 = isArraySequence$40 ? null : iterable$39.iterator();
        loop_7: while (isArraySequence$40 ? i$42 < length$43 : !((elem$37 = it$iterator$$38.next()) instanceof .ceylon.language.Finished)) {
            if (isArraySequence$40) elem$37 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$41, i$42++);
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top it = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)elem$37;
            it.top();
        }
        long sync = 0L;
        sync = ((.ceylon.language.List<? extends .java.lang.Object>)(.ceylon.language.List)naturals).getSize();
        sync = ((.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRights).getSize();
        .java.lang.Object naturals$45;
        if ((naturals$45 = naturals) instanceof .ceylon.language.Sequence) {
            final .ceylon.language.Sequence<? extends .java.lang.Object> naturals$46 = (.ceylon.language.Sequence<? extends .java.lang.Object>)(.ceylon.language.Sequence)naturals$45;
        }
        boolean bSync = false;
        bSync = (
            let
            {
                .java.lang.Object $ceylontmp$47 = naturals;
            }
            returning $ceylontmp$47 instanceof .ceylon.language.Sequence;
        );
        final .ceylon.language.Sequential spreadMember = (.ceylon.language.Sequential)(.ceylon.language.Sequence)(
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top, ? extends .java.lang.Object> spread$48$iterable$ = (.ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRights;
                .ceylon.language.SequenceBuilder spread$48$sb$ = new .ceylon.language.SequenceBuilder(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection(.com.redhat.ceylon.compiler.java.test.expression.erasure.Left.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.expression.erasure.Right.$TypeDescriptor$));
                .java.lang.Object spread$48$iteration$;
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top> spread$48$iterator$ = spread$48$iterable$.iterator();
                while (!((spread$48$iteration$ = spread$48$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    .com.redhat.ceylon.compiler.java.test.expression.erasure.Top spread$48$element$ = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)spread$48$iteration$;
                    spread$48$sb$.append(((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)spread$48$element$).getLeftAndRightAttribute());
                }
            }
            returning spread$48$sb$.getSequence();
        );
        .ceylon.language.Sequential spreadInvocation = null;
        spreadInvocation = (.ceylon.language.Sequential)(.ceylon.language.Sequence)(
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top, ? extends .java.lang.Object> spread$49$iterable$ = (.ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRights;
                .ceylon.language.SequenceBuilder spread$49$sb$ = new .ceylon.language.SequenceBuilder(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection(.com.redhat.ceylon.compiler.java.test.expression.erasure.Left.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.expression.erasure.Right.$TypeDescriptor$));
                .java.lang.Object spread$49$arg$0 = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
                .java.lang.Object spread$49$iteration$;
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top> spread$49$iterator$ = spread$49$iterable$.iterator();
                while (!((spread$49$iteration$ = spread$49$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    .com.redhat.ceylon.compiler.java.test.expression.erasure.Top spread$49$element$ = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)spread$49$iteration$;
                    spread$49$sb$.append(((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)spread$49$element$).leftAndRightMethod(spread$49$arg$0));
                }
            }
            returning spread$49$sb$.getSequence();
        );
        spreadInvocation = (.ceylon.language.Sequential)(.ceylon.language.Sequence)(
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top, ? extends .java.lang.Object> spread$51$iterable$ = (.ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top, ? extends .java.lang.Object>)(.ceylon.language.Iterable)leftsAndRights;
                .ceylon.language.SequenceBuilder spread$51$sb$ = new .ceylon.language.SequenceBuilder(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection(.com.redhat.ceylon.compiler.java.test.expression.erasure.Left.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.expression.erasure.Right.$TypeDescriptor$));
                .java.lang.Object spread$51$iteration$;
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top> spread$51$iterator$ = spread$51$iterable$.iterator();
                while (!((spread$51$iteration$ = spread$51$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    .com.redhat.ceylon.compiler.java.test.expression.erasure.Top spread$51$element$ = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)spread$51$iteration$;
                    spread$51$sb$.append((
                        let
                        {
                            .com.redhat.ceylon.compiler.java.test.expression.erasure.Top arg$50$callable$ = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)spread$51$element$;
                            .java.lang.Object arg$50$0 = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
                        }
                        returning arg$50$callable$.leftAndRightMethod(arg$50$0);
                    ));
                }
            }
            returning spread$51$sb$.getSequence();
        );
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.erasure.Test.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.erasure.Test.class);
}
final class topLevelLeftAttribute_ {
    
    private topLevelLeftAttribute_() {
    }
    private static .com.redhat.ceylon.compiler.java.test.expression.erasure.Left[] value;
    static {
        value = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Left[]{new .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft()};
    }
    
    public static .com.redhat.ceylon.compiler.java.test.expression.erasure.Left get_() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.InitializationError("Cyclic initialization");
        }
    }
    
    public static void set_(final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left topLevelLeftAttribute) {
        value[0] = topLevelLeftAttribute;
    }
}