package com.redhat.ceylon.compiler.java.test.expression.erasure;

interface Top {
    
    public abstract .java.lang.Object top();
    
    public abstract long getTopAttribute();
    
    public abstract .java.lang.Object getLeftAndRightAttribute();
    
    public abstract .java.lang.Object leftAndRightMethod(final .java.lang.Object param);
}
final class Top$impl {
    
    Top$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.Top $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top $this;
    
    public final long getTopAttribute() {
        return $this.getTopAttribute();
    }
    
    public final .java.lang.Object getLeftAndRightAttribute() {
        return $this.getLeftAndRightAttribute();
    }
}
interface Left extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top {
    
    public abstract .java.lang.Object left();
    
    public abstract long getLeftAttribute();
}
final class Left$impl {
    
    Left$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.Left $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left $this;
    
    public final long getLeftAttribute() {
        return $this.getLeftAttribute();
    }
}
interface Right extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top {
    
    public abstract .java.lang.Object right();
    
    public abstract long getRightAttribute();
}
final class Right$impl {
    
    Right$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.Right $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Right $this;
    
    public final long getRightAttribute() {
        return $this.getRightAttribute();
    }
}
class CMiddle implements .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, .com.redhat.ceylon.compiler.java.test.expression.erasure.Right {
    
    CMiddle() {
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl(this);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl(this);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Right$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Right$impl(this);
        this.topAttribute = 1L;
        this.leftAttribute = 1L;
        this.rightAttribute = 1L;
        this.leftAndRightAttribute = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this;
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this;
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Right$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Right$this;
    
    @.java.lang.Override
    public final .java.lang.Object left() {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object top() {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object right() {
        return null;
    }
    private final long topAttribute;
    
    @.java.lang.Override
    public final long getTopAttribute() {
        return topAttribute;
    }
    private final long leftAttribute;
    
    @.java.lang.Override
    public final long getLeftAttribute() {
        return leftAttribute;
    }
    private final long rightAttribute;
    
    @.java.lang.Override
    public final long getRightAttribute() {
        return rightAttribute;
    }
    private final .java.lang.Object leftAndRightAttribute;
    
    @.java.lang.Override
    public final .java.lang.Object getLeftAndRightAttribute() {
        return leftAndRightAttribute;
    }
    
    @.java.lang.Override
    public final .java.lang.Object leftAndRightMethod(final .java.lang.Object param) {
        return param;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
}
class CLeft implements .com.redhat.ceylon.compiler.java.test.expression.erasure.Left {
    
    CLeft() {
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl(this);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl(this);
        this.topAttribute = 1L;
        this.leftAttribute = 1L;
        this.leftAndRightAttribute = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Left$this;
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$Top$this;
    
    @.java.lang.Override
    public final .java.lang.Object left() {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object top() {
        return null;
    }
    private final long topAttribute;
    
    @.java.lang.Override
    public final long getTopAttribute() {
        return topAttribute;
    }
    private final long leftAttribute;
    
    @.java.lang.Override
    public final long getLeftAttribute() {
        return leftAttribute;
    }
    private final .java.lang.Object leftAndRightAttribute;
    
    @.java.lang.Override
    public final .java.lang.Object getLeftAndRightAttribute() {
        return leftAndRightAttribute;
    }
    
    @.java.lang.Override
    public final .java.lang.Object leftAndRightMethod(final .java.lang.Object param) {
        return param;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
    }
}
interface EmptyInterface {
}
final class EmptyInterface$impl {
    
    EmptyInterface$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface $this;
}
final class topLevelLeftAttribute_ {
    
    private topLevelLeftAttribute_() {
    }
    private static .com.redhat.ceylon.compiler.java.test.expression.erasure.Left[] value;
    static {
        value = new .com.redhat.ceylon.compiler.java.test.expression.erasure.Left[]{new .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft()};
    }
    
    static .com.redhat.ceylon.compiler.java.test.expression.erasure.Left getTopLevelLeftAttribute$() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.RecursiveInitializationException();
        }
    }
    
    static void setTopLevelLeftAttribute(final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left topLevelLeftAttribute) {
        value[0] = topLevelLeftAttribute;
    }
}
class MyException extends .ceylon.language.Exception implements .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface {
    
    MyException(.ceylon.language.String m, .java.lang.Throwable x) {
        super(m, x);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$EmptyInterface$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface$impl(this);
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$EmptyInterface$this;
}
class Test {
    
    Test(.java.lang.Object n) {
        this.n = n;
        this.leftAttribute = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
        this.middleAttribute = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    private final .java.lang.Object n;
    
    private final void takesTop(final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top top) {
    }
    
    private final void takesLeft(final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left left) {
    }
    
    private final .java.lang.Object givesLeftAndRight() {
        return new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    private .com.redhat.ceylon.compiler.java.test.expression.erasure.Left leftAttribute;
    
    public final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left getLeftAttribute() {
        return leftAttribute;
    }
    
    public final void setLeftAttribute(final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left leftAttribute) {
        this.leftAttribute = leftAttribute;
    }
    private .java.lang.Object middleAttribute;
    
    public final .java.lang.Object getMiddleAttribute() {
        return middleAttribute;
    }
    
    public final void setMiddleAttribute(final .java.lang.Object middleAttribute) {
        this.middleAttribute = middleAttribute;
    }
    
    private final void testUnion() {
        final .java.lang.Object middle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).top();
        final long n1 = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).getTopAttribute();
        takesTop((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle);
        .java.lang.Object $middle$1;
        if (($middle$1 = middle) instanceof .com.redhat.ceylon.compiler.java.test.expression.erasure.Left) {
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left $middle$2 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)$middle$1;
            final long n2 = $middle$2.getLeftAttribute();
            $middle$2.left();
            takesLeft($middle$2);
        }
    }
    
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left testIntersection(final .java.lang.Object p1, final .java.lang.Object p1OrNothing, final .ceylon.language.List tops, final .ceylon.language.List topsOrNothing, final .java.lang.Object erasedTest) {
        final .java.lang.Object middle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).top();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle).left();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)middle).right();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)givesLeftAndRight()).top();
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle().top();
        long sync;
        sync = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).getTopAttribute();
        sync = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle).getLeftAttribute();
        sync = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)middle).getRightAttribute();
        sync = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)givesLeftAndRight()).getTopAttribute();
        sync = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle().getTopAttribute();
        takesTop((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle);
        takesLeft((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle);
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.Top $arg$3$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle;
                takesTop($arg$3$0);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.Left $arg$4$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle;
                takesLeft($arg$4$0);
            }
            returning null;
        );
        .java.lang.Object middleVar = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left left2;
        left2 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        .com.redhat.ceylon.compiler.java.test.expression.erasure.Left left3 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        left3 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        setLeftAttribute((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar);
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).setLeftAttribute((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar);
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)(
            let
            {
                .java.lang.Object $ceylontmpop5 = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
                middleVar = $ceylontmpop5;
            }
            returning $ceylontmpop5;
        )).left();
        ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)(
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.Test $ceylontmpopE6 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest;
                .java.lang.Object $ceylontmpopV7 = middleVar;
                $ceylontmpopE6.setMiddleAttribute($ceylontmpopV7);
            }
            returning $ceylontmpopV7;
        )).left();
        final .ceylon.language.Entry entry = new .ceylon.language.Entry(p1, p1);
        if (true) {
            final .java.lang.Object x = new .com.redhat.ceylon.compiler.java.test.expression.erasure.MyException(null, null);
            ((.java.lang.Throwable)x).printStackTrace();
            final .java.lang.Throwable cause = ((.java.lang.Throwable)x).getCause();
            throw (.java.lang.Throwable)x;
        }
        return (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle;
    }
    
    private final void testNullHandlingOperators(final .java.lang.Object p1, final .java.lang.Object p1OrNothing) {
        .java.lang.Object $p1OrNothing$10;
        if (($p1OrNothing$10 = p1OrNothing) != null) {
            final .java.lang.Object $p1OrNothing$11 = $p1OrNothing$10;
        }
        boolean bSync;
        bSync = p1OrNothing != null;
        final .java.lang.Object p2 = (
            let
            {
                .java.lang.Object $ceylontmp12 = p1OrNothing;
            }
            returning $ceylontmp12 != null ? $ceylontmp12 : p1;
        );
        final long n = ((.ceylon.language.Integer)(
            let
            {
                .java.lang.Object $ceylontmp13 = p1OrNothing;
            }
            returning $ceylontmp13 != null ? $ceylontmp13 : p1;
        )).longValue();
    }
    
    private final void testArithmeticOperators(final .java.lang.Object p1, final .java.lang.Object erasedTest) {
        final long unboxed = ((.ceylon.language.Integer)p1).longValue();
        final .java.lang.Object boxed = this.n;
        .java.lang.Object n = this.n;
        long sync;
        sync = ((.ceylon.language.Integer)n).plus((.ceylon.language.Integer)n).longValue();
        sync = ((.ceylon.language.Integer)n).minus((.ceylon.language.Integer)n).longValue();
        sync = ((.ceylon.language.Integer)n).times((.ceylon.language.Integer)n).longValue();
        sync = ((.ceylon.language.Integer)n).remainder((.ceylon.language.Integer)n).longValue();
        sync = ((.ceylon.language.Invertable<? extends .ceylon.language.Integer>)n).getNegativeValue().longValue();
        sync = ((.ceylon.language.Invertable<? extends .ceylon.language.Integer>)n).getPositiveValue().longValue();
    }
    
    private final void testComparisonOperators(final .java.lang.Object p1, final .java.lang.Object erasedTest, final .java.lang.Object container) {
        boolean sync;
        sync = erasedTest == erasedTest;
        sync = p1.equals(p1);
        sync = ((.ceylon.language.Integer)p1).compare((.ceylon.language.Integer)p1).smallerThan();
        final .ceylon.language.Comparison cmp = ((.ceylon.language.Integer)p1).compare((.ceylon.language.Integer)p1);
        sync = (
            let
            {
                .java.lang.Object $ceylontmp14 = p1;
            }
            returning ((.ceylon.language.Category)container).contains($ceylontmp14);
        );
        if (p1 instanceof .ceylon.language.Category) {
        }
        sync = (
            let
            {
                .java.lang.Object $ceylontmp17 = p1;
            }
            returning $ceylontmp17 instanceof .ceylon.language.Category;
        );
    }
    
    private final void testSequences(final .java.lang.Object p1, final .ceylon.language.List leftsAndRights, final .ceylon.language.List leftsAndRightsEntries, final .ceylon.language.List topsOrNothing) {
        final .ceylon.language.List naturals = new .com.redhat.ceylon.compiler.java.language.ArraySequence(p1);
        final .ceylon.language.Integer n5 = (.ceylon.language.Integer)((.ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .java.lang.Object>)naturals).item((.ceylon.language.Integer)p1);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top t = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)((.ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .java.lang.Object>)leftsAndRights).item((.ceylon.language.Integer)p1);
        final .ceylon.language.List naturalsOrNothing = new .com.redhat.ceylon.compiler.java.language.ArraySequence(p1);
        final .ceylon.language.Integer n52 = (.ceylon.language.Integer)(
            let
            {
                .ceylon.language.Correspondence $ceylontmpsafeaccess18 = (.ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .java.lang.Object>)naturalsOrNothing;
            }
            returning $ceylontmpsafeaccess18 != null ? $ceylontmpsafeaccess18.item((.ceylon.language.Integer)p1) : null;
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top t2 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)(
            let
            {
                .ceylon.language.Correspondence $ceylontmpsafeaccess19 = (.ceylon.language.Correspondence<? super .ceylon.language.Integer, ? extends .java.lang.Object>)topsOrNothing;
            }
            returning $ceylontmpsafeaccess19 != null ? $ceylontmpsafeaccess19.item((.ceylon.language.Integer)p1) : null;
        );
        .ceylon.language.List subrange;
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.List<? extends .java.lang.Object>>)naturals).span((.ceylon.language.Integer)p1, (.ceylon.language.Integer)p1);
        subrange = ((.ceylon.language.Ranged<? super .ceylon.language.Integer, ? extends .ceylon.language.List<? extends .java.lang.Object>>)naturals).span((.ceylon.language.Integer)p1, null);
        final .ceylon.language.List<? extends .ceylon.language.Integer> plainIntegers = (.ceylon.language.List)new .com.redhat.ceylon.compiler.java.language.ArraySequence(p1);
        .java.lang.Object $elem$20;
        for (.ceylon.language.Iterator<? extends .java.lang.Object> $it$iter$21 = (.ceylon.language.Iterator<? extends .java.lang.Object>)naturals.getIterator(); !(($elem$20 = $it$iter$21.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object it = (.java.lang.Object)$elem$20;
            final .ceylon.language.Numeric<.ceylon.language.Integer> n6 = (.ceylon.language.Integer)it;
        }
        .java.lang.Object $elem$22;
        for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left> $itLeft$iter$23 = (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left>)leftsAndRights.getIterator(); !(($elem$22 = $itLeft$iter$23.next()) instanceof .ceylon.language.Finished); ) {
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left itLeft = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)$elem$22;
            itLeft.top();
            itLeft.left();
        }
        .java.lang.Object $elem$24;
        for (.ceylon.language.Iterator<? extends .java.lang.Object> $itErased$iter$25 = (.ceylon.language.Iterator<? extends .java.lang.Object>)leftsAndRights.getIterator(); !(($elem$24 = $itErased$iter$25.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object itErased = (.java.lang.Object)$elem$24;
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErased).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErased).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErased).right();
        }
        .java.lang.Object $elem$26;
        for (.ceylon.language.Iterator<? extends .java.lang.Object> $itErasedValue$iter$27 = (.ceylon.language.Iterator<? extends .java.lang.Object>)leftsAndRights.getIterator(); !(($elem$26 = $itErasedValue$iter$27.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object itErasedValue = (.java.lang.Object)$elem$26;
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErasedValue).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErasedValue).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErasedValue).right();
        }
        .java.lang.Object $elem$28;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left>> $itLeft1$iter$29 = (.ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left>>)leftsAndRightsEntries.getIterator(); !(($elem$28 = $itLeft1$iter$29.next()) instanceof .ceylon.language.Finished); ) {
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left itLeft1 = ((.ceylon.language.Entry<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left>)$elem$28).getKey();
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Left itLeft2 = ((.ceylon.language.Entry<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Left>)$elem$28).getItem();
            itLeft1.top();
            itLeft1.left();
            itLeft2.top();
            itLeft2.left();
        }
        .java.lang.Object $elem$30;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .java.lang.Object, ? extends .java.lang.Object>> $itErased1$iter$31 = (.ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .java.lang.Object, ? extends .java.lang.Object>>)leftsAndRightsEntries.getIterator(); !(($elem$30 = $itErased1$iter$31.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object itErased1 = ((.ceylon.language.Entry)$elem$30).getKey();
            final .java.lang.Object itErased2 = ((.ceylon.language.Entry)$elem$30).getItem();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErased1).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErased1).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErased1).right();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErased2).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErased2).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErased2).right();
        }
        .java.lang.Object $elem$32;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .java.lang.Object, ? extends .java.lang.Object>> $itErasedValue1$iter$33 = (.ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .java.lang.Object, ? extends .java.lang.Object>>)leftsAndRightsEntries.getIterator(); !(($elem$32 = $itErasedValue1$iter$33.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object itErasedValue1 = ((.ceylon.language.Entry)$elem$32).getKey();
            final .java.lang.Object itErasedValue2 = ((.ceylon.language.Entry)$elem$32).getItem();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErasedValue1).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErasedValue1).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErasedValue1).right();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErasedValue2).top();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErasedValue2).left();
            ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErasedValue2).right();
        }
        final .ceylon.language.Sequence<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top> topSequence = new .com.redhat.ceylon.compiler.java.language.ArraySequence<.com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle>(new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle());
        .java.lang.Object $elem$34;
        for (.ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.erasure.Top> $it$iter$35 = topSequence.getIterator(); !(($elem$34 = $it$iter$35.next()) instanceof .ceylon.language.Finished); ) {
            final .com.redhat.ceylon.compiler.java.test.expression.erasure.Top it = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)$elem$34;
            it.top();
        }
        long sync;
        sync = ((.ceylon.language.List<? extends .java.lang.Object>)naturals).getSize();
        sync = ((.ceylon.language.List<? extends .java.lang.Object>)leftsAndRights).getSize();
        .ceylon.language.List $naturals$37;
        if (($naturals$37 = naturals) instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$naturals$37).getEmpty()) {
            final .ceylon.language.Sequence $naturals$38 = (.ceylon.language.Sequence)$naturals$37;
        }
        boolean bSync;
        bSync = (
            let
            {
                .java.lang.Object $ceylontmp39 = naturals;
            }
            returning $ceylontmp39 instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$ceylontmp39).getEmpty();
        );
        final .ceylon.language.List spreadMember = (
            let
            {
                .ceylon.language.FixedSized $spreadTest$40 = (.ceylon.language.FixedSized<? extends .java.lang.Object>)leftsAndRights;
            }
            returning (
                let
                {
                    .ceylon.language.Sequence $spread$41$0 = (.ceylon.language.Sequence)$spreadTest$40;
                    int $spread$41$2 = (int)$spread$41$0.getSize();
                    .java.lang.Object[] $spread$41$4 = new .java.lang.Object[$spread$41$2];
                    for (int $index$42 = 0; $index$42 < $spread$41$2; $index$42++) $spread$41$4[$index$42] = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)$spread$41$0.item(.ceylon.language.Integer.instance($index$42))).getLeftAndRightAttribute();
                }
                returning new .com.redhat.ceylon.compiler.java.language.ArraySequence($spread$41$4);
            );
        );
        .ceylon.language.List spreadInvocation;
        spreadInvocation = (
            let
            {
                .ceylon.language.FixedSized $spreadTest$43 = (.ceylon.language.FixedSized<? extends .java.lang.Object>)leftsAndRights;
            }
            returning (
                let
                {
                    .ceylon.language.Sequence $spread$44$0 = (.ceylon.language.Sequence)$spreadTest$43;
                    int $spread$44$2 = (int)$spread$44$0.getSize();
                    .java.lang.Object[] $spread$44$4 = new .java.lang.Object[$spread$44$2];
                    for (int $index$45 = 0; $index$45 < $spread$44$2; $index$45++) $spread$44$4[$index$45] = ((.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)$spread$44$0.item(.ceylon.language.Integer.instance($index$45))).leftAndRightMethod(new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle());
                }
                returning new .com.redhat.ceylon.compiler.java.language.ArraySequence($spread$44$4);
            );
        );
        spreadInvocation = (
            let
            {
                .ceylon.language.FixedSized $spreadTest$47 = (.ceylon.language.FixedSized<? extends .java.lang.Object>)leftsAndRights;
            }
            returning (
                let
                {
                    .ceylon.language.Sequence $spread$48$0 = (.ceylon.language.Sequence)$spreadTest$47;
                    int $spread$48$2 = (int)$spread$48$0.getSize();
                    .java.lang.Object[] $spread$48$4 = new .java.lang.Object[$spread$48$2];
                    for (int $index$49 = 0; $index$49 < $spread$48$2; $index$49++) $spread$48$4[$index$49] = (
                        let
                        {
                            .com.redhat.ceylon.compiler.java.test.expression.erasure.Top $arg$46$callable$ = (.com.redhat.ceylon.compiler.java.test.expression.erasure.Top)$spread$48$0.item(.ceylon.language.Integer.instance($index$49));
                            .java.lang.Object $arg$46$0 = new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
                        }
                        returning $arg$46$callable$.leftAndRightMethod($arg$46$0);
                    );
                }
                returning new .com.redhat.ceylon.compiler.java.language.ArraySequence($spread$48$4);
            );
        );
    }
}