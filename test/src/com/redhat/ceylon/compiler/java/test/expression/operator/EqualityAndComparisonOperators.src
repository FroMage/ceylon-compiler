package com.redhat.ceylon.compiler.java.test.expression.operator;

interface BasicOperatorsA {
    
    public .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsA$impl $com$redhat$ceylon$compiler$java$test$expression$operator$BasicOperatorsA$impl();
}
final class BasicOperatorsA$impl {
    
    BasicOperatorsA$impl(.com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsA $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsA $this;
}
interface BasicOperatorsB {
    
    public .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsB$impl $com$redhat$ceylon$compiler$java$test$expression$operator$BasicOperatorsB$impl();
}
final class BasicOperatorsB$impl {
    
    BasicOperatorsB$impl(.com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsB $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsB $this;
}
public abstract class EqualityAndComparisonInteger extends .java.lang.Object implements .ceylon.language.Integral<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>, .ceylon.language.Comparable<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> {
    
    public EqualityAndComparisonInteger() {
        super();
        this.$ceylon$language$Integral$this = new .ceylon.language.Integral$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>(this);
        this.$ceylon$language$Numeric$this = new .ceylon.language.Numeric$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>(this);
        this.$ceylon$language$Summable$this = new .ceylon.language.Summable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>(this);
        this.$ceylon$language$Invertable$this = new .ceylon.language.Invertable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>(this);
        this.$ceylon$language$Enumerable$this = new .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>(this);
        this.$ceylon$language$Ordinal$this = new .ceylon.language.Ordinal$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>(this);
        this.$ceylon$language$Comparable$this = new .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>(this);
    }
    protected final .ceylon.language.Integral$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Integral$this;
    
    @.java.lang.Override
    public .ceylon.language.Integral$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Integral$impl() {
        return $ceylon$language$Integral$this;
    }
    protected final .ceylon.language.Numeric$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Numeric$this;
    
    @.java.lang.Override
    public .ceylon.language.Numeric$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Numeric$impl() {
        return $ceylon$language$Numeric$this;
    }
    protected final .ceylon.language.Summable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Summable$this;
    
    @.java.lang.Override
    public .ceylon.language.Summable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Summable$impl() {
        return $ceylon$language$Summable$this;
    }
    protected final .ceylon.language.Invertable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Invertable$this;
    
    @.java.lang.Override
    public .ceylon.language.Invertable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Invertable$impl() {
        return $ceylon$language$Invertable$this;
    }
    protected final .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Enumerable$this;
    
    @.java.lang.Override
    public .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Enumerable$impl() {
        return $ceylon$language$Enumerable$this;
    }
    protected final .ceylon.language.Ordinal$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Ordinal$this;
    
    @.java.lang.Override
    public .ceylon.language.Ordinal$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Ordinal$impl() {
        return $ceylon$language$Ordinal$this;
    }
    protected final .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Comparable$this;
    
    @.java.lang.Override
    public .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> $ceylon$language$Comparable$impl() {
        return $ceylon$language$Comparable$this;
    }
}
public class EqualityAndComparisonOperators {
    
    public EqualityAndComparisonOperators() {
    }
    
    private final void equalityAndComparisonUnboxed(final .java.lang.Object o1, final .java.lang.Object o2) {
        boolean sync = o1 == o2;
        long n1 = 0L;
        long n2 = 0L;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final .ceylon.language.Comparison c = .ceylon.language.Integer.instance(n1).compare(.ceylon.language.Integer.instance(n2));
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    private final void equalityAndComparisonBoxed(final .java.lang.Object o1, final .java.lang.Object o2, final .com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger n1, final .com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger n2) {
        .ceylon.language.Boolean sync = .ceylon.language.Boolean.instance(o1 == o2);
        sync = .ceylon.language.Boolean.instance(n1.equals(n2));
        sync = .ceylon.language.Boolean.instance(!n1.equals(n2));
        final .ceylon.language.Comparison c = n1.compare(n2);
        sync = .ceylon.language.Boolean.instance(n1.compare(n2).smallerThan());
        sync = .ceylon.language.Boolean.instance(n1.compare(n2).largerThan());
        sync = .ceylon.language.Boolean.instance(n1.compare(n2).asSmallAs());
        sync = .ceylon.language.Boolean.instance(n1.compare(n2).asLargeAs());
    }
    
    private final void testInBoxed(final long n1, final long n2) {
        final boolean b1 = (
            let
            {
                .ceylon.language.Integer $ceylontmp0 = .ceylon.language.Integer.instance(n1);
            }
            returning new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(n1), .ceylon.language.Integer.instance(n2)).contains($ceylontmp0);
        );
    }
    
    private final void testInUnboxed(final .com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger n1, final .com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger n2) {
        final .ceylon.language.Boolean b1 = .ceylon.language.Boolean.instance((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger $ceylontmp1 = n1;
            }
            returning new .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>(n1, n2).contains($ceylontmp1);
        ));
    }
    
    private final void testIs() {
        boolean sync = false;
        final .java.lang.Object foo = .ceylon.language.Boolean.instance(sync);
        sync = (
            let
            {
                .java.lang.Object $ceylontmp2 = .ceylon.language.Boolean.instance(sync);
            }
            returning $ceylontmp2 instanceof .ceylon.language.Empty;
        );
        sync = (
            let
            {
                .java.lang.Object $ceylontmp3 = foo;
            }
            returning $ceylontmp3 instanceof .ceylon.language.Boolean;
        );
        sync = (
            let
            {
                .java.lang.Object $ceylontmp4 = foo;
            }
            returning $ceylontmp4 instanceof .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsA || $ceylontmp4 instanceof .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsB;
        );
        sync = (
            let
            {
                .java.lang.Object $ceylontmp5 = foo;
            }
            returning $ceylontmp5 instanceof .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsA && $ceylontmp5 instanceof .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsB;
        );
        sync = (
            let
            {
                .java.lang.Object $ceylontmp6 = foo;
            }
            returning $ceylontmp6 instanceof .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsA || $ceylontmp6 instanceof .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsB;
        );
        sync = (
            let
            {
                .java.lang.Object $ceylontmp7 = foo;
            }
            returning $ceylontmp7 instanceof .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsA && $ceylontmp7 instanceof .com.redhat.ceylon.compiler.java.test.expression.operator.BasicOperatorsB;
        );
        sync = (
            let
            {
                .java.lang.Object $ceylontmp8 = foo;
            }
            returning .com.redhat.ceylon.compiler.java.Util.isBasic($ceylontmp8);
        );
        sync = (
            let
            {
                .java.lang.Object $ceylontmp9 = foo;
            }
            returning $ceylontmp9 instanceof .java.lang.Throwable;
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonOperators();
    }
}