package com.redhat.ceylon.compiler.java.test.expression.operator;

public class NullHandlingOperators {
    
    public NullHandlingOperators() {
    }
    
    private final <T>T box(final T t) {
        return t;
    }
    
    private final void nullHandling() {
        final .ceylon.language.Integer natOrNothing1 = .ceylon.language.Integer.instance(0L);
        final .ceylon.language.Integer intOrNothing = .ceylon.language.Integer.instance(0L);
        final long n = (
            let
            {
                .ceylon.language.Integer $ceylontmp0 = natOrNothing1;
            }
            returning $ceylontmp0 != null ? $ceylontmp0 : .ceylon.language.Integer.instance(2L);
        ).longValue();
        final .ceylon.language.Integer nBoxed = (
            let
            {
                .ceylon.language.Integer $ceylontmp1 = natOrNothing1;
            }
            returning $ceylontmp1 != null ? $ceylontmp1 : <.ceylon.language.Integer>box(.ceylon.language.Integer.instance(0L));
        );
        .ceylon.language.Integer nullSafeMember = (
            let
            {
                .ceylon.language.Integer $safe$2 = intOrNothing;
            }
            returning $safe$2 != null ? $safe$2.getNegativeValue() : null;
        );
        .ceylon.language.Integer nullSafeInvoke = (
            let
            {
                .ceylon.language.Integer $safe$3 = intOrNothing;
            }
            returning $safe$3 != null ? $safe$3.plus(.ceylon.language.Integer.instance(1L)) : null;
        );
        nullSafeInvoke = (
            let
            {
                .ceylon.language.Integer $safe$5 = intOrNothing;
            }
            returning $safe$5 != null ? (
                let
                {
                    .ceylon.language.Integer $arg$4$callable$ = $safe$5;
                    .ceylon.language.Integer $arg$4$0 = .ceylon.language.Integer.instance(1L);
                }
                returning $arg$4$callable$.plus($arg$4$0);
            ) : null;
        );
        final .ceylon.language.Iterable<? extends .ceylon.language.String> s1 = null;
        final .ceylon.language.Iterable<? extends .ceylon.language.String> s2 = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String> $ceylontmp6 = s1;
            }
            returning $ceylontmp6 != null ? $ceylontmp6 : (.ceylon.language.Iterable).ceylon.language.empty_.getEmpty$();
        );
    }
    
    private final void testEmpty() {
        boolean sync = false;
        sync = (
            let
            {
                .java.lang.Object $ceylontmp7 = .ceylon.language.String.getCharacters("");
            }
            returning $ceylontmp7 instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$ceylontmp7).getEmpty();
        );
        final .ceylon.language.Iterable<? extends .ceylon.language.String> iter = (.ceylon.language.Iterable).ceylon.language.empty_.getEmpty$();
        sync = (
            let
            {
                .java.lang.Object $ceylontmp8 = iter;
            }
            returning $ceylontmp8 instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$ceylontmp8).getEmpty();
        );
        final .ceylon.language.Iterable<? extends .ceylon.language.String> seq = (.ceylon.language.Iterable).ceylon.language.empty_.getEmpty$();
        sync = (
            let
            {
                .java.lang.Object $ceylontmp9 = seq;
            }
            returning $ceylontmp9 instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$ceylontmp9).getEmpty();
        );
        final .ceylon.language.Boolean boxed = .ceylon.language.Boolean.instance((
            let
            {
                .java.lang.Object $ceylontmp10 = seq;
            }
            returning $ceylontmp10 instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$ceylontmp10).getEmpty();
        ));
    }
    
    private final void testExists() {
        boolean sync = false;
        final .java.lang.Object foo = .ceylon.language.Boolean.instance(sync);
        sync = foo != null;
        final .ceylon.language.Boolean boxed = .ceylon.language.Boolean.instance(foo != null);
    }
    
    private final void testThenElse() {
        final long n = 5L;
        final .ceylon.language.String foo = n > 0L ? .ceylon.language.String.instance("yes") : null;
        final .ceylon.language.String bar = (
            let
            {
                .ceylon.language.String $ceylontmp11 = foo;
            }
            returning $ceylontmp11 != null ? $ceylontmp11 : .ceylon.language.String.instance("yes");
        );
        final .ceylon.language.String baz = (
            let
            {
                .ceylon.language.String $ceylontmp12 = n > 0L ? .ceylon.language.String.instance("yes") : null;
            }
            returning $ceylontmp12 != null ? $ceylontmp12 : .ceylon.language.String.instance("no");
        );
        final double x = 5.0;
        final double y = (
            let
            {
                .ceylon.language.Float $ceylontmp13 = x > 0.0 ? .ceylon.language.Float.instance(x) : null;
            }
            returning $ceylontmp13 != null ? $ceylontmp13 : .ceylon.language.Float.instance(1.0);
        ).doubleValue();
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer> seq = (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.Integer> $ceylontmp14 = (.ceylon.language.Iterable)(false ? .ceylon.language.empty_.getEmpty$() : null);
            }
            returning $ceylontmp14 != null ? $ceylontmp14 : new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(2L));
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.NullHandlingOperators();
    }
}