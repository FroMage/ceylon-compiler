package com.redhat.ceylon.compiler.java.test.structure.type;

class SequenceType implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SequenceType() {
    }
    
    public final void m() {
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> s1 = (.ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)});
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> s2 = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
        final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType> s3 = (.ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType>>>>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor$, new .java.lang.Object[]{
                this,
                this,
                this});
        final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType> s4 = (.ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.class);
}