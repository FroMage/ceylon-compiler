package com.redhat.ceylon.compiler.java.test.structure.type;

class SequenceType implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SequenceType() {
    }
    
    public final void m() {
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> s1 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor)), .ceylon.language.Integer.instance(1L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Empty>>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), .ceylon.language.Integer.instance(2L), new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Empty>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.Integer.instance(3L), .ceylon.language.empty_.getEmpty$())));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> s2 = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
        final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType> s3 = new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .ceylon.language.Empty>>>(.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor)), this, new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, ? extends .ceylon.language.Empty>>(.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor), this, new .ceylon.language.Tuple<.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType, .ceylon.language.Empty>(.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, this, .ceylon.language.empty_.getEmpty$())));
        final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType> s4 = (.ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType>)(.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.type.SequenceType.class);
}