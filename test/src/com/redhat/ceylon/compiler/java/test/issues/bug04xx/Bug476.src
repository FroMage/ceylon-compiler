package com.redhat.ceylon.compiler.java.test.issues.bug04xx;

interface Bug476A {
    
    public .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A$impl $com$redhat$ceylon$compiler$java$test$issues$bug04xx$Bug476A$impl();
}
final class Bug476A$impl {
    
    Bug476A$impl(.com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A $this;
}
interface Bug476B extends .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A {
    
    public .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476B$impl $com$redhat$ceylon$compiler$java$test$issues$bug04xx$Bug476B$impl();
}
final class Bug476B$impl {
    
    Bug476B$impl(.com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476B $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476B $this;
}
interface Bug476C {
    
    public .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476C$impl $com$redhat$ceylon$compiler$java$test$issues$bug04xx$Bug476C$impl();
}
final class Bug476C$impl {
    
    Bug476C$impl(.com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476C $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476C $this;
}
abstract class Bug476Top<T> {
    
    Bug476Top() {
    }
    
    public abstract T m();
    
    public abstract .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476Top<? extends T> m2();
    
    public abstract T getAttr();
    
    public abstract T getAttr2();
}
class Bug476Bottom<T, U> extends .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476Top<.com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A> {
    
    Bug476Bottom() {
        super();
        this.attr = (.com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A).ceylon.language.nothing_.getNothing$();
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A m() {
        return (.com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A).ceylon.language.nothing_.getNothing$();
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476Top<? extends .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A> m2() {
        return (.com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476Top).ceylon.language.nothing_.getNothing$();
    }
    private .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A attr;
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A getAttr() {
        return attr;
    }
    
    public final void setAttr(final .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A attr) {
        this.attr = attr;
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A getAttr2() {
        return (.com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A).ceylon.language.nothing_.getNothing$();
    }
    
    public final void setAttr2(final .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476A attr2) {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.issues.bug04xx.Bug476Bottom();
    }
}
public abstract class Bug476<T> implements .ceylon.language.List<T> {
    
    public Bug476() {
        this.$ceylon$language$List$this = new .ceylon.language.List$impl<T>(this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<T>(this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<T, .java.lang.Object>(this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl<T, .java.lang.Object>(this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>>((.ceylon.language.Cloneable<.ceylon.language.Collection<? extends T>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T>(this);
        this.$ceylon$language$Ranged$this = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>>(this);
        this.string = ((.ceylon.language.String).ceylon.language.nothing_.getNothing$()).toString();
    }
    protected final .ceylon.language.List$impl<T> $ceylon$language$List$this;
    
    @.java.lang.Override
    public .ceylon.language.List$impl<T> $ceylon$language$List$impl() {
        return $ceylon$language$List$this;
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$List$this.getSize();
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this.defines(index);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterator<? extends T> getIterator() {
        return $ceylon$language$List$this.getIterator();
    }
    
    @.java.lang.Override
    public T getFirst() {
        return $ceylon$language$List$this.getFirst();
    }
    
    @.java.lang.Override
    public T getLast() {
        return $ceylon$language$List$this.getLast();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withLeading(final Other element) {
        return $ceylon$language$List$this.withLeading(element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withTrailing(final Other element) {
        return $ceylon$language$List$this.withTrailing(element);
    }
    protected final .ceylon.language.Collection$impl<T> $ceylon$language$Collection$this;
    
    @.java.lang.Override
    public .ceylon.language.Collection$impl<T> $ceylon$language$Collection$impl() {
        return $ceylon$language$Collection$this;
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Collection$this.getEmpty();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Collection$this.contains(element);
    }
    protected final .ceylon.language.Iterable$impl<T, .java.lang.Object> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<T, .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this;
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ?> getRest() {
        return $ceylon$language$Iterable$this.getRest();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends T> getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ?> map(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ?> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold(initial, accumulating);
    }
    
    @.java.lang.Override
    public T find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public T findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends T> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.collect(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends T> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.select(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ?> skipping(final long skip) {
        return $ceylon$language$Iterable$this.skipping(skip);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ?> taking(final long take) {
        return $ceylon$language$Iterable$this.taking(take);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ?> by(final long step) {
        return $ceylon$language$Iterable$this.by(step);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.count(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T, ?> getCoalesced() {
        return $ceylon$language$Iterable$this.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends T>, ?> getIndexed() {
        return $ceylon$language$Iterable$this.getIndexed();
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable<? extends .java.lang.Object, ?> chain(final .ceylon.language.Iterable<? extends Other, ?> other) {
        return (.ceylon.language.Iterable<? extends .java.lang.Object, ?>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this.chain(other);
    }
    protected final .ceylon.language.Container$impl<T, .java.lang.Object> $ceylon$language$Container$this;
    
    @.java.lang.Override
    public .ceylon.language.Container$impl<T, .java.lang.Object> $ceylon$language$Container$impl() {
        return $ceylon$language$Container$this;
    }
    protected final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ?> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    protected final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>> $ceylon$language$Cloneable$this;
    
    @.java.lang.Override
    public .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>> $ceylon$language$Cloneable$impl() {
        return $ceylon$language$Cloneable$this;
    }
    protected final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    public .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this;
    }
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this.getKeys();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ?> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ?> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends T> items(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ?> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    protected final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>> $ceylon$language$Ranged$this;
    
    @.java.lang.Override
    public .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>> $ceylon$language$Ranged$impl() {
        return $ceylon$language$Ranged$this;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends T> span(final .ceylon.language.Integer from, final .ceylon.language.Integer to) {
        return (.ceylon.language.Sequential).ceylon.language.nothing_.getNothing$();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends T> spanFrom(final .ceylon.language.Integer from) {
        return (.ceylon.language.Sequential).ceylon.language.nothing_.getNothing$();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends T> spanTo(final .ceylon.language.Integer to) {
        return (.ceylon.language.Sequential).ceylon.language.nothing_.getNothing$();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends T> segment(final .ceylon.language.Integer from, final long length) {
        return (.ceylon.language.Sequential).ceylon.language.nothing_.getNothing$();
    }
    private final .java.lang.String string;
    
    @.java.lang.Override
    public final .java.lang.String toString() {
        return string;
    }
    
    @.java.lang.Override
    public final int hashCode() {
        return (int)1L;
    }
    
    @.java.lang.Override
    public final boolean equals(final .java.lang.Object that) {
        return ((.ceylon.language.Boolean).ceylon.language.nothing_.getNothing$()).booleanValue();
    }
}