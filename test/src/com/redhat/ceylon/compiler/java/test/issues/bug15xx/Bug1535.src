package com.redhat.ceylon.compiler.java.test.issues.bug15xx;

public final class bug1535_ {
    
    private bug1535_() {
    }
    
    public static <Value extends .ceylon.language.Summable<Value>>Value bug1535(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Value, final .ceylon.language.Iterable<? extends Value, ? extends .java.lang.Object> values) {
        .java.lang.Object floats$1;
        if (.com.redhat.ceylon.compiler.java.Util.isReified(floats$1 = (.ceylon.language.Iterable<? extends Value, ? extends .java.lang.Object>)(.ceylon.language.Iterable)values, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Iterable.class, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$))) {
            final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> floats$19 = (.ceylon.language.Iterable)floats$1;
            double product = 0.0;
            .java.lang.Object elem$20;
            .ceylon.language.Iterator<? extends .java.lang.Object> val$iterator$$21 = ((.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)floats$19).iterator();
            loop_0: while (!((elem$20 = val$iterator$$21.next()) instanceof .ceylon.language.Finished)) {
                final .java.lang.Object val = (.java.lang.Object)elem$20;
                (
                    let
                    {
                        .ceylon.language.Float $ceylontmp$op$22 = .ceylon.language.Float.instance(product).plus((.ceylon.language.Float)val);
                        product = $ceylontmp$op$22.doubleValue();
                    }
                    returning $ceylontmp$op$22;
                );
            }
            final .java.lang.Object result$25;
            .java.lang.Object result$24 = null;
            if ((result$24 = .ceylon.language.Float.instance(product)) instanceof .ceylon.language.Summable && .com.redhat.ceylon.compiler.java.Util.isReified(result$24, $reified$Value)) {
                result$25 = result$24;
            } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Value result=product"));
            return (Value)result$25;
        } else {
            .java.lang.Object ints$3;
            if (.com.redhat.ceylon.compiler.java.Util.isReified(ints$3 = (.ceylon.language.Iterable<? extends Value, ? extends .java.lang.Object>)(.ceylon.language.Iterable)values, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Iterable.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$))) {
                final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> ints$12 = (.ceylon.language.Iterable)ints$3;
                long product = 0L;
                .java.lang.Object elem$13;
                .ceylon.language.Iterator<? extends .java.lang.Object> val$iterator$$14 = ((.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)ints$12).iterator();
                loop_1: while (!((elem$13 = val$iterator$$14.next()) instanceof .ceylon.language.Finished)) {
                    final .java.lang.Object val = (.java.lang.Object)elem$13;
                    (
                        let
                        {
                            .ceylon.language.Integer $ceylontmp$op$15 = .ceylon.language.Integer.instance(product).plus((.ceylon.language.Integer)val);
                            product = $ceylontmp$op$15.longValue();
                        }
                        returning $ceylontmp$op$15;
                    );
                }
                final .java.lang.Object result$18;
                .java.lang.Object result$17 = null;
                if ((result$17 = .ceylon.language.Integer.instance(product)) instanceof .ceylon.language.Summable && .com.redhat.ceylon.compiler.java.Util.isReified(result$17, $reified$Value)) {
                    result$18 = result$17;
                } else throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Value result=product"));
                return (Value)result$18;
            } else {
                Value sum = (Value)((.ceylon.language.Iterable<? extends Value, ? extends .java.lang.Object>)(.ceylon.language.Iterable)values).getFirst();
                final .ceylon.language.Iterable<? extends Value, ? extends .java.lang.Object> iterable$7 = ((.ceylon.language.Iterable<? extends Value, ? extends .java.lang.Object>)(.ceylon.language.Iterable)values).getRest();
                final boolean isArray$8 = iterable$7 instanceof .ceylon.language.Array;
                .java.lang.Object elem$4 = null;
                final .java.lang.Object array$9;
                int i$10 = 0;
                final int length$11;
                if (isArray$8) {
                    array$9 = ((.ceylon.language.Array)iterable$7).toArray();
                    length$11 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$9);
                } else {
                    array$9 = null;
                    length$11 = 0;
                }
                .ceylon.language.Iterator<? extends Value> val$iterator$$5 = isArray$8 ? null : iterable$7.iterator();
                loop_2: while (isArray$8 ? i$10 < length$11 : !((elem$4 = val$iterator$$5.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$8) elem$4 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$9, i$10++);
                    final Value val = (Value)elem$4;
                    (
                        let
                        {
                            Value $ceylontmp$op$6 = ((.ceylon.language.Summable<Value>)(.ceylon.language.Summable)sum).plus((Value)val);
                            sum = $ceylontmp$op$6;
                        }
                        returning $ceylontmp$op$6;
                    );
                }
                return (Value)sum;
            }
        }
    }
}