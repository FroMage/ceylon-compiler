package com.redhat.ceylon.compiler.java.test.expression.invoke;

final class spreadArguments_ {
    
    private spreadArguments_() {
    }
    
    static void spreadArguments(final long i, final .java.lang.String s) {
    }
}
class SpreadArguments<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SpreadArguments(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long i, final T s) {
        this.$reified$T = $reified$T;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    
    public final void m(final long i, final T s) {
    }
    
    public final void m2(final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends T> $ceylontmp$s$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m2$canonical$(i, $ceylontmp$s$0);
            }
            returning null;
        );
    }
    
    private void m2$canonical$(final long i, final .ceylon.language.Sequential<? extends T> s) {
    }
    
    public final void m2(final long i, final .ceylon.language.Sequential<? extends T> s) {
        (
            let
            {
                m2$canonical$(i, s);
            }
            returning null;
        );
    }
    
    public final void m3(final long i, final .ceylon.language.Sequence<? extends T> s) {
    }
    
    private final void spreadTuple$priv$(final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> args) {
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$1 = args;
                .com.redhat.ceylon.compiler.java.test.expression.invoke.spreadArguments_.spreadArguments(((.ceylon.language.Integer)tuple$1.get(.ceylon.language.Integer.instance(0L))).longValue(), ((.ceylon.language.String)tuple$1.get(.ceylon.language.Integer.instance(1L))).toString());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> tuple$3 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.spreadArguments_.spreadArguments(0L, ((.ceylon.language.String)tuple$3.get(.ceylon.language.Integer.instance(0L))).toString());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$5 = args;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, ((.ceylon.language.Integer)tuple$5.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.String)tuple$5.get(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> tuple$7 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, 0L, (.ceylon.language.String)tuple$7.get(.ceylon.language.Integer.instance(0L)));
        );
        final .ceylon.language.Callable<? extends .java.lang.Object> f = (.ceylon.language.Callable).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$9 = args;
            }
            returning f.$call$((.ceylon.language.Integer)tuple$9.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.String)tuple$9.get(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> tuple$11 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
            }
            returning f.$call$(.ceylon.language.Integer.instance(1L), (.ceylon.language.String)tuple$11.get(.ceylon.language.Integer.instance(0L)));
        );
        final .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> sa = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> tuple$13 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequential<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(0L)});
                sa.m2(((.ceylon.language.Integer)tuple$13.get(.ceylon.language.Integer.instance(0L))).longValue());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$15 = new .ceylon.language.Tuple<.java.lang.Object, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                sa.m2(((.ceylon.language.Integer)tuple$15.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$15.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$17 = new .ceylon.language.Tuple<.java.lang.Object, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                sa.m3(((.ceylon.language.Integer)tuple$17.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$17.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>> tuple$19 = new .ceylon.language.Tuple<.java.lang.Object, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                sa.m2(((.ceylon.language.Integer)tuple$19.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$19.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>> tuple$21 = new .ceylon.language.Tuple<.java.lang.Object, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                sa.m3(((.ceylon.language.Integer)tuple$21.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$21.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.String>>> t = (.ceylon.language.Tuple).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.String>>> tuple$23 = t;
                sa.m2(((.ceylon.language.Integer)tuple$23.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$23.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.String>>> tuple$25 = t;
                sa.m3(((.ceylon.language.Integer)tuple$25.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$25.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
    }
    
    private final void spreadTupleWithSpreadOp$priv$(final .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> args) {
        final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iter = (.ceylon.language.Iterable).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$27$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$27$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$28 = args;
                long spread$27$arg$0 = ((.ceylon.language.Integer)tuple$28.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.String spread$27$arg$1 = (.ceylon.language.String)tuple$28.get(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$29 = spread$27$iterable$;
                final boolean isArray$30 = iterable$29 instanceof .ceylon.language.Array;
                .java.lang.Object spread$27$iteration$ = null;
                final .java.lang.Object array$31;
                int i$32 = 0;
                final int length$33;
                if (isArray$30) {
                    array$31 = ((.ceylon.language.Array)iterable$29).toArray();
                    length$33 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$31);
                } else {
                    array$31 = null;
                    length$33 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$27$iterator$ = isArray$30 ? null : iterable$29.iterator();
                while (isArray$30 ? i$32 < length$33 : !((spread$27$iteration$ = spread$27$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$30) spread$27$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$31, i$32++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$27$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$27$iteration$;
                    spread$27$sb$.append((
                        let
                        {
                            spread$27$element$.m(spread$27$arg$0, spread$27$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$27$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$34$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$34$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> tuple$35 = ((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
                long spread$34$arg$0 = 0L;
                .ceylon.language.String spread$34$arg$1 = (.ceylon.language.String)tuple$35.get(.ceylon.language.Integer.instance(0L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$36 = spread$34$iterable$;
                final boolean isArray$37 = iterable$36 instanceof .ceylon.language.Array;
                .java.lang.Object spread$34$iteration$ = null;
                final .java.lang.Object array$38;
                int i$39 = 0;
                final int length$40;
                if (isArray$37) {
                    array$38 = ((.ceylon.language.Array)iterable$36).toArray();
                    length$40 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$38);
                } else {
                    array$38 = null;
                    length$40 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$34$iterator$ = isArray$37 ? null : iterable$36.iterator();
                while (isArray$37 ? i$39 < length$40 : !((spread$34$iteration$ = spread$34$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$37) spread$34$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$38, i$39++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$34$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$34$iteration$;
                    spread$34$sb$.append((
                        let
                        {
                            spread$34$element$.m(spread$34$arg$0, spread$34$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$34$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$41$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$41$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                long spread$41$arg$0 = 0L;
                .ceylon.language.Sequential<? extends .ceylon.language.String> spread$41$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$42 = spread$41$iterable$;
                final boolean isArray$43 = iterable$42 instanceof .ceylon.language.Array;
                .java.lang.Object spread$41$iteration$ = null;
                final .java.lang.Object array$44;
                int i$45 = 0;
                final int length$46;
                if (isArray$43) {
                    array$44 = ((.ceylon.language.Array)iterable$42).toArray();
                    length$46 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$44);
                } else {
                    array$44 = null;
                    length$46 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$41$iterator$ = isArray$43 ? null : iterable$42.iterator();
                while (isArray$43 ? i$45 < length$46 : !((spread$41$iteration$ = spread$41$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$43) spread$41$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$44, i$45++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$41$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$41$iteration$;
                    spread$41$sb$.append((
                        let
                        {
                            spread$41$element$.m2(spread$41$arg$0, spread$41$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$41$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$47$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$47$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                long spread$47$arg$0 = 0L;
                .ceylon.language.Sequence<? extends .ceylon.language.String> spread$47$arg$1 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$48 = spread$47$iterable$;
                final boolean isArray$49 = iterable$48 instanceof .ceylon.language.Array;
                .java.lang.Object spread$47$iteration$ = null;
                final .java.lang.Object array$50;
                int i$51 = 0;
                final int length$52;
                if (isArray$49) {
                    array$50 = ((.ceylon.language.Array)iterable$48).toArray();
                    length$52 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$50);
                } else {
                    array$50 = null;
                    length$52 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$47$iterator$ = isArray$49 ? null : iterable$48.iterator();
                while (isArray$49 ? i$51 < length$52 : !((spread$47$iteration$ = spread$47$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$49) spread$47$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$50, i$51++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$47$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$47$iteration$;
                    spread$47$sb$.append((
                        let
                        {
                            spread$47$element$.m3(spread$47$arg$0, spread$47$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$47$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$53$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$53$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                long spread$53$arg$0 = 0L;
                .ceylon.language.Sequential<? extends .ceylon.language.String> spread$53$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>)(.ceylon.language.Tuple)((.ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>)(.ceylon.language.Tuple)args).getRest()).getRest();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$54 = spread$53$iterable$;
                final boolean isArray$55 = iterable$54 instanceof .ceylon.language.Array;
                .java.lang.Object spread$53$iteration$ = null;
                final .java.lang.Object array$56;
                int i$57 = 0;
                final int length$58;
                if (isArray$55) {
                    array$56 = ((.ceylon.language.Array)iterable$54).toArray();
                    length$58 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$56);
                } else {
                    array$56 = null;
                    length$58 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$53$iterator$ = isArray$55 ? null : iterable$54.iterator();
                while (isArray$55 ? i$57 < length$58 : !((spread$53$iteration$ = spread$53$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$55) spread$53$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$56, i$57++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$53$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$53$iteration$;
                    spread$53$sb$.append((
                        let
                        {
                            spread$53$element$.m2(spread$53$arg$0, spread$53$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$53$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$59$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$59$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> tuple$60 = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequential<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(0L)});
                long spread$59$arg$0 = ((.ceylon.language.Integer)tuple$60.get(.ceylon.language.Integer.instance(0L))).longValue();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$61 = spread$59$iterable$;
                final boolean isArray$62 = iterable$61 instanceof .ceylon.language.Array;
                .java.lang.Object spread$59$iteration$ = null;
                final .java.lang.Object array$63;
                int i$64 = 0;
                final int length$65;
                if (isArray$62) {
                    array$63 = ((.ceylon.language.Array)iterable$61).toArray();
                    length$65 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$63);
                } else {
                    array$63 = null;
                    length$65 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$59$iterator$ = isArray$62 ? null : iterable$61.iterator();
                while (isArray$62 ? i$64 < length$65 : !((spread$59$iteration$ = spread$59$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$62) spread$59$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$63, i$64++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$59$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$59$iteration$;
                    spread$59$sb$.append((
                        let
                        {
                            spread$59$element$.m2(spread$59$arg$0);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$59$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$66$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$66$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$67 = new .ceylon.language.Tuple<.java.lang.Object, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                long spread$66$arg$0 = ((.ceylon.language.Integer)tuple$67.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequential<? extends .ceylon.language.String> spread$66$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$67.spanFrom(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$68 = spread$66$iterable$;
                final boolean isArray$69 = iterable$68 instanceof .ceylon.language.Array;
                .java.lang.Object spread$66$iteration$ = null;
                final .java.lang.Object array$70;
                int i$71 = 0;
                final int length$72;
                if (isArray$69) {
                    array$70 = ((.ceylon.language.Array)iterable$68).toArray();
                    length$72 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$70);
                } else {
                    array$70 = null;
                    length$72 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$66$iterator$ = isArray$69 ? null : iterable$68.iterator();
                while (isArray$69 ? i$71 < length$72 : !((spread$66$iteration$ = spread$66$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$69) spread$66$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$70, i$71++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$66$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$66$iteration$;
                    spread$66$sb$.append((
                        let
                        {
                            spread$66$element$.m2(spread$66$arg$0, spread$66$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$66$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$73$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$73$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>> tuple$74 = new .ceylon.language.Tuple<.java.lang.Object, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                long spread$73$arg$0 = ((.ceylon.language.Integer)tuple$74.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequence<? extends .ceylon.language.String> spread$73$arg$1 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$74.spanFrom(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$75 = spread$73$iterable$;
                final boolean isArray$76 = iterable$75 instanceof .ceylon.language.Array;
                .java.lang.Object spread$73$iteration$ = null;
                final .java.lang.Object array$77;
                int i$78 = 0;
                final int length$79;
                if (isArray$76) {
                    array$77 = ((.ceylon.language.Array)iterable$75).toArray();
                    length$79 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$77);
                } else {
                    array$77 = null;
                    length$79 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$73$iterator$ = isArray$76 ? null : iterable$75.iterator();
                while (isArray$76 ? i$78 < length$79 : !((spread$73$iteration$ = spread$73$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$76) spread$73$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$77, i$78++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$73$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$73$iteration$;
                    spread$73$sb$.append((
                        let
                        {
                            spread$73$element$.m3(spread$73$arg$0, spread$73$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$73$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$80$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$80$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>> tuple$81 = new .ceylon.language.Tuple<.java.lang.Object, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                long spread$80$arg$0 = ((.ceylon.language.Integer)tuple$81.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequential<? extends .ceylon.language.String> spread$80$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$81.spanFrom(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$82 = spread$80$iterable$;
                final boolean isArray$83 = iterable$82 instanceof .ceylon.language.Array;
                .java.lang.Object spread$80$iteration$ = null;
                final .java.lang.Object array$84;
                int i$85 = 0;
                final int length$86;
                if (isArray$83) {
                    array$84 = ((.ceylon.language.Array)iterable$82).toArray();
                    length$86 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$84);
                } else {
                    array$84 = null;
                    length$86 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$80$iterator$ = isArray$83 ? null : iterable$82.iterator();
                while (isArray$83 ? i$85 < length$86 : !((spread$80$iteration$ = spread$80$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$83) spread$80$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$84, i$85++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$80$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$80$iteration$;
                    spread$80$sb$.append((
                        let
                        {
                            spread$80$element$.m2(spread$80$arg$0, spread$80$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$80$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$87$iterable$ = iter;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$87$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Tuple<.java.lang.Object, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>> tuple$88 = new .ceylon.language.Tuple<.java.lang.Object, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                long spread$87$arg$0 = ((.ceylon.language.Integer)tuple$88.get(.ceylon.language.Integer.instance(0L))).longValue();
                .ceylon.language.Sequence<? extends .ceylon.language.String> spread$87$arg$1 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$88.spanFrom(.ceylon.language.Integer.instance(1L));
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$89 = spread$87$iterable$;
                final boolean isArray$90 = iterable$89 instanceof .ceylon.language.Array;
                .java.lang.Object spread$87$iteration$ = null;
                final .java.lang.Object array$91;
                int i$92 = 0;
                final int length$93;
                if (isArray$90) {
                    array$91 = ((.ceylon.language.Array)iterable$89).toArray();
                    length$93 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$91);
                } else {
                    array$91 = null;
                    length$93 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$87$iterator$ = isArray$90 ? null : iterable$89.iterator();
                while (isArray$90 ? i$92 < length$93 : !((spread$87$iteration$ = spread$87$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$90) spread$87$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$91, i$92++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$87$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$87$iteration$;
                    spread$87$sb$.append((
                        let
                        {
                            spread$87$element$.m3(spread$87$arg$0, spread$87$arg$1);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$87$sb$.sequence();
        );
    }
    
    public final void m4() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$i$94 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m4$canonical$($ceylontmp$i$94);
            }
            returning null;
        );
    }
    
    private void m4$canonical$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
    }
    
    public final void m4(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
        (
            let
            {
                m4$canonical$(i);
            }
            returning null;
        );
    }
    
    private final void spreadIterator$priv$(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iter, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> nonEmptyIter) {
        m4(iter.sequence());
        m4(nonEmptyIter.sequence());
    }
    
    private final void spreadIteratorWithSpreadOp$priv$(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iter, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> nonEmptyIter) {
        final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> sas = (.ceylon.language.Iterable).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$95$iterable$ = sas;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$95$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> spread$95$arg$0 = iter.sequence();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$96 = spread$95$iterable$;
                final boolean isArray$97 = iterable$96 instanceof .ceylon.language.Array;
                .java.lang.Object spread$95$iteration$ = null;
                final .java.lang.Object array$98;
                int i$99 = 0;
                final int length$100;
                if (isArray$97) {
                    array$98 = ((.ceylon.language.Array)iterable$96).toArray();
                    length$100 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$98);
                } else {
                    array$98 = null;
                    length$100 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$95$iterator$ = isArray$97 ? null : iterable$96.iterator();
                while (isArray$97 ? i$99 < length$100 : !((spread$95$iteration$ = spread$95$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$97) spread$95$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$98, i$99++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$95$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$95$iteration$;
                    spread$95$sb$.append((
                        let
                        {
                            spread$95$element$.m4(spread$95$arg$0);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$95$sb$.sequence();
        );
        (
            let
            {
                .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$101$iterable$ = sas;
                .ceylon.language.impl.SequenceBuilder<.java.lang.Object> spread$101$sb$ = new .ceylon.language.impl.SequenceBuilder<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$);
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> spread$101$arg$0 = nonEmptyIter.sequence();
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iterable$102 = spread$101$iterable$;
                final boolean isArray$103 = iterable$102 instanceof .ceylon.language.Array;
                .java.lang.Object spread$101$iteration$ = null;
                final .java.lang.Object array$104;
                int i$105 = 0;
                final int length$106;
                if (isArray$103) {
                    array$104 = ((.ceylon.language.Array)iterable$102).toArray();
                    length$106 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$104);
                } else {
                    array$104 = null;
                    length$106 = 0;
                }
                .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$101$iterator$ = isArray$103 ? null : iterable$102.iterator();
                while (isArray$103 ? i$105 < length$106 : !((spread$101$iteration$ = spread$101$iterator$.next()) instanceof .ceylon.language.Finished)) {
                    if (isArray$103) spread$101$iteration$ = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$104, i$105++);
                    .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> spread$101$element$ = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)spread$101$iteration$;
                    spread$101$sb$.append((
                        let
                        {
                            spread$101$element$.m4(spread$101$arg$0);
                        }
                        returning null;
                    ));
                }
            }
            returning spread$101$sb$.sequence();
        );
    }
    
    private final void spreadTupleWithDefaultedAndSequenced$priv$() {
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> f = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Empty.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Integer.$TypeDescriptor$)))), "Integer(Integer, Integer=, Integer*)", (short)2){
            
            private final long $default$b(final long a) {
                return 2L;
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .ceylon.language.Sequential $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0.get(.ceylon.language.Integer.instance(0))).longValue();
                final long b = ((.ceylon.language.Integer)$param$0.get(.ceylon.language.Integer.instance(1))).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$0.spanFrom(.ceylon.language.Integer.instance(2));
                return $calltyped$(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = $default$b(a);
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = $default$b(a);
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$2;
                return $calltyped$(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.empty_.get_(), $param$2);
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                return $calltyped$(a, b, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.Integer)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = $param$0.length > 1 ? ((.ceylon.language.Integer)$param$0[1]).longValue() : $default$b(a);
                return $calltyped$(a, b, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = $param$0.length > 1 ? ((.ceylon.language.Integer)$param$0[1]).longValue() : $default$b(a);
                return $calltyped$(a, b, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 1, $param$0));
            }
            
            private .ceylon.language.Integer $calltyped$(final long a, final long b, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c) {
                return .ceylon.language.Integer.instance(1L);
            }
        };
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> f2 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequence.class, .ceylon.language.Integer.$TypeDescriptor$))), "Integer(Integer, Integer, Integer+)", (short)2){
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequence<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)$param$2;
                return $calltyped$(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequence<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.empty_.get_(), $param$2);
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                return $calltyped$(a, b, (.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.Integer)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = ((.ceylon.language.Integer)$param$0[1]).longValue();
                return $calltyped$(a, b, (.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = ((.ceylon.language.Integer)$param$0[1]).longValue();
                return $calltyped$(a, b, (.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 3, $param$0));
            }
            
            private .ceylon.language.Integer $calltyped$(final long a, final long b, final .ceylon.language.Sequence<? extends .ceylon.language.Integer> c) {
                return .ceylon.language.Integer.instance(1L);
            }
        };
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> one = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Sequential<? extends .ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)});
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> two = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L)});
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> three = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)});
        final .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> four = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>>(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L)});
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> tuple$107 = one;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$107.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> tuple$109 = two;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$109.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$109.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> tuple$111 = three;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$111.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$111.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$111.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> tuple$113 = three;
            }
            returning f2.$callvariadic$((.ceylon.language.Integer)tuple$113.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$113.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$113.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> tuple$115 = four;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$115.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$115.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$115.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> tuple$117 = four;
            }
            returning f2.$callvariadic$((.ceylon.language.Integer)tuple$117.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$117.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$117.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.empty_ tuple$119 = .ceylon.language.empty_.get_();
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> tuple$121 = one;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$121.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> tuple$123 = two;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$123.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$123.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>> tuple$125 = two;
            }
            returning f2.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$125.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$125.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> tuple$127 = three;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$127.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$127.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>> tuple$129 = three;
            }
            returning f2.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$129.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$129.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> tuple$131 = four;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$131.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$131.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>> tuple$133 = four;
            }
            returning f2.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$133.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$133.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), one);
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), one);
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), two);
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), two);
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_(), .ceylon.language.Integer.instance(3L))));
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_(), .ceylon.language.Integer.instance(3L))));
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, one, .ceylon.language.Integer.instance(3L))));
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, one, .ceylon.language.Integer.instance(3L))));
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, two, .ceylon.language.Integer.instance(3L))));
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, two, .ceylon.language.Integer.instance(3L))));
    }
    
    private final <Arg, Args extends .ceylon.language.Sequential<? extends Arg>>void spreadParameterised$priv$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Arg, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final Arg arg, final Args args, final .ceylon.language.Callable<? extends .ceylon.language.Integer> f, final .ceylon.language.Callable<? extends .ceylon.language.Integer> f2) {
        final long i1 = .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>apply(f, (.ceylon.language.Sequential)args).longValue();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments.class, $reified$T);
    }
}