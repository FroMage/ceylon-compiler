package com.redhat.ceylon.compiler.java.test.expression.invoke;

public final class innerMethodInvocation_ {
    
    private innerMethodInvocation_() {
    }
    
    public static void innerMethodInvocation() {
        
        final class fib_ {
            
            private fib_() {
            }
            
            long fib(final long n) {
                if (n == 0L) {
                    return 1L;
                } else {
                    return n * fib(.ceylon.language.Integer.getPredecessor(n));
                }
            }
        }
        final fib_ fib = new fib_();
        final long $ceylontmpstart$1 = 0L;
        final long $ceylontmpend$2 = 50L;
        final boolean $ceylontmpincreasing$3 = $ceylontmpstart$1 <= $ceylontmpend$2;
        final long $ceylontmpincr$4 = $ceylontmpincreasing$3 ? 1L : -1L;
        for (long n$5 = $ceylontmpstart$1; $ceylontmpincreasing$3 ? n$5 - $ceylontmpend$2 <= 0L : n$5 - $ceylontmpend$2 >= 0L; n$5 += $ceylontmpincr$4) {
            final long n = n$5;
            .ceylon.language.print_.print(.ceylon.language.String.instance("n! = " + .ceylon.language.Integer.toString(fib.fib(n))));
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.innerMethodInvocation_.innerMethodInvocation();
    }
}