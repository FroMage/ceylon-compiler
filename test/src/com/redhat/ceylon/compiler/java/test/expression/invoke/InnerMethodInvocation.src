package com.redhat.ceylon.compiler.java.test.expression.invoke;

public final class innerMethodInvocation_ {
    
    private innerMethodInvocation_() {
    }
    
    public static void innerMethodInvocation() {
        
        final class fib_ {
            
            private fib_() {
            }
            
            long fib(final long n) {
                if (n == 0L) {
                    return 1L;
                } else {
                    return n * fib(.ceylon.language.Integer.getPredecessor(n));
                }
            }
        }
        final fib_ fib = new fib_();
        .java.lang.Object $elem$1;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> $n$iter$2 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(50L)).getIterator(); !(($elem$1 = $n$iter$2.next()) instanceof .ceylon.language.Finished); ) {
            final long n = ((.ceylon.language.Integer)$elem$1).longValue();
            .ceylon.language.print_.print(.ceylon.language.String.instance("n! = " + .ceylon.language.Integer.toString(fib.fib(n))));
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.innerMethodInvocation_.innerMethodInvocation();
    }
}