package com.redhat.ceylon.compiler.java.test.structure.concrete;

interface Concrete<A> {
    
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<A> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl();
    
    public void mShared();
    
    public abstract A mShared$a();
    
    public void mShared(final A a);
    
    public abstract .ceylon.language.Sequential<? extends A> mShared$aseq(final A a);
    
    public void mShared(final A a, final .ceylon.language.Sequential<? extends A> aseq);
    
    public abstract .java.lang.Object mFormal();
    
    public abstract A mFormal$a();
    
    public abstract .java.lang.Object mFormal(final A a);
    
    public abstract .ceylon.language.Sequential<? extends A> mFormal$aseq(final A a);
    
    public abstract .java.lang.Object mFormal(final A a, final .ceylon.language.Sequential<? extends A> aseq);
    
    public .java.lang.Object mDefault();
    
    public abstract A mDefault$a();
    
    public .java.lang.Object mDefault(final A a);
    
    public abstract .ceylon.language.Sequential<? extends A> mDefault$aseq(final A a);
    
    public .java.lang.Object mDefault(final A a, final .ceylon.language.Sequential<? extends A> aseq);
}
final class Concrete$impl<A> {
    
    Concrete$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedA, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this) {
        this.$reifiedA = $reifiedA;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedA;
    private final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this;
    
    public void $refine(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedA) {
        this.$reifiedA = $reifiedA;
    }
    
    private void mNonShared$priv() {
        (
            let
            {
                A $ceylontmp$a$0 = mNonShared$a();
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$1 = mNonShared$aseq($ceylontmp$a$0);
                mNonShared$priv$($ceylontmp$a$0, $ceylontmp$aseq$1);
            }
            returning null;
        );
    }
    
    private final A mNonShared$a() {
        return null;
    }
    
    private void mNonShared$priv(final A a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$2 = mNonShared$aseq(a);
                mNonShared$priv$(a, $ceylontmp$aseq$2);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends A> mNonShared$aseq(final A a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private final void mNonShared$priv$(final A a, final .ceylon.language.Sequential<? extends A> aseq) {
    }
    
    private void mNonShared$priv(final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        (
            let
            {
                mNonShared$priv$(a, aseq);
            }
            returning null;
        );
    }
    
    public void mShared() {
        (
            let
            {
                A $ceylontmp$a$3 = mShared$a();
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$4 = mShared$aseq($ceylontmp$a$3);
                mShared$($ceylontmp$a$3, $ceylontmp$aseq$4);
            }
            returning null;
        );
    }
    
    public final A mShared$a() {
        return null;
    }
    
    public void mShared(final A a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$5 = mShared$aseq(a);
                mShared$(a, $ceylontmp$aseq$5);
            }
            returning null;
        );
    }
    
    public final .ceylon.language.Sequential<? extends A> mShared$aseq(final A a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private final void mShared$(final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        mNonShared$priv();
    }
    
    public void mShared(final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        (
            let
            {
                mShared$(a, aseq);
            }
            returning null;
        );
    }
    
    public final A mFormal$a() {
        return null;
    }
    
    public final .ceylon.language.Sequential<? extends A> mFormal$aseq(final A a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    public .java.lang.Object mDefault() {
        return (
            let
            {
                A $ceylontmp$a$6 = mDefault$a();
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$7 = mDefault$aseq($ceylontmp$a$6);
            }
            returning mDefault$($ceylontmp$a$6, $ceylontmp$aseq$7);
        );
    }
    
    public final A mDefault$a() {
        return null;
    }
    
    public .java.lang.Object mDefault(final A a) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$8 = mDefault$aseq(a);
            }
            returning mDefault$(a, $ceylontmp$aseq$8);
        );
    }
    
    public final .ceylon.language.Sequential<? extends A> mDefault$aseq(final A a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private final .java.lang.Object mDefault$(final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        return null;
    }
    
    public .java.lang.Object mDefault(final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        return mDefault$(a, aseq);
    }
}
final class concreteCallsites_ {
    
    private concreteCallsites_() {
    }
    
    static void concreteCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$9$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$9$this$ = $arg$9$callable$;
                .java.lang.Object $arg$9$0 = $arg$9$this$.mShared$a();
                .ceylon.language.Sequential $arg$9$1 = $arg$9$this$.mShared$aseq($arg$9$0);
                $arg$9$callable$.mShared($arg$9$0, $arg$9$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$10$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$10$this$ = $arg$10$callable$;
                .java.lang.Object $arg$10$0 = null;
                .ceylon.language.Sequential $arg$10$1 = $arg$10$this$.mShared$aseq($arg$10$0);
                $arg$10$callable$.mShared($arg$10$0, $arg$10$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$11$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$11$this$ = $arg$11$callable$;
                .java.lang.Object $arg$11$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$11$1 = $arg$11$this$.mShared$aseq($arg$11$0);
                $arg$11$callable$.mShared($arg$11$0, $arg$11$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$12$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$12$this$ = $arg$12$callable$;
                .java.lang.Object $arg$12$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$12$1 = $arg$12$this$.mShared$aseq($arg$12$0);
                $arg$12$callable$.mShared($arg$12$0, $arg$12$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$13$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$13$this$ = $arg$13$callable$;
                .java.lang.Object $arg$13$0 = $arg$13$this$.mFormal$a();
                .ceylon.language.Sequential $arg$13$1 = $arg$13$this$.mFormal$aseq($arg$13$0);
                $arg$13$callable$.mFormal($arg$13$0, $arg$13$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$14$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$14$this$ = $arg$14$callable$;
                .java.lang.Object $arg$14$0 = null;
                .ceylon.language.Sequential $arg$14$1 = $arg$14$this$.mFormal$aseq($arg$14$0);
                $arg$14$callable$.mFormal($arg$14$0, $arg$14$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$15$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$15$this$ = $arg$15$callable$;
                .java.lang.Object $arg$15$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$15$1 = $arg$15$this$.mFormal$aseq($arg$15$0);
                $arg$15$callable$.mFormal($arg$15$0, $arg$15$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$16$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$16$this$ = $arg$16$callable$;
                .java.lang.Object $arg$16$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$16$1 = $arg$16$this$.mFormal$aseq($arg$16$0);
                $arg$16$callable$.mFormal($arg$16$0, $arg$16$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$17$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$17$this$ = $arg$17$callable$;
                .java.lang.Object $arg$17$0 = $arg$17$this$.mDefault$a();
                .ceylon.language.Sequential $arg$17$1 = $arg$17$this$.mDefault$aseq($arg$17$0);
                $arg$17$callable$.mDefault($arg$17$0, $arg$17$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$18$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$18$this$ = $arg$18$callable$;
                .java.lang.Object $arg$18$0 = null;
                .ceylon.language.Sequential $arg$18$1 = $arg$18$this$.mDefault$aseq($arg$18$0);
                $arg$18$callable$.mDefault($arg$18$0, $arg$18$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$19$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$19$this$ = $arg$19$callable$;
                .java.lang.Object $arg$19$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$19$1 = $arg$19$this$.mDefault$aseq($arg$19$0);
                $arg$19$callable$.mDefault($arg$19$0, $arg$19$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$20$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$20$this$ = $arg$20$callable$;
                .java.lang.Object $arg$20$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$20$1 = $arg$20$this$.mDefault$aseq($arg$20$0);
                $arg$20$callable$.mDefault($arg$20$0, $arg$20$1);
            }
            returning null;
        );
    }
}
class ConcreteImpl<B> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<B> {
    
    ConcreteImpl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedB) {
        this.$reifiedB = $reifiedB;
        this.$com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this = new .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<B>($reifiedB, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedB;
    protected final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<B> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<B> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    }
    
    @.java.lang.Override
    public final B mShared$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$a();
    }
    
    public void mShared() {
        (
            let
            {
                B $ceylontmp$a$21 = mShared$a();
                .ceylon.language.Sequential<? extends B> $ceylontmp$aseq$22 = mShared$aseq($ceylontmp$a$21);
                mShared$($ceylontmp$a$21, $ceylontmp$aseq$22);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends B> mShared$aseq(final B a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$aseq(a);
    }
    
    public void mShared(final B a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends B> $ceylontmp$aseq$23 = mShared$aseq(a);
                mShared$(a, $ceylontmp$aseq$23);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final void mShared(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    private final void mShared$(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    @.java.lang.Override
    public final B mFormal$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$a();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends B> mFormal$aseq(final B b) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$aseq(b);
    }
    
    @.java.lang.Override
    public final B mDefault$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$a();
    }
    
    public .java.lang.Object mDefault() {
        return (
            let
            {
                B $ceylontmp$a$24 = mDefault$a();
                .ceylon.language.Sequential<? extends B> $ceylontmp$aseq$25 = mDefault$aseq($ceylontmp$a$24);
            }
            returning mDefault$($ceylontmp$a$24, $ceylontmp$aseq$25);
        );
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends B> mDefault$aseq(final B a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$aseq(a);
    }
    
    public .java.lang.Object mDefault(final B a) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends B> $ceylontmp$aseq$26 = mDefault$aseq(a);
            }
            returning mDefault$(a, $ceylontmp$aseq$26);
        );
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(a, aseq);
    }
    
    private .java.lang.Object mDefault$(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(a, aseq);
    }
    
    public final .java.lang.Object mFormal() {
        return (
            let
            {
                B $ceylontmp$b$27 = mFormal$a();
                .ceylon.language.Sequential<? extends B> $ceylontmp$bseq$28 = mFormal$aseq($ceylontmp$b$27);
            }
            returning mFormal$($ceylontmp$b$27, $ceylontmp$bseq$28);
        );
    }
    
    public final .java.lang.Object mFormal(final B b) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends B> $ceylontmp$bseq$29 = mFormal$aseq(b);
            }
            returning mFormal$(b, $ceylontmp$bseq$29);
        );
    }
    
    private final .java.lang.Object mFormal$(final B b, final .ceylon.language.Sequential<? extends B> bseq) {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final B b, final .ceylon.language.Sequential<? extends B> bseq) {
        return mFormal$(b, bseq);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl.class, $reifiedB);
    }
}
final class concreteImplCallsites_ {
    
    private concreteImplCallsites_() {
    }
    
    static void concreteImplCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$30$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$30$this$ = $arg$30$callable$;
                .java.lang.Object $arg$30$0 = $arg$30$this$.mShared$a();
                .ceylon.language.Sequential $arg$30$1 = $arg$30$this$.mShared$aseq($arg$30$0);
                $arg$30$callable$.mShared($arg$30$0, $arg$30$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$31$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$31$this$ = $arg$31$callable$;
                .java.lang.Object $arg$31$0 = null;
                .ceylon.language.Sequential $arg$31$1 = $arg$31$this$.mShared$aseq($arg$31$0);
                $arg$31$callable$.mShared($arg$31$0, $arg$31$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$32$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$32$this$ = $arg$32$callable$;
                .java.lang.Object $arg$32$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$32$1 = $arg$32$this$.mShared$aseq($arg$32$0);
                $arg$32$callable$.mShared($arg$32$0, $arg$32$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$33$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$33$this$ = $arg$33$callable$;
                .java.lang.Object $arg$33$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$33$1 = $arg$33$this$.mShared$aseq($arg$33$0);
                $arg$33$callable$.mShared($arg$33$0, $arg$33$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$34$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$34$this$ = $arg$34$callable$;
                .java.lang.Object $arg$34$0 = $arg$34$this$.mFormal$a();
                .ceylon.language.Sequential $arg$34$1 = $arg$34$this$.mFormal$aseq($arg$34$0);
                $arg$34$callable$.mFormal($arg$34$0, $arg$34$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$35$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$35$this$ = $arg$35$callable$;
                .java.lang.Object $arg$35$0 = null;
                .ceylon.language.Sequential $arg$35$1 = $arg$35$this$.mFormal$aseq($arg$35$0);
                $arg$35$callable$.mFormal($arg$35$0, $arg$35$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$36$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$36$this$ = $arg$36$callable$;
                .java.lang.Object $arg$36$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$36$1 = $arg$36$this$.mFormal$aseq($arg$36$0);
                $arg$36$callable$.mFormal($arg$36$0, $arg$36$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$37$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$37$this$ = $arg$37$callable$;
                .java.lang.Object $arg$37$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$37$1 = $arg$37$this$.mFormal$aseq($arg$37$0);
                $arg$37$callable$.mFormal($arg$37$0, $arg$37$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$38$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$38$this$ = $arg$38$callable$;
                .java.lang.Object $arg$38$0 = $arg$38$this$.mDefault$a();
                .ceylon.language.Sequential $arg$38$1 = $arg$38$this$.mDefault$aseq($arg$38$0);
                $arg$38$callable$.mDefault($arg$38$0, $arg$38$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$39$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$39$this$ = $arg$39$callable$;
                .java.lang.Object $arg$39$0 = null;
                .ceylon.language.Sequential $arg$39$1 = $arg$39$this$.mDefault$aseq($arg$39$0);
                $arg$39$callable$.mDefault($arg$39$0, $arg$39$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$40$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$40$this$ = $arg$40$callable$;
                .java.lang.Object $arg$40$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$40$1 = $arg$40$this$.mDefault$aseq($arg$40$0);
                $arg$40$callable$.mDefault($arg$40$0, $arg$40$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$41$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$41$this$ = $arg$41$callable$;
                .java.lang.Object $arg$41$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$41$1 = $arg$41$this$.mDefault$aseq($arg$41$0);
                $arg$41$callable$.mDefault($arg$41$0, $arg$41$1);
            }
            returning null;
        );
    }
}
class ConcreteImplWithDefault<C> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<C> {
    
    ConcreteImplWithDefault(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedC) {
        this.$reifiedC = $reifiedC;
        this.$com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this = new .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<C>($reifiedC, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedC;
    protected final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<C> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<C> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    }
    
    @.java.lang.Override
    public final C mShared$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$a();
    }
    
    public void mShared() {
        (
            let
            {
                C $ceylontmp$a$42 = mShared$a();
                .ceylon.language.Sequential<? extends C> $ceylontmp$aseq$43 = mShared$aseq($ceylontmp$a$42);
                mShared$($ceylontmp$a$42, $ceylontmp$aseq$43);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends C> mShared$aseq(final C a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$aseq(a);
    }
    
    public void mShared(final C a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends C> $ceylontmp$aseq$44 = mShared$aseq(a);
                mShared$(a, $ceylontmp$aseq$44);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final void mShared(final C a, final .ceylon.language.Sequential<? extends C> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    private final void mShared$(final C a, final .ceylon.language.Sequential<? extends C> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    @.java.lang.Override
    public final C mFormal$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$a();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends C> mFormal$aseq(final C c) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$aseq(c);
    }
    
    @.java.lang.Override
    public final C mDefault$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$a();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends C> mDefault$aseq(final C c) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$aseq(c);
    }
    
    public final .java.lang.Object mFormal() {
        return (
            let
            {
                C $ceylontmp$c$45 = mFormal$a();
                .ceylon.language.Sequential<? extends C> $ceylontmp$cseq$46 = mFormal$aseq($ceylontmp$c$45);
            }
            returning mFormal$($ceylontmp$c$45, $ceylontmp$cseq$46);
        );
    }
    
    public final .java.lang.Object mFormal(final C c) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends C> $ceylontmp$cseq$47 = mFormal$aseq(c);
            }
            returning mFormal$(c, $ceylontmp$cseq$47);
        );
    }
    
    private final .java.lang.Object mFormal$(final C c, final .ceylon.language.Sequential<? extends C> cseq) {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final C c, final .ceylon.language.Sequential<? extends C> cseq) {
        return mFormal$(c, cseq);
    }
    
    public final .java.lang.Object mDefault() {
        return (
            let
            {
                C $ceylontmp$c$48 = mDefault$a();
                .ceylon.language.Sequential<? extends C> $ceylontmp$cseq$49 = mDefault$aseq($ceylontmp$c$48);
            }
            returning mDefault$($ceylontmp$c$48, $ceylontmp$cseq$49);
        );
    }
    
    public final .java.lang.Object mDefault(final C c) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends C> $ceylontmp$cseq$50 = mDefault$aseq(c);
            }
            returning mDefault$(c, $ceylontmp$cseq$50);
        );
    }
    
    private final .java.lang.Object mDefault$(final C c, final .ceylon.language.Sequential<? extends C> cseq) {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object mDefault(final C c, final .ceylon.language.Sequential<? extends C> cseq) {
        return mDefault$(c, cseq);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault.class, $reifiedC);
    }
}
final class concreteImplWithDefaultCallsites_ {
    
    private concreteImplWithDefaultCallsites_() {
    }
    
    static void concreteImplWithDefaultCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$51$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$51$this$ = $arg$51$callable$;
                .java.lang.Object $arg$51$0 = $arg$51$this$.mShared$a();
                .ceylon.language.Sequential $arg$51$1 = $arg$51$this$.mShared$aseq($arg$51$0);
                $arg$51$callable$.mShared($arg$51$0, $arg$51$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$52$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$52$this$ = $arg$52$callable$;
                .java.lang.Object $arg$52$0 = null;
                .ceylon.language.Sequential $arg$52$1 = $arg$52$this$.mShared$aseq($arg$52$0);
                $arg$52$callable$.mShared($arg$52$0, $arg$52$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$53$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$53$this$ = $arg$53$callable$;
                .java.lang.Object $arg$53$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$53$1 = $arg$53$this$.mShared$aseq($arg$53$0);
                $arg$53$callable$.mShared($arg$53$0, $arg$53$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$54$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$54$this$ = $arg$54$callable$;
                .java.lang.Object $arg$54$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$54$1 = $arg$54$this$.mShared$aseq($arg$54$0);
                $arg$54$callable$.mShared($arg$54$0, $arg$54$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$55$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$55$this$ = $arg$55$callable$;
                .java.lang.Object $arg$55$0 = $arg$55$this$.mFormal$a();
                .ceylon.language.Sequential $arg$55$1 = $arg$55$this$.mFormal$aseq($arg$55$0);
                $arg$55$callable$.mFormal($arg$55$0, $arg$55$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$56$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$56$this$ = $arg$56$callable$;
                .java.lang.Object $arg$56$0 = null;
                .ceylon.language.Sequential $arg$56$1 = $arg$56$this$.mFormal$aseq($arg$56$0);
                $arg$56$callable$.mFormal($arg$56$0, $arg$56$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$57$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$57$this$ = $arg$57$callable$;
                .java.lang.Object $arg$57$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$57$1 = $arg$57$this$.mFormal$aseq($arg$57$0);
                $arg$57$callable$.mFormal($arg$57$0, $arg$57$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$58$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$58$this$ = $arg$58$callable$;
                .java.lang.Object $arg$58$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$58$1 = $arg$58$this$.mFormal$aseq($arg$58$0);
                $arg$58$callable$.mFormal($arg$58$0, $arg$58$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$59$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$59$this$ = $arg$59$callable$;
                .java.lang.Object $arg$59$0 = $arg$59$this$.mDefault$a();
                .ceylon.language.Sequential $arg$59$1 = $arg$59$this$.mDefault$aseq($arg$59$0);
                $arg$59$callable$.mDefault($arg$59$0, $arg$59$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$60$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$60$this$ = $arg$60$callable$;
                .java.lang.Object $arg$60$0 = null;
                .ceylon.language.Sequential $arg$60$1 = $arg$60$this$.mDefault$aseq($arg$60$0);
                $arg$60$callable$.mDefault($arg$60$0, $arg$60$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$61$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$61$this$ = $arg$61$callable$;
                .java.lang.Object $arg$61$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$61$1 = $arg$61$this$.mDefault$aseq($arg$61$0);
                $arg$61$callable$.mDefault($arg$61$0, $arg$61$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$62$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$62$this$ = $arg$62$callable$;
                .java.lang.Object $arg$62$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$62$1 = $arg$62$this$.mDefault$aseq($arg$62$0);
                $arg$62$callable$.mDefault($arg$62$0, $arg$62$1);
            }
            returning null;
        );
    }
}
abstract class Abstract<D> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<D> {
    
    Abstract(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedD) {
        this.$reifiedD = $reifiedD;
        this.$com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this = new .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<D>($reifiedD, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedD;
    protected final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<D> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<D> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    }
    
    @.java.lang.Override
    public final D mShared$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$a();
    }
    
    public void mShared() {
        (
            let
            {
                D $ceylontmp$a$63 = mShared$a();
                .ceylon.language.Sequential<? extends D> $ceylontmp$aseq$64 = mShared$aseq($ceylontmp$a$63);
                mShared$($ceylontmp$a$63, $ceylontmp$aseq$64);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends D> mShared$aseq(final D a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$aseq(a);
    }
    
    public void mShared(final D a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends D> $ceylontmp$aseq$65 = mShared$aseq(a);
                mShared$(a, $ceylontmp$aseq$65);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final void mShared(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    private final void mShared$(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    @.java.lang.Override
    public final D mFormal$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$a();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends D> mFormal$aseq(final D a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$aseq(a);
    }
    
    @.java.lang.Override
    public final D mDefault$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$a();
    }
    
    public .java.lang.Object mDefault() {
        return (
            let
            {
                D $ceylontmp$a$66 = mDefault$a();
                .ceylon.language.Sequential<? extends D> $ceylontmp$aseq$67 = mDefault$aseq($ceylontmp$a$66);
            }
            returning mDefault$($ceylontmp$a$66, $ceylontmp$aseq$67);
        );
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends D> mDefault$aseq(final D a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$aseq(a);
    }
    
    public .java.lang.Object mDefault(final D a) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends D> $ceylontmp$aseq$68 = mDefault$aseq(a);
            }
            returning mDefault$(a, $ceylontmp$aseq$68);
        );
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(a, aseq);
    }
    
    private .java.lang.Object mDefault$(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(a, aseq);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.Abstract.class, $reifiedD);
    }
}
final class abstractCallsites_ {
    
    private abstractCallsites_() {
    }
    
    static void abstractCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.Abstract conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$69$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$69$this$ = $arg$69$callable$;
                .java.lang.Object $arg$69$0 = $arg$69$this$.mShared$a();
                .ceylon.language.Sequential $arg$69$1 = $arg$69$this$.mShared$aseq($arg$69$0);
                $arg$69$callable$.mShared($arg$69$0, $arg$69$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$70$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$70$this$ = $arg$70$callable$;
                .java.lang.Object $arg$70$0 = null;
                .ceylon.language.Sequential $arg$70$1 = $arg$70$this$.mShared$aseq($arg$70$0);
                $arg$70$callable$.mShared($arg$70$0, $arg$70$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$71$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$71$this$ = $arg$71$callable$;
                .java.lang.Object $arg$71$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$71$1 = $arg$71$this$.mShared$aseq($arg$71$0);
                $arg$71$callable$.mShared($arg$71$0, $arg$71$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$72$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$72$this$ = $arg$72$callable$;
                .java.lang.Object $arg$72$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$72$1 = $arg$72$this$.mShared$aseq($arg$72$0);
                $arg$72$callable$.mShared($arg$72$0, $arg$72$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$73$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$73$this$ = $arg$73$callable$;
                .java.lang.Object $arg$73$0 = $arg$73$this$.mFormal$a();
                .ceylon.language.Sequential $arg$73$1 = $arg$73$this$.mFormal$aseq($arg$73$0);
                $arg$73$callable$.mFormal($arg$73$0, $arg$73$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$74$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$74$this$ = $arg$74$callable$;
                .java.lang.Object $arg$74$0 = null;
                .ceylon.language.Sequential $arg$74$1 = $arg$74$this$.mFormal$aseq($arg$74$0);
                $arg$74$callable$.mFormal($arg$74$0, $arg$74$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$75$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$75$this$ = $arg$75$callable$;
                .java.lang.Object $arg$75$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$75$1 = $arg$75$this$.mFormal$aseq($arg$75$0);
                $arg$75$callable$.mFormal($arg$75$0, $arg$75$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$76$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$76$this$ = $arg$76$callable$;
                .java.lang.Object $arg$76$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$76$1 = $arg$76$this$.mFormal$aseq($arg$76$0);
                $arg$76$callable$.mFormal($arg$76$0, $arg$76$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$77$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$77$this$ = $arg$77$callable$;
                .java.lang.Object $arg$77$0 = $arg$77$this$.mDefault$a();
                .ceylon.language.Sequential $arg$77$1 = $arg$77$this$.mDefault$aseq($arg$77$0);
                $arg$77$callable$.mDefault($arg$77$0, $arg$77$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$78$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$78$this$ = $arg$78$callable$;
                .java.lang.Object $arg$78$0 = null;
                .ceylon.language.Sequential $arg$78$1 = $arg$78$this$.mDefault$aseq($arg$78$0);
                $arg$78$callable$.mDefault($arg$78$0, $arg$78$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$79$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$79$this$ = $arg$79$callable$;
                .java.lang.Object $arg$79$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$79$1 = $arg$79$this$.mDefault$aseq($arg$79$0);
                $arg$79$callable$.mDefault($arg$79$0, $arg$79$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$80$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$80$this$ = $arg$80$callable$;
                .java.lang.Object $arg$80$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$80$1 = $arg$80$this$.mDefault$aseq($arg$80$0);
                $arg$80$callable$.mDefault($arg$80$0, $arg$80$1);
            }
            returning null;
        );
    }
}
class AbstractSub<E> extends .com.redhat.ceylon.compiler.java.test.structure.concrete.Abstract<E> {
    
    AbstractSub(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedE) {
        super($reifiedE);
        this.$reifiedE = $reifiedE;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedE;
    
    public final .java.lang.Object mFormal() {
        return (
            let
            {
                E $ceylontmp$e$81 = mFormal$a();
                .ceylon.language.Sequential<? extends E> $ceylontmp$eseq$82 = mFormal$aseq($ceylontmp$e$81);
            }
            returning mFormal$($ceylontmp$e$81, $ceylontmp$eseq$82);
        );
    }
    
    public final .java.lang.Object mFormal(final E e) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends E> $ceylontmp$eseq$83 = mFormal$aseq(e);
            }
            returning mFormal$(e, $ceylontmp$eseq$83);
        );
    }
    
    private final .java.lang.Object mFormal$(final E e, final .ceylon.language.Sequential<? extends E> eseq) {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final E e, final .ceylon.language.Sequential<? extends E> eseq) {
        return mFormal$(e, eseq);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub.class, $reifiedE);
    }
}
final class abstractSubCallsites_ {
    
    private abstractSubCallsites_() {
    }
    
    static void abstractSubCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$84$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$84$this$ = $arg$84$callable$;
                .java.lang.Object $arg$84$0 = $arg$84$this$.mShared$a();
                .ceylon.language.Sequential $arg$84$1 = $arg$84$this$.mShared$aseq($arg$84$0);
                $arg$84$callable$.mShared($arg$84$0, $arg$84$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$85$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$85$this$ = $arg$85$callable$;
                .java.lang.Object $arg$85$0 = null;
                .ceylon.language.Sequential $arg$85$1 = $arg$85$this$.mShared$aseq($arg$85$0);
                $arg$85$callable$.mShared($arg$85$0, $arg$85$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$86$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$86$this$ = $arg$86$callable$;
                .java.lang.Object $arg$86$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$86$1 = $arg$86$this$.mShared$aseq($arg$86$0);
                $arg$86$callable$.mShared($arg$86$0, $arg$86$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$87$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$87$this$ = $arg$87$callable$;
                .java.lang.Object $arg$87$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$87$1 = $arg$87$this$.mShared$aseq($arg$87$0);
                $arg$87$callable$.mShared($arg$87$0, $arg$87$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$88$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$88$this$ = $arg$88$callable$;
                .java.lang.Object $arg$88$0 = $arg$88$this$.mFormal$a();
                .ceylon.language.Sequential $arg$88$1 = $arg$88$this$.mFormal$aseq($arg$88$0);
                $arg$88$callable$.mFormal($arg$88$0, $arg$88$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$89$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$89$this$ = $arg$89$callable$;
                .java.lang.Object $arg$89$0 = null;
                .ceylon.language.Sequential $arg$89$1 = $arg$89$this$.mFormal$aseq($arg$89$0);
                $arg$89$callable$.mFormal($arg$89$0, $arg$89$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$90$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$90$this$ = $arg$90$callable$;
                .java.lang.Object $arg$90$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$90$1 = $arg$90$this$.mFormal$aseq($arg$90$0);
                $arg$90$callable$.mFormal($arg$90$0, $arg$90$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$91$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$91$this$ = $arg$91$callable$;
                .java.lang.Object $arg$91$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$91$1 = $arg$91$this$.mFormal$aseq($arg$91$0);
                $arg$91$callable$.mFormal($arg$91$0, $arg$91$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$92$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$92$this$ = $arg$92$callable$;
                .java.lang.Object $arg$92$0 = $arg$92$this$.mDefault$a();
                .ceylon.language.Sequential $arg$92$1 = $arg$92$this$.mDefault$aseq($arg$92$0);
                $arg$92$callable$.mDefault($arg$92$0, $arg$92$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$93$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$93$this$ = $arg$93$callable$;
                .java.lang.Object $arg$93$0 = null;
                .ceylon.language.Sequential $arg$93$1 = $arg$93$this$.mDefault$aseq($arg$93$0);
                $arg$93$callable$.mDefault($arg$93$0, $arg$93$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$94$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$94$this$ = $arg$94$callable$;
                .java.lang.Object $arg$94$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$94$1 = $arg$94$this$.mDefault$aseq($arg$94$0);
                $arg$94$callable$.mDefault($arg$94$0, $arg$94$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$95$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$95$this$ = $arg$95$callable$;
                .java.lang.Object $arg$95$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$95$1 = $arg$95$this$.mDefault$aseq($arg$95$0);
                $arg$95$callable$.mDefault($arg$95$0, $arg$95$1);
            }
            returning null;
        );
    }
}
abstract class AbstractImpl<F> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<F> {
    
    AbstractImpl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedF) {
        this.$reifiedF = $reifiedF;
        this.$com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this = new .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<F>($reifiedF, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedF;
    protected final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<F> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<F> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    }
    
    @.java.lang.Override
    public final F mShared$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$a();
    }
    
    public void mShared() {
        (
            let
            {
                F $ceylontmp$a$96 = mShared$a();
                .ceylon.language.Sequential<? extends F> $ceylontmp$aseq$97 = mShared$aseq($ceylontmp$a$96);
                mShared$($ceylontmp$a$96, $ceylontmp$aseq$97);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends F> mShared$aseq(final F a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$aseq(a);
    }
    
    public void mShared(final F a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends F> $ceylontmp$aseq$98 = mShared$aseq(a);
                mShared$(a, $ceylontmp$aseq$98);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public final void mShared(final F a, final .ceylon.language.Sequential<? extends F> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    private final void mShared$(final F a, final .ceylon.language.Sequential<? extends F> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    @.java.lang.Override
    public final F mFormal$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$a();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends F> mFormal$aseq(final F f) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$aseq(f);
    }
    
    @.java.lang.Override
    public final F mDefault$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$a();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends F> mDefault$aseq(final F f) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$aseq(f);
    }
    
    public final .java.lang.Object mFormal() {
        return (
            let
            {
                F $ceylontmp$f$99 = mFormal$a();
                .ceylon.language.Sequential<? extends F> $ceylontmp$fseq$100 = mFormal$aseq($ceylontmp$f$99);
            }
            returning mFormal$($ceylontmp$f$99, $ceylontmp$fseq$100);
        );
    }
    
    public final .java.lang.Object mFormal(final F f) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends F> $ceylontmp$fseq$101 = mFormal$aseq(f);
            }
            returning mFormal$(f, $ceylontmp$fseq$101);
        );
    }
    
    private final .java.lang.Object mFormal$(final F f, final .ceylon.language.Sequential<? extends F> fseq) {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final F f, final .ceylon.language.Sequential<? extends F> fseq) {
        return mFormal$(f, fseq);
    }
    
    public .java.lang.Object mDefault() {
        return (
            let
            {
                F $ceylontmp$f$102 = mDefault$a();
                .ceylon.language.Sequential<? extends F> $ceylontmp$fseq$103 = mDefault$aseq($ceylontmp$f$102);
            }
            returning mDefault$($ceylontmp$f$102, $ceylontmp$fseq$103);
        );
    }
    
    public .java.lang.Object mDefault(final F f) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends F> $ceylontmp$fseq$104 = mDefault$aseq(f);
            }
            returning mDefault$(f, $ceylontmp$fseq$104);
        );
    }
    
    private .java.lang.Object mDefault$(final F f, final .ceylon.language.Sequential<? extends F> fseq) {
        return null;
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final F f, final .ceylon.language.Sequential<? extends F> fseq) {
        return mDefault$(f, fseq);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl.class, $reifiedF);
    }
}
final class abstractImpl_ {
    
    private abstractImpl_() {
    }
    
    static void abstractImpl(final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$105$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$105$this$ = $arg$105$callable$;
                .java.lang.Object $arg$105$0 = $arg$105$this$.mShared$a();
                .ceylon.language.Sequential $arg$105$1 = $arg$105$this$.mShared$aseq($arg$105$0);
                $arg$105$callable$.mShared($arg$105$0, $arg$105$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$106$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$106$this$ = $arg$106$callable$;
                .java.lang.Object $arg$106$0 = null;
                .ceylon.language.Sequential $arg$106$1 = $arg$106$this$.mShared$aseq($arg$106$0);
                $arg$106$callable$.mShared($arg$106$0, $arg$106$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$107$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$107$this$ = $arg$107$callable$;
                .java.lang.Object $arg$107$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$107$1 = $arg$107$this$.mShared$aseq($arg$107$0);
                $arg$107$callable$.mShared($arg$107$0, $arg$107$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$108$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$108$this$ = $arg$108$callable$;
                .java.lang.Object $arg$108$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$108$1 = $arg$108$this$.mShared$aseq($arg$108$0);
                $arg$108$callable$.mShared($arg$108$0, $arg$108$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$109$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$109$this$ = $arg$109$callable$;
                .java.lang.Object $arg$109$0 = $arg$109$this$.mFormal$a();
                .ceylon.language.Sequential $arg$109$1 = $arg$109$this$.mFormal$aseq($arg$109$0);
                $arg$109$callable$.mFormal($arg$109$0, $arg$109$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$110$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$110$this$ = $arg$110$callable$;
                .java.lang.Object $arg$110$0 = null;
                .ceylon.language.Sequential $arg$110$1 = $arg$110$this$.mFormal$aseq($arg$110$0);
                $arg$110$callable$.mFormal($arg$110$0, $arg$110$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$111$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$111$this$ = $arg$111$callable$;
                .java.lang.Object $arg$111$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$111$1 = $arg$111$this$.mFormal$aseq($arg$111$0);
                $arg$111$callable$.mFormal($arg$111$0, $arg$111$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$112$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$112$this$ = $arg$112$callable$;
                .java.lang.Object $arg$112$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$112$1 = $arg$112$this$.mFormal$aseq($arg$112$0);
                $arg$112$callable$.mFormal($arg$112$0, $arg$112$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$113$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$113$this$ = $arg$113$callable$;
                .java.lang.Object $arg$113$0 = $arg$113$this$.mDefault$a();
                .ceylon.language.Sequential $arg$113$1 = $arg$113$this$.mDefault$aseq($arg$113$0);
                $arg$113$callable$.mDefault($arg$113$0, $arg$113$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$114$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$114$this$ = $arg$114$callable$;
                .java.lang.Object $arg$114$0 = null;
                .ceylon.language.Sequential $arg$114$1 = $arg$114$this$.mDefault$aseq($arg$114$0);
                $arg$114$callable$.mDefault($arg$114$0, $arg$114$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$115$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$115$this$ = $arg$115$callable$;
                .java.lang.Object $arg$115$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$115$1 = $arg$115$this$.mDefault$aseq($arg$115$0);
                $arg$115$callable$.mDefault($arg$115$0, $arg$115$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$116$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$116$this$ = $arg$116$callable$;
                .java.lang.Object $arg$116$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$116$1 = $arg$116$this$.mDefault$aseq($arg$116$0);
                $arg$116$callable$.mDefault($arg$116$0, $arg$116$1);
            }
            returning null;
        );
    }
}
class AbstractImplSub<G> extends .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl<G> {
    
    AbstractImplSub(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedG) {
        super($reifiedG);
        this.$reifiedG = $reifiedG;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedG;
    
    public final .java.lang.Object mDefault() {
        return (
            let
            {
                G $ceylontmp$g$117 = mDefault$a();
                .ceylon.language.Sequential<? extends G> $ceylontmp$gseq$118 = mDefault$aseq($ceylontmp$g$117);
            }
            returning mDefault$($ceylontmp$g$117, $ceylontmp$gseq$118);
        );
    }
    
    public final .java.lang.Object mDefault(final G g) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends G> $ceylontmp$gseq$119 = mDefault$aseq(g);
            }
            returning mDefault$(g, $ceylontmp$gseq$119);
        );
    }
    
    private final .java.lang.Object mDefault$(final G g, final .ceylon.language.Sequential<? extends G> gseq) {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object mDefault(final G g, final .ceylon.language.Sequential<? extends G> gseq) {
        return mDefault$(g, gseq);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub.class, $reifiedG);
    }
}
final class abstractImplSubCallsites_ {
    
    private abstractImplSubCallsites_() {
    }
    
    static void abstractImplSubCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$120$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$120$this$ = $arg$120$callable$;
                .java.lang.Object $arg$120$0 = $arg$120$this$.mShared$a();
                .ceylon.language.Sequential $arg$120$1 = $arg$120$this$.mShared$aseq($arg$120$0);
                $arg$120$callable$.mShared($arg$120$0, $arg$120$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$121$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$121$this$ = $arg$121$callable$;
                .java.lang.Object $arg$121$0 = null;
                .ceylon.language.Sequential $arg$121$1 = $arg$121$this$.mShared$aseq($arg$121$0);
                $arg$121$callable$.mShared($arg$121$0, $arg$121$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$122$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$122$this$ = $arg$122$callable$;
                .java.lang.Object $arg$122$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$122$1 = $arg$122$this$.mShared$aseq($arg$122$0);
                $arg$122$callable$.mShared($arg$122$0, $arg$122$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$123$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$123$this$ = $arg$123$callable$;
                .java.lang.Object $arg$123$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$123$1 = $arg$123$this$.mShared$aseq($arg$123$0);
                $arg$123$callable$.mShared($arg$123$0, $arg$123$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$124$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$124$this$ = $arg$124$callable$;
                .java.lang.Object $arg$124$0 = $arg$124$this$.mFormal$a();
                .ceylon.language.Sequential $arg$124$1 = $arg$124$this$.mFormal$aseq($arg$124$0);
                $arg$124$callable$.mFormal($arg$124$0, $arg$124$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$125$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$125$this$ = $arg$125$callable$;
                .java.lang.Object $arg$125$0 = null;
                .ceylon.language.Sequential $arg$125$1 = $arg$125$this$.mFormal$aseq($arg$125$0);
                $arg$125$callable$.mFormal($arg$125$0, $arg$125$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$126$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$126$this$ = $arg$126$callable$;
                .java.lang.Object $arg$126$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$126$1 = $arg$126$this$.mFormal$aseq($arg$126$0);
                $arg$126$callable$.mFormal($arg$126$0, $arg$126$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$127$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$127$this$ = $arg$127$callable$;
                .java.lang.Object $arg$127$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$127$1 = $arg$127$this$.mFormal$aseq($arg$127$0);
                $arg$127$callable$.mFormal($arg$127$0, $arg$127$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$128$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$128$this$ = $arg$128$callable$;
                .java.lang.Object $arg$128$0 = $arg$128$this$.mDefault$a();
                .ceylon.language.Sequential $arg$128$1 = $arg$128$this$.mDefault$aseq($arg$128$0);
                $arg$128$callable$.mDefault($arg$128$0, $arg$128$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$129$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$129$this$ = $arg$129$callable$;
                .java.lang.Object $arg$129$0 = null;
                .ceylon.language.Sequential $arg$129$1 = $arg$129$this$.mDefault$aseq($arg$129$0);
                $arg$129$callable$.mDefault($arg$129$0, $arg$129$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$130$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$130$this$ = $arg$130$callable$;
                .java.lang.Object $arg$130$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$130$1 = $arg$130$this$.mDefault$aseq($arg$130$0);
                $arg$130$callable$.mDefault($arg$130$0, $arg$130$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$131$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$131$this$ = $arg$131$callable$;
                .java.lang.Object $arg$131$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$131$1 = $arg$131$this$.mDefault$aseq($arg$131$0);
                $arg$131$callable$.mDefault($arg$131$0, $arg$131$1);
            }
            returning null;
        );
    }
}