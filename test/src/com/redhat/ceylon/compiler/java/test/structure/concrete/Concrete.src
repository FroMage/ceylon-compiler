package com.redhat.ceylon.compiler.java.test.structure.concrete;

interface Concrete<A> {
    
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<A> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl();
    
    public void mShared();
    
    public abstract A mShared$a();
    
    public void mShared(final A a);
    
    public abstract .ceylon.language.Sequential<? extends A> mShared$aseq(final A a);
    
    public void mShared(final A a, final .ceylon.language.Sequential<? extends A> aseq);
    
    public abstract .java.lang.Object mFormal();
    
    public abstract A mFormal$a();
    
    public abstract .java.lang.Object mFormal(final A a);
    
    public abstract .ceylon.language.Sequential<? extends A> mFormal$aseq(final A a);
    
    public abstract .java.lang.Object mFormal(final A a, final .ceylon.language.Sequential<? extends A> aseq);
    
    public .java.lang.Object mDefault();
    
    public abstract A mDefault$a();
    
    public .java.lang.Object mDefault(final A a);
    
    public abstract .ceylon.language.Sequential<? extends A> mDefault$aseq(final A a);
    
    public .java.lang.Object mDefault(final A a, final .ceylon.language.Sequential<? extends A> aseq);
}
final class Concrete$impl<A> {
    
    Concrete$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedA, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this) {
        this.$reifiedA = $reifiedA;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedA;
    private final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<A> $this;
    
    public void $refine(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedA) {
        this.$reifiedA = $reifiedA;
    }
    
    private final void mNonShared$priv() {
        (
            let
            {
                A $ceylontmp$a$0 = mNonShared$a();
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$1 = mNonShared$aseq($ceylontmp$a$0);
                mNonShared$priv($ceylontmp$a$0, $ceylontmp$aseq$1);
            }
            returning null;
        );
    }
    
    private final A mNonShared$a() {
        return null;
    }
    
    private final void mNonShared$priv(final A a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$2 = mNonShared$aseq(a);
                mNonShared$priv(a, $ceylontmp$aseq$2);
            }
            returning null;
        );
    }
    
    private final .ceylon.language.Sequential<? extends A> mNonShared$aseq(final A a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    private void mNonShared$priv(final A a, final .ceylon.language.Sequential<? extends A> aseq) {
    }
    
    public final void mShared() {
        (
            let
            {
                A $ceylontmp$a$3 = mShared$a();
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$4 = mShared$aseq($ceylontmp$a$3);
                $this.mShared($ceylontmp$a$3, $ceylontmp$aseq$4);
            }
            returning null;
        );
    }
    
    public final A mShared$a() {
        return null;
    }
    
    public final void mShared(final A a) {
        (
            let
            {
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$5 = mShared$aseq(a);
                $this.mShared(a, $ceylontmp$aseq$5);
            }
            returning null;
        );
    }
    
    public final .ceylon.language.Sequential<? extends A> mShared$aseq(final A a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    public void mShared(final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        mNonShared$priv();
    }
    
    public final .java.lang.Object mFormal() {
        return (
            let
            {
                A $ceylontmp$a$6 = mFormal$a();
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$7 = mFormal$aseq($ceylontmp$a$6);
            }
            returning $this.mFormal($ceylontmp$a$6, $ceylontmp$aseq$7);
        );
    }
    
    public final A mFormal$a() {
        return null;
    }
    
    public final .java.lang.Object mFormal(final A a) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$8 = mFormal$aseq(a);
            }
            returning $this.mFormal(a, $ceylontmp$aseq$8);
        );
    }
    
    public final .ceylon.language.Sequential<? extends A> mFormal$aseq(final A a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    public final .java.lang.Object mDefault() {
        return (
            let
            {
                A $ceylontmp$a$9 = mDefault$a();
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$10 = mDefault$aseq($ceylontmp$a$9);
            }
            returning $this.mDefault($ceylontmp$a$9, $ceylontmp$aseq$10);
        );
    }
    
    public final A mDefault$a() {
        return null;
    }
    
    public final .java.lang.Object mDefault(final A a) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends A> $ceylontmp$aseq$11 = mDefault$aseq(a);
            }
            returning $this.mDefault(a, $ceylontmp$aseq$11);
        );
    }
    
    public final .ceylon.language.Sequential<? extends A> mDefault$aseq(final A a) {
        return (.ceylon.language.Sequential).ceylon.language.empty_.$get();
    }
    
    public .java.lang.Object mDefault(final A a, final .ceylon.language.Sequential<? extends A> aseq) {
        return null;
    }
}
final class concreteCallsites_ {
    
    private concreteCallsites_() {
    }
    
    static void concreteCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$12$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$12$this$ = $arg$12$callable$;
                .java.lang.Object $arg$12$0 = $arg$12$this$.mShared$a();
                .ceylon.language.Sequential $arg$12$1 = $arg$12$this$.mShared$aseq($arg$12$0);
                $arg$12$callable$.mShared($arg$12$0, $arg$12$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$13$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$13$this$ = $arg$13$callable$;
                .java.lang.Object $arg$13$0 = null;
                .ceylon.language.Sequential $arg$13$1 = $arg$13$this$.mShared$aseq($arg$13$0);
                $arg$13$callable$.mShared($arg$13$0, $arg$13$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$14$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$14$this$ = $arg$14$callable$;
                .java.lang.Object $arg$14$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$14$1 = $arg$14$this$.mShared$aseq($arg$14$0);
                $arg$14$callable$.mShared($arg$14$0, $arg$14$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$15$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$15$this$ = $arg$15$callable$;
                .java.lang.Object $arg$15$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$15$1 = $arg$15$this$.mShared$aseq($arg$15$0);
                $arg$15$callable$.mShared($arg$15$0, $arg$15$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$16$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$16$this$ = $arg$16$callable$;
                .java.lang.Object $arg$16$0 = $arg$16$this$.mFormal$a();
                .ceylon.language.Sequential $arg$16$1 = $arg$16$this$.mFormal$aseq($arg$16$0);
                $arg$16$callable$.mFormal($arg$16$0, $arg$16$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$17$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$17$this$ = $arg$17$callable$;
                .java.lang.Object $arg$17$0 = null;
                .ceylon.language.Sequential $arg$17$1 = $arg$17$this$.mFormal$aseq($arg$17$0);
                $arg$17$callable$.mFormal($arg$17$0, $arg$17$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$18$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$18$this$ = $arg$18$callable$;
                .java.lang.Object $arg$18$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$18$1 = $arg$18$this$.mFormal$aseq($arg$18$0);
                $arg$18$callable$.mFormal($arg$18$0, $arg$18$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$19$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$19$this$ = $arg$19$callable$;
                .java.lang.Object $arg$19$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$19$1 = $arg$19$this$.mFormal$aseq($arg$19$0);
                $arg$19$callable$.mFormal($arg$19$0, $arg$19$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$20$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$20$this$ = $arg$20$callable$;
                .java.lang.Object $arg$20$0 = $arg$20$this$.mDefault$a();
                .ceylon.language.Sequential $arg$20$1 = $arg$20$this$.mDefault$aseq($arg$20$0);
                $arg$20$callable$.mDefault($arg$20$0, $arg$20$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$21$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$21$this$ = $arg$21$callable$;
                .java.lang.Object $arg$21$0 = null;
                .ceylon.language.Sequential $arg$21$1 = $arg$21$this$.mDefault$aseq($arg$21$0);
                $arg$21$callable$.mDefault($arg$21$0, $arg$21$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$22$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$22$this$ = $arg$22$callable$;
                .java.lang.Object $arg$22$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$22$1 = $arg$22$this$.mDefault$aseq($arg$22$0);
                $arg$22$callable$.mDefault($arg$22$0, $arg$22$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$23$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$23$this$ = $arg$23$callable$;
                .java.lang.Object $arg$23$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$23$1 = $arg$23$this$.mDefault$aseq($arg$23$0);
                $arg$23$callable$.mDefault($arg$23$0, $arg$23$1);
            }
            returning null;
        );
    }
}
class ConcreteImpl<B> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<B> {
    
    ConcreteImpl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedB) {
        this.$reifiedB = $reifiedB;
        this.$com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this = new .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<B>($reifiedB, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedB;
    protected final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<B> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<B> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    }
    
    @.java.lang.Override
    public final B mShared$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$a();
    }
    
    @.java.lang.Override
    public final void mShared() {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends B> mShared$aseq(final B a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$aseq(a);
    }
    
    @.java.lang.Override
    public final void mShared(final B a) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a);
    }
    
    @.java.lang.Override
    public final void mShared(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    @.java.lang.Override
    public final B mFormal$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$a();
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends B> mFormal$aseq(final B b) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$aseq(b);
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final B b) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal(b);
    }
    
    @.java.lang.Override
    public final B mDefault$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$a();
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends B> mDefault$aseq(final B a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$aseq(a);
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final B a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(a);
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final B a, final .ceylon.language.Sequential<? extends B> aseq) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(a, aseq);
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final B b, final .ceylon.language.Sequential<? extends B> bseq) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl.class, $reifiedB);
    }
}
final class concreteImplCallsites_ {
    
    private concreteImplCallsites_() {
    }
    
    static void concreteImplCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$24$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$24$this$ = $arg$24$callable$;
                .java.lang.Object $arg$24$0 = $arg$24$this$.mShared$a();
                .ceylon.language.Sequential $arg$24$1 = $arg$24$this$.mShared$aseq($arg$24$0);
                $arg$24$callable$.mShared($arg$24$0, $arg$24$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$25$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$25$this$ = $arg$25$callable$;
                .java.lang.Object $arg$25$0 = null;
                .ceylon.language.Sequential $arg$25$1 = $arg$25$this$.mShared$aseq($arg$25$0);
                $arg$25$callable$.mShared($arg$25$0, $arg$25$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$26$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$26$this$ = $arg$26$callable$;
                .java.lang.Object $arg$26$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$26$1 = $arg$26$this$.mShared$aseq($arg$26$0);
                $arg$26$callable$.mShared($arg$26$0, $arg$26$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$27$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$27$this$ = $arg$27$callable$;
                .java.lang.Object $arg$27$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$27$1 = $arg$27$this$.mShared$aseq($arg$27$0);
                $arg$27$callable$.mShared($arg$27$0, $arg$27$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$28$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$28$this$ = $arg$28$callable$;
                .java.lang.Object $arg$28$0 = $arg$28$this$.mFormal$a();
                .ceylon.language.Sequential $arg$28$1 = $arg$28$this$.mFormal$aseq($arg$28$0);
                $arg$28$callable$.mFormal($arg$28$0, $arg$28$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$29$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$29$this$ = $arg$29$callable$;
                .java.lang.Object $arg$29$0 = null;
                .ceylon.language.Sequential $arg$29$1 = $arg$29$this$.mFormal$aseq($arg$29$0);
                $arg$29$callable$.mFormal($arg$29$0, $arg$29$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$30$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$30$this$ = $arg$30$callable$;
                .java.lang.Object $arg$30$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$30$1 = $arg$30$this$.mFormal$aseq($arg$30$0);
                $arg$30$callable$.mFormal($arg$30$0, $arg$30$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$31$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImpl $arg$31$this$ = $arg$31$callable$;
                .java.lang.Object $arg$31$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$31$1 = $arg$31$this$.mFormal$aseq($arg$31$0);
                $arg$31$callable$.mFormal($arg$31$0, $arg$31$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$32$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$32$this$ = $arg$32$callable$;
                .java.lang.Object $arg$32$0 = $arg$32$this$.mDefault$a();
                .ceylon.language.Sequential $arg$32$1 = $arg$32$this$.mDefault$aseq($arg$32$0);
                $arg$32$callable$.mDefault($arg$32$0, $arg$32$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$33$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$33$this$ = $arg$33$callable$;
                .java.lang.Object $arg$33$0 = null;
                .ceylon.language.Sequential $arg$33$1 = $arg$33$this$.mDefault$aseq($arg$33$0);
                $arg$33$callable$.mDefault($arg$33$0, $arg$33$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$34$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$34$this$ = $arg$34$callable$;
                .java.lang.Object $arg$34$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$34$1 = $arg$34$this$.mDefault$aseq($arg$34$0);
                $arg$34$callable$.mDefault($arg$34$0, $arg$34$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$35$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$35$this$ = $arg$35$callable$;
                .java.lang.Object $arg$35$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$35$1 = $arg$35$this$.mDefault$aseq($arg$35$0);
                $arg$35$callable$.mDefault($arg$35$0, $arg$35$1);
            }
            returning null;
        );
    }
}
class ConcreteImplWithDefault<C> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<C> {
    
    ConcreteImplWithDefault(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedC) {
        this.$reifiedC = $reifiedC;
        this.$com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this = new .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<C>($reifiedC, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedC;
    protected final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<C> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<C> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    }
    
    @.java.lang.Override
    public final C mShared$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$a();
    }
    
    @.java.lang.Override
    public final void mShared() {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends C> mShared$aseq(final C a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$aseq(a);
    }
    
    @.java.lang.Override
    public final void mShared(final C a) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a);
    }
    
    @.java.lang.Override
    public final void mShared(final C a, final .ceylon.language.Sequential<? extends C> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    @.java.lang.Override
    public final C mFormal$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$a();
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends C> mFormal$aseq(final C c) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$aseq(c);
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final C c) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal(c);
    }
    
    @.java.lang.Override
    public final C mDefault$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$a();
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends C> mDefault$aseq(final C c) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$aseq(c);
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final C c) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(c);
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final C c, final .ceylon.language.Sequential<? extends C> cseq) {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object mDefault(final C c, final .ceylon.language.Sequential<? extends C> cseq) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault.class, $reifiedC);
    }
}
final class concreteImplWithDefaultCallsites_ {
    
    private concreteImplWithDefaultCallsites_() {
    }
    
    static void concreteImplWithDefaultCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$36$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$36$this$ = $arg$36$callable$;
                .java.lang.Object $arg$36$0 = $arg$36$this$.mShared$a();
                .ceylon.language.Sequential $arg$36$1 = $arg$36$this$.mShared$aseq($arg$36$0);
                $arg$36$callable$.mShared($arg$36$0, $arg$36$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$37$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$37$this$ = $arg$37$callable$;
                .java.lang.Object $arg$37$0 = null;
                .ceylon.language.Sequential $arg$37$1 = $arg$37$this$.mShared$aseq($arg$37$0);
                $arg$37$callable$.mShared($arg$37$0, $arg$37$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$38$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$38$this$ = $arg$38$callable$;
                .java.lang.Object $arg$38$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$38$1 = $arg$38$this$.mShared$aseq($arg$38$0);
                $arg$38$callable$.mShared($arg$38$0, $arg$38$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$39$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$39$this$ = $arg$39$callable$;
                .java.lang.Object $arg$39$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$39$1 = $arg$39$this$.mShared$aseq($arg$39$0);
                $arg$39$callable$.mShared($arg$39$0, $arg$39$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$40$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$40$this$ = $arg$40$callable$;
                .java.lang.Object $arg$40$0 = $arg$40$this$.mFormal$a();
                .ceylon.language.Sequential $arg$40$1 = $arg$40$this$.mFormal$aseq($arg$40$0);
                $arg$40$callable$.mFormal($arg$40$0, $arg$40$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$41$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$41$this$ = $arg$41$callable$;
                .java.lang.Object $arg$41$0 = null;
                .ceylon.language.Sequential $arg$41$1 = $arg$41$this$.mFormal$aseq($arg$41$0);
                $arg$41$callable$.mFormal($arg$41$0, $arg$41$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$42$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$42$this$ = $arg$42$callable$;
                .java.lang.Object $arg$42$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$42$1 = $arg$42$this$.mFormal$aseq($arg$42$0);
                $arg$42$callable$.mFormal($arg$42$0, $arg$42$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$43$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$43$this$ = $arg$43$callable$;
                .java.lang.Object $arg$43$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$43$1 = $arg$43$this$.mFormal$aseq($arg$43$0);
                $arg$43$callable$.mFormal($arg$43$0, $arg$43$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$44$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$44$this$ = $arg$44$callable$;
                .java.lang.Object $arg$44$0 = $arg$44$this$.mDefault$a();
                .ceylon.language.Sequential $arg$44$1 = $arg$44$this$.mDefault$aseq($arg$44$0);
                $arg$44$callable$.mDefault($arg$44$0, $arg$44$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$45$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$45$this$ = $arg$45$callable$;
                .java.lang.Object $arg$45$0 = null;
                .ceylon.language.Sequential $arg$45$1 = $arg$45$this$.mDefault$aseq($arg$45$0);
                $arg$45$callable$.mDefault($arg$45$0, $arg$45$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$46$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$46$this$ = $arg$46$callable$;
                .java.lang.Object $arg$46$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$46$1 = $arg$46$this$.mDefault$aseq($arg$46$0);
                $arg$46$callable$.mDefault($arg$46$0, $arg$46$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$47$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.ConcreteImplWithDefault $arg$47$this$ = $arg$47$callable$;
                .java.lang.Object $arg$47$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$47$1 = $arg$47$this$.mDefault$aseq($arg$47$0);
                $arg$47$callable$.mDefault($arg$47$0, $arg$47$1);
            }
            returning null;
        );
    }
}
abstract class Abstract<D> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<D> {
    
    Abstract(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedD) {
        this.$reifiedD = $reifiedD;
        this.$com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this = new .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<D>($reifiedD, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedD;
    protected final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<D> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<D> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    }
    
    @.java.lang.Override
    public final D mShared$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$a();
    }
    
    @.java.lang.Override
    public final void mShared() {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends D> mShared$aseq(final D a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$aseq(a);
    }
    
    @.java.lang.Override
    public final void mShared(final D a) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a);
    }
    
    @.java.lang.Override
    public final void mShared(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    @.java.lang.Override
    public final D mFormal$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$a();
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends D> mFormal$aseq(final D a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$aseq(a);
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final D a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal(a);
    }
    
    @.java.lang.Override
    public final D mDefault$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$a();
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends D> mDefault$aseq(final D a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$aseq(a);
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final D a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(a);
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final D a, final .ceylon.language.Sequential<? extends D> aseq) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(a, aseq);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.Abstract.class, $reifiedD);
    }
}
final class abstractCallsites_ {
    
    private abstractCallsites_() {
    }
    
    static void abstractCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.Abstract conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$48$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$48$this$ = $arg$48$callable$;
                .java.lang.Object $arg$48$0 = $arg$48$this$.mShared$a();
                .ceylon.language.Sequential $arg$48$1 = $arg$48$this$.mShared$aseq($arg$48$0);
                $arg$48$callable$.mShared($arg$48$0, $arg$48$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$49$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$49$this$ = $arg$49$callable$;
                .java.lang.Object $arg$49$0 = null;
                .ceylon.language.Sequential $arg$49$1 = $arg$49$this$.mShared$aseq($arg$49$0);
                $arg$49$callable$.mShared($arg$49$0, $arg$49$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$50$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$50$this$ = $arg$50$callable$;
                .java.lang.Object $arg$50$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$50$1 = $arg$50$this$.mShared$aseq($arg$50$0);
                $arg$50$callable$.mShared($arg$50$0, $arg$50$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$51$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$51$this$ = $arg$51$callable$;
                .java.lang.Object $arg$51$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$51$1 = $arg$51$this$.mShared$aseq($arg$51$0);
                $arg$51$callable$.mShared($arg$51$0, $arg$51$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$52$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$52$this$ = $arg$52$callable$;
                .java.lang.Object $arg$52$0 = $arg$52$this$.mFormal$a();
                .ceylon.language.Sequential $arg$52$1 = $arg$52$this$.mFormal$aseq($arg$52$0);
                $arg$52$callable$.mFormal($arg$52$0, $arg$52$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$53$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$53$this$ = $arg$53$callable$;
                .java.lang.Object $arg$53$0 = null;
                .ceylon.language.Sequential $arg$53$1 = $arg$53$this$.mFormal$aseq($arg$53$0);
                $arg$53$callable$.mFormal($arg$53$0, $arg$53$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$54$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$54$this$ = $arg$54$callable$;
                .java.lang.Object $arg$54$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$54$1 = $arg$54$this$.mFormal$aseq($arg$54$0);
                $arg$54$callable$.mFormal($arg$54$0, $arg$54$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$55$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$55$this$ = $arg$55$callable$;
                .java.lang.Object $arg$55$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$55$1 = $arg$55$this$.mFormal$aseq($arg$55$0);
                $arg$55$callable$.mFormal($arg$55$0, $arg$55$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$56$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$56$this$ = $arg$56$callable$;
                .java.lang.Object $arg$56$0 = $arg$56$this$.mDefault$a();
                .ceylon.language.Sequential $arg$56$1 = $arg$56$this$.mDefault$aseq($arg$56$0);
                $arg$56$callable$.mDefault($arg$56$0, $arg$56$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$57$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$57$this$ = $arg$57$callable$;
                .java.lang.Object $arg$57$0 = null;
                .ceylon.language.Sequential $arg$57$1 = $arg$57$this$.mDefault$aseq($arg$57$0);
                $arg$57$callable$.mDefault($arg$57$0, $arg$57$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$58$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$58$this$ = $arg$58$callable$;
                .java.lang.Object $arg$58$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$58$1 = $arg$58$this$.mDefault$aseq($arg$58$0);
                $arg$58$callable$.mDefault($arg$58$0, $arg$58$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$59$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$59$this$ = $arg$59$callable$;
                .java.lang.Object $arg$59$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$59$1 = $arg$59$this$.mDefault$aseq($arg$59$0);
                $arg$59$callable$.mDefault($arg$59$0, $arg$59$1);
            }
            returning null;
        );
    }
}
class AbstractSub<E> extends .com.redhat.ceylon.compiler.java.test.structure.concrete.Abstract<E> {
    
    AbstractSub(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedE) {
        super($reifiedE);
        this.$reifiedE = $reifiedE;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedE;
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final E e, final .ceylon.language.Sequential<? extends E> eseq) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub.class, $reifiedE);
    }
}
final class abstractSubCallsites_ {
    
    private abstractSubCallsites_() {
    }
    
    static void abstractSubCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$60$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$60$this$ = $arg$60$callable$;
                .java.lang.Object $arg$60$0 = $arg$60$this$.mShared$a();
                .ceylon.language.Sequential $arg$60$1 = $arg$60$this$.mShared$aseq($arg$60$0);
                $arg$60$callable$.mShared($arg$60$0, $arg$60$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$61$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$61$this$ = $arg$61$callable$;
                .java.lang.Object $arg$61$0 = null;
                .ceylon.language.Sequential $arg$61$1 = $arg$61$this$.mShared$aseq($arg$61$0);
                $arg$61$callable$.mShared($arg$61$0, $arg$61$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$62$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$62$this$ = $arg$62$callable$;
                .java.lang.Object $arg$62$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$62$1 = $arg$62$this$.mShared$aseq($arg$62$0);
                $arg$62$callable$.mShared($arg$62$0, $arg$62$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$63$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$63$this$ = $arg$63$callable$;
                .java.lang.Object $arg$63$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$63$1 = $arg$63$this$.mShared$aseq($arg$63$0);
                $arg$63$callable$.mShared($arg$63$0, $arg$63$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$64$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$64$this$ = $arg$64$callable$;
                .java.lang.Object $arg$64$0 = $arg$64$this$.mFormal$a();
                .ceylon.language.Sequential $arg$64$1 = $arg$64$this$.mFormal$aseq($arg$64$0);
                $arg$64$callable$.mFormal($arg$64$0, $arg$64$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$65$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$65$this$ = $arg$65$callable$;
                .java.lang.Object $arg$65$0 = null;
                .ceylon.language.Sequential $arg$65$1 = $arg$65$this$.mFormal$aseq($arg$65$0);
                $arg$65$callable$.mFormal($arg$65$0, $arg$65$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$66$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$66$this$ = $arg$66$callable$;
                .java.lang.Object $arg$66$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$66$1 = $arg$66$this$.mFormal$aseq($arg$66$0);
                $arg$66$callable$.mFormal($arg$66$0, $arg$66$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$67$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractSub $arg$67$this$ = $arg$67$callable$;
                .java.lang.Object $arg$67$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$67$1 = $arg$67$this$.mFormal$aseq($arg$67$0);
                $arg$67$callable$.mFormal($arg$67$0, $arg$67$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$68$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$68$this$ = $arg$68$callable$;
                .java.lang.Object $arg$68$0 = $arg$68$this$.mDefault$a();
                .ceylon.language.Sequential $arg$68$1 = $arg$68$this$.mDefault$aseq($arg$68$0);
                $arg$68$callable$.mDefault($arg$68$0, $arg$68$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$69$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$69$this$ = $arg$69$callable$;
                .java.lang.Object $arg$69$0 = null;
                .ceylon.language.Sequential $arg$69$1 = $arg$69$this$.mDefault$aseq($arg$69$0);
                $arg$69$callable$.mDefault($arg$69$0, $arg$69$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$70$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$70$this$ = $arg$70$callable$;
                .java.lang.Object $arg$70$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$70$1 = $arg$70$this$.mDefault$aseq($arg$70$0);
                $arg$70$callable$.mDefault($arg$70$0, $arg$70$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$71$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$71$this$ = $arg$71$callable$;
                .java.lang.Object $arg$71$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$71$1 = $arg$71$this$.mDefault$aseq($arg$71$0);
                $arg$71$callable$.mDefault($arg$71$0, $arg$71$1);
            }
            returning null;
        );
    }
}
abstract class AbstractImpl<F> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete<F> {
    
    AbstractImpl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedF) {
        this.$reifiedF = $reifiedF;
        this.$com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this = new .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<F>($reifiedF, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedF;
    protected final .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<F> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete$impl<F> $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this;
    }
    
    @.java.lang.Override
    public final F mShared$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$a();
    }
    
    @.java.lang.Override
    public final void mShared() {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends F> mShared$aseq(final F a) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared$aseq(a);
    }
    
    @.java.lang.Override
    public final void mShared(final F a) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a);
    }
    
    @.java.lang.Override
    public final void mShared(final F a, final .ceylon.language.Sequential<? extends F> aseq) {
        $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mShared(a, aseq);
    }
    
    @.java.lang.Override
    public final F mFormal$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$a();
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends F> mFormal$aseq(final F f) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal$aseq(f);
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final F f) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mFormal(f);
    }
    
    @.java.lang.Override
    public final F mDefault$a() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$a();
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault() {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends F> mDefault$aseq(final F f) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault$aseq(f);
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final F f) {
        return $com$redhat$ceylon$compiler$java$test$structure$concrete$Concrete$this.mDefault(f);
    }
    
    @.java.lang.Override
    public final .java.lang.Object mFormal(final F f, final .ceylon.language.Sequential<? extends F> fseq) {
        return null;
    }
    
    @.java.lang.Override
    public .java.lang.Object mDefault(final F f, final .ceylon.language.Sequential<? extends F> fseq) {
        return null;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl.class, $reifiedF);
    }
}
final class abstractImpl_ {
    
    private abstractImpl_() {
    }
    
    static void abstractImpl(final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$72$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$72$this$ = $arg$72$callable$;
                .java.lang.Object $arg$72$0 = $arg$72$this$.mShared$a();
                .ceylon.language.Sequential $arg$72$1 = $arg$72$this$.mShared$aseq($arg$72$0);
                $arg$72$callable$.mShared($arg$72$0, $arg$72$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$73$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$73$this$ = $arg$73$callable$;
                .java.lang.Object $arg$73$0 = null;
                .ceylon.language.Sequential $arg$73$1 = $arg$73$this$.mShared$aseq($arg$73$0);
                $arg$73$callable$.mShared($arg$73$0, $arg$73$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$74$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$74$this$ = $arg$74$callable$;
                .java.lang.Object $arg$74$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$74$1 = $arg$74$this$.mShared$aseq($arg$74$0);
                $arg$74$callable$.mShared($arg$74$0, $arg$74$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$75$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$75$this$ = $arg$75$callable$;
                .java.lang.Object $arg$75$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$75$1 = $arg$75$this$.mShared$aseq($arg$75$0);
                $arg$75$callable$.mShared($arg$75$0, $arg$75$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$76$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$76$this$ = $arg$76$callable$;
                .java.lang.Object $arg$76$0 = $arg$76$this$.mFormal$a();
                .ceylon.language.Sequential $arg$76$1 = $arg$76$this$.mFormal$aseq($arg$76$0);
                $arg$76$callable$.mFormal($arg$76$0, $arg$76$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$77$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$77$this$ = $arg$77$callable$;
                .java.lang.Object $arg$77$0 = null;
                .ceylon.language.Sequential $arg$77$1 = $arg$77$this$.mFormal$aseq($arg$77$0);
                $arg$77$callable$.mFormal($arg$77$0, $arg$77$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$78$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$78$this$ = $arg$78$callable$;
                .java.lang.Object $arg$78$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$78$1 = $arg$78$this$.mFormal$aseq($arg$78$0);
                $arg$78$callable$.mFormal($arg$78$0, $arg$78$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$79$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$79$this$ = $arg$79$callable$;
                .java.lang.Object $arg$79$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$79$1 = $arg$79$this$.mFormal$aseq($arg$79$0);
                $arg$79$callable$.mFormal($arg$79$0, $arg$79$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$80$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$80$this$ = $arg$80$callable$;
                .java.lang.Object $arg$80$0 = $arg$80$this$.mDefault$a();
                .ceylon.language.Sequential $arg$80$1 = $arg$80$this$.mDefault$aseq($arg$80$0);
                $arg$80$callable$.mDefault($arg$80$0, $arg$80$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$81$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$81$this$ = $arg$81$callable$;
                .java.lang.Object $arg$81$0 = null;
                .ceylon.language.Sequential $arg$81$1 = $arg$81$this$.mDefault$aseq($arg$81$0);
                $arg$81$callable$.mDefault($arg$81$0, $arg$81$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$82$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$82$this$ = $arg$82$callable$;
                .java.lang.Object $arg$82$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$82$1 = $arg$82$this$.mDefault$aseq($arg$82$0);
                $arg$82$callable$.mDefault($arg$82$0, $arg$82$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$83$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$83$this$ = $arg$83$callable$;
                .java.lang.Object $arg$83$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$83$1 = $arg$83$this$.mDefault$aseq($arg$83$0);
                $arg$83$callable$.mDefault($arg$83$0, $arg$83$1);
            }
            returning null;
        );
    }
}
class AbstractImplSub<G> extends .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl<G> {
    
    AbstractImplSub(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedG) {
        super($reifiedG);
        this.$reifiedG = $reifiedG;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedG;
    
    @.java.lang.Override
    public final .java.lang.Object mDefault(final G g, final .ceylon.language.Sequential<? extends G> gseq) {
        return null;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub.class, $reifiedG);
    }
}
final class abstractImplSubCallsites_ {
    
    private abstractImplSubCallsites_() {
    }
    
    static void abstractImplSubCallsites(final .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub conc) {
        conc.mShared();
        conc.mShared(null);
        conc.mShared(.ceylon.language.Integer.instance(1L));
        conc.mShared(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$84$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$84$this$ = $arg$84$callable$;
                .java.lang.Object $arg$84$0 = $arg$84$this$.mShared$a();
                .ceylon.language.Sequential $arg$84$1 = $arg$84$this$.mShared$aseq($arg$84$0);
                $arg$84$callable$.mShared($arg$84$0, $arg$84$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$85$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$85$this$ = $arg$85$callable$;
                .java.lang.Object $arg$85$0 = null;
                .ceylon.language.Sequential $arg$85$1 = $arg$85$this$.mShared$aseq($arg$85$0);
                $arg$85$callable$.mShared($arg$85$0, $arg$85$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$86$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$86$this$ = $arg$86$callable$;
                .java.lang.Object $arg$86$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$86$1 = $arg$86$this$.mShared$aseq($arg$86$0);
                $arg$86$callable$.mShared($arg$86$0, $arg$86$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$87$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.Concrete $arg$87$this$ = $arg$87$callable$;
                .java.lang.Object $arg$87$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$87$1 = $arg$87$this$.mShared$aseq($arg$87$0);
                $arg$87$callable$.mShared($arg$87$0, $arg$87$1);
            }
            returning null;
        );
        conc.mFormal();
        conc.mFormal(null);
        conc.mFormal(.ceylon.language.Integer.instance(1L));
        conc.mFormal(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$88$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$88$this$ = $arg$88$callable$;
                .java.lang.Object $arg$88$0 = $arg$88$this$.mFormal$a();
                .ceylon.language.Sequential $arg$88$1 = $arg$88$this$.mFormal$aseq($arg$88$0);
                $arg$88$callable$.mFormal($arg$88$0, $arg$88$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$89$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$89$this$ = $arg$89$callable$;
                .java.lang.Object $arg$89$0 = null;
                .ceylon.language.Sequential $arg$89$1 = $arg$89$this$.mFormal$aseq($arg$89$0);
                $arg$89$callable$.mFormal($arg$89$0, $arg$89$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$90$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$90$this$ = $arg$90$callable$;
                .java.lang.Object $arg$90$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$90$1 = $arg$90$this$.mFormal$aseq($arg$90$0);
                $arg$90$callable$.mFormal($arg$90$0, $arg$90$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$91$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImpl $arg$91$this$ = $arg$91$callable$;
                .java.lang.Object $arg$91$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$91$1 = $arg$91$this$.mFormal$aseq($arg$91$0);
                $arg$91$callable$.mFormal($arg$91$0, $arg$91$1);
            }
            returning null;
        );
        conc.mDefault();
        conc.mDefault(null);
        conc.mDefault(.ceylon.language.Integer.instance(1L));
        conc.mDefault(.ceylon.language.Float.instance(1.0));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$92$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$92$this$ = $arg$92$callable$;
                .java.lang.Object $arg$92$0 = $arg$92$this$.mDefault$a();
                .ceylon.language.Sequential $arg$92$1 = $arg$92$this$.mDefault$aseq($arg$92$0);
                $arg$92$callable$.mDefault($arg$92$0, $arg$92$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$93$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$93$this$ = $arg$93$callable$;
                .java.lang.Object $arg$93$0 = null;
                .ceylon.language.Sequential $arg$93$1 = $arg$93$this$.mDefault$aseq($arg$93$0);
                $arg$93$callable$.mDefault($arg$93$0, $arg$93$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$94$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$94$this$ = $arg$94$callable$;
                .java.lang.Object $arg$94$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential $arg$94$1 = $arg$94$this$.mDefault$aseq($arg$94$0);
                $arg$94$callable$.mDefault($arg$94$0, $arg$94$1);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$95$callable$ = conc;
                .com.redhat.ceylon.compiler.java.test.structure.concrete.AbstractImplSub $arg$95$this$ = $arg$95$callable$;
                .java.lang.Object $arg$95$0 = .ceylon.language.Float.instance(1.0);
                .ceylon.language.Sequential $arg$95$1 = $arg$95$this$.mDefault$aseq($arg$95$0);
                $arg$95$callable$.mDefault($arg$95$0, $arg$95$1);
            }
            returning null;
        );
    }
}