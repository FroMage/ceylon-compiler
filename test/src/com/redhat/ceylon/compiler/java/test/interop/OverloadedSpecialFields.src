package com.redhat.ceylon.compiler.java.test.interop;

final class overloadedSpecialFields_ {
    
    private overloadedSpecialFields_() {
    }
    
    static void overloadedSpecialFields() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaOverloadedSpecialFields java = new .com.redhat.ceylon.compiler.java.test.interop.JavaOverloadedSpecialFields();
        .java.lang.Object sync;
        sync = .ceylon.language.Integer.instance(java.hashCode());
        sync = .ceylon.language.Integer.instance(java.hashCode((int)0L));
        sync = .ceylon.language.Integer.instance(java.hashCode(.ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(0L)));
        sync = .ceylon.language.String.instance(java.toString());
        sync = .com.redhat.ceylon.compiler.java.Util.checkNull((
            let
            {
                .java.lang.String $ceylontmp0 = java.toString((int)1L);
            }
            returning $ceylontmp0 != null ? .ceylon.language.String.instance($ceylontmp0) : null;
        ));
        sync = .com.redhat.ceylon.compiler.java.Util.checkNull((
            let
            {
                .java.lang.String $ceylontmp1 = java.toString(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L));
            }
            returning $ceylontmp1 != null ? .ceylon.language.String.instance($ceylontmp1) : null;
        ));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.overloadedSpecialFields_.overloadedSpecialFields();
    }
}