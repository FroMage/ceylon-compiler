package com.redhat.ceylon.compiler.java.test.interop;

final class variance_ {
    
    private variance_() {
    }
    
    static void variance() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaVariance var = new .com.redhat.ceylon.compiler.java.test.interop.JavaVariance();
        final .ceylon.language.Callable<? extends .java.lang.Object> interfaceMethod = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.Interface.class, .ceylon.language.Object.$TypeDescriptor)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.Interface.class, .ceylon.language.Object.$TypeDescriptor)), .ceylon.language.Empty.$TypeDescriptor), "Object(Interface<Object>?)", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.interop.Interface $$arg0 = (.com.redhat.ceylon.compiler.java.test.interop.Interface<.java.lang.Object>)(.com.redhat.ceylon.compiler.java.test.interop.Interface)$param$0;
                return var.interfaceMethod($$arg0);
            }
        };
        final .java.lang.Object ret1 = .com.redhat.ceylon.compiler.java.Util.checkNull(var.interfaceMethod(var));
        final .ceylon.language.Callable<? extends .java.lang.Object> classMethod = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.Class.class, .ceylon.language.Object.$TypeDescriptor)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.Class.class, .ceylon.language.Object.$TypeDescriptor)), .ceylon.language.Empty.$TypeDescriptor), "Object(Class<Object>?)", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.interop.Class $$arg0 = (.com.redhat.ceylon.compiler.java.test.interop.Class<.java.lang.Object>)(.com.redhat.ceylon.compiler.java.test.interop.Class)$param$0;
                return var.classMethod($$arg0);
            }
        };
        final .java.lang.Object ret2 = .com.redhat.ceylon.compiler.java.Util.checkNull(var.classMethod(var));
        final .com.redhat.ceylon.compiler.java.test.interop.JavaVariance m = .com.redhat.ceylon.compiler.java.Util.checkNull(var.<.com.redhat.ceylon.compiler.java.test.interop.JavaVariance>method(var));
        final .java.lang.Object v1 = .com.redhat.ceylon.compiler.java.Util.checkNull(var.roField);
        final .java.lang.Object v2 = .com.redhat.ceylon.compiler.java.Util.checkNull(var.rwField);
        final .java.lang.Object v3 = .com.redhat.ceylon.compiler.java.Util.checkNull(var.getRoProperty());
        final .java.lang.Object v4 = .com.redhat.ceylon.compiler.java.Util.checkNull(var.getRwProperty());
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.variance_.variance();
    }
}