package com.redhat.ceylon.compiler.java.test.expression.operator;

class RangeOp<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    RangeOp(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        this.$reified$T = $reified$T;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    
    private final void int$priv$(final long i1, final long i2) {
        final .ceylon.language.Range<.ceylon.language.Integer> range = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(i1), .ceylon.language.Integer.instance(i2));
    }
    
    private final <T extends .ceylon.language.Ordinal<? extends T> & .ceylon.language.Comparable<? super T>>void t$priv$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final T t1, final T t2) {
        final .ceylon.language.Range<T> range = new .ceylon.language.Range<T>($reified$T, (T)t1, (T)t2);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOp(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOp.class, $reified$T);
    }
}
abstract class RangeOpEnum implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Comparable<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum>, .ceylon.language.Ordinal<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> {
    
    RangeOpEnum(final long i) {
        this.i = i;
        this.$ceylon$language$Comparable$this$ = new .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum>(.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum.$TypeDescriptor$, this);
    }
    private final long i;
    
    private final long getI$priv$() {
        return i;
    }
    protected final .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> $ceylon$language$Comparable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Comparable$impl<? super .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> $ceylon$language$Comparable$impl() {
        return $ceylon$language$Comparable$this$;
    }
    
    @.java.lang.Override
    public boolean largerThan(final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum other) {
        return $ceylon$language$Comparable$this$.largerThan(other);
    }
    
    @.java.lang.Override
    public boolean smallerThan(final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum other) {
        return $ceylon$language$Comparable$this$.smallerThan(other);
    }
    
    @.java.lang.Override
    public boolean notSmallerThan(final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum other) {
        return $ceylon$language$Comparable$this$.notSmallerThan(other);
    }
    
    @.java.lang.Override
    public boolean notLargerThan(final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum other) {
        return $ceylon$language$Comparable$this$.notLargerThan(other);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Comparison compare(final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum other) {
        return .ceylon.language.Integer.instance(getI$priv$()).compare(.ceylon.language.Integer.instance(other.getI$priv$()));
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum.class);
}
final class rangeOpF_ extends .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum {
    
    private rangeOpF_() {
        super(1L);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum getPredecessor() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_.get_();
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum getSuccessor() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_.get_();
    }
    private static final .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_[] value;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            value = new .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_[]{new .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_()};
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            value = null;
        }
    }
    
    static .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_ get_() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'rangeOpF\' before it was set");
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_.class);
    }
}
final class rangeOpE_ extends .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum {
    
    private rangeOpE_() {
        super(2L);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum getPredecessor() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_.get_();
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum getSuccessor() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_.get_();
    }
    private static final .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_[] value;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            value = new .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_[]{new .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_()};
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            value = null;
        }
    }
    
    static .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_ get_() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'rangeOpE\' before it was set");
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_.class);
    }
}
final class bug_ {
    
    private bug_() {
    }
    
    static void bug() {
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> range = new .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum>(.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_.get_(), .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_.get_());
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.operator.bug_.bug();
    }
}