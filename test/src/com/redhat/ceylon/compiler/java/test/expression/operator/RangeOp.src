package com.redhat.ceylon.compiler.java.test.expression.operator;

class RangeOp<T> {
    
    RangeOp() {
    }
    
    private final void int$priv(final long i1, final long i2) {
        final .ceylon.language.Range<.ceylon.language.Integer> range = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(i1), .ceylon.language.Integer.instance(i2));
    }
    
    private final <T extends .ceylon.language.Ordinal<? extends T> & .ceylon.language.Comparable<? super T>>void t$priv(final T t1, final T t2) {
        final .ceylon.language.Range<T> range = new .ceylon.language.Range<T>(t1, t2);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOp();
    }
}
abstract class RangeOpEnum implements .ceylon.language.Comparable<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum>, .ceylon.language.Ordinal<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> {
    
    RangeOpEnum(final long i) {
        this.i = i;
        this.$ceylon$language$Comparable$this = new .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum>(this);
        this.$ceylon$language$Ordinal$this = new .ceylon.language.Ordinal$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum>(this);
    }
    private final long i;
    protected final .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> $ceylon$language$Comparable$this;
    
    @.java.lang.Override
    public .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> $ceylon$language$Comparable$impl() {
        return $ceylon$language$Comparable$this;
    }
    protected final .ceylon.language.Ordinal$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> $ceylon$language$Ordinal$this;
    
    @.java.lang.Override
    public .ceylon.language.Ordinal$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> $ceylon$language$Ordinal$impl() {
        return $ceylon$language$Ordinal$this;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Comparison compare(final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum other) {
        return .ceylon.language.Integer.instance(i).compare(.ceylon.language.Integer.instance(other.i));
    }
}
final class rangeOpF_ extends .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum {
    
    private rangeOpF_() {
        super(1L);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum getPredecessor() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_.getRangeOpE$();
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum getSuccessor() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_.getRangeOpE$();
    }
    private static final .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_[] value;
    static {
        value = new .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_[]{new .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_()};
    }
    
    static .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_ getRangeOpF$() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.RecursiveInitializationException();
        }
    }
}
final class rangeOpE_ extends .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum {
    
    private rangeOpE_() {
        super(2L);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum getPredecessor() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_.getRangeOpF$();
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum getSuccessor() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_.getRangeOpF$();
    }
    private static final .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_[] value;
    static {
        value = new .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_[]{new .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_()};
    }
    
    static .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_ getRangeOpE$() {
        try {
            return value[0];
        } catch (.java.lang.NullPointerException ex) {
            throw new .ceylon.language.RecursiveInitializationException();
        }
    }
}
final class bug_ {
    
    private bug_() {
    }
    
    static void bug() {
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum> range = new .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.expression.operator.RangeOpEnum>(.com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpE_.getRangeOpE$(), .com.redhat.ceylon.compiler.java.test.expression.operator.rangeOpF_.getRangeOpF$());
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.operator.bug_.bug();
    }
}