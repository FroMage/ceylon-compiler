package com.redhat.ceylon.compiler.java.test.statement.loop;

class OptimizedForWithRange {
    
    OptimizedForWithRange(long start, long end) {
        this.start = start;
        this.end = end;
    }
    private final long start;
    
    private final long getStart() {
        return start;
    }
    private final long end;
    
    private final long getEnd() {
        return end;
    }
    
    private final void literals() {
        long sum = 0L;
        final long $ceylontmpstart0 = 1L;
        final long $ceylontmpend1 = 10L;
        final boolean $ceylontmpincreasing2 = $ceylontmpstart0 <= $ceylontmpend1;
        final long $ceylontmpincr3 = $ceylontmpincreasing2 ? 1L : -1L;
        for (long $i$4 = $ceylontmpstart0; $ceylontmpincreasing2 ? $i$4 - $ceylontmpend1 <= 0L : $i$4 - $ceylontmpend1 >= 0L; $i$4 += $ceylontmpincr3) {
            final long i = $i$4;
            sum += i;
        }
        final int $ceylontmpstart5 = 97;
        final int $ceylontmpend6 = 122;
        final boolean $ceylontmpincreasing7 = $ceylontmpstart5 <= $ceylontmpend6;
        final int $ceylontmpincr8 = $ceylontmpincreasing7 ? 1 : -1;
        for (int $c$9 = $ceylontmpstart5; $ceylontmpincreasing7 ? $c$9 - $ceylontmpend6 <= 0 : $c$9 - $ceylontmpend6 >= 0; $c$9 += $ceylontmpincr8) {
            final int c = $c$9;
            sum += .ceylon.language.Character.getInteger(c);
        }
    }
    
    private final void expressions() {
        long sum = 0L;
        final long $ceylontmpstart10 = getStart();
        final long $ceylontmpend11 = getEnd();
        final boolean $ceylontmpincreasing12 = $ceylontmpstart10 <= $ceylontmpend11;
        final long $ceylontmpincr13 = $ceylontmpincreasing12 ? 1L : -1L;
        for (long $i$14 = $ceylontmpstart10; $ceylontmpincreasing12 ? $i$14 - $ceylontmpend11 <= 0L : $i$14 - $ceylontmpend11 >= 0L; $i$14 += $ceylontmpincr13) {
            final long i = $i$14;
            sum += i;
        }
        final long $ceylontmpstart15 = getStart() + 10L;
        final long $ceylontmpend16 = getEnd() + 10L;
        final boolean $ceylontmpincreasing17 = $ceylontmpstart15 <= $ceylontmpend16;
        final long $ceylontmpincr18 = $ceylontmpincreasing17 ? 1L : -1L;
        for (long $i$19 = $ceylontmpstart15; $ceylontmpincreasing17 ? $i$19 - $ceylontmpend16 <= 0L : $i$19 - $ceylontmpend16 >= 0L; $i$19 += $ceylontmpincr18) {
            final long i = $i$19;
            sum += i;
        }
    }
    
    private final void by() {
        long sum = 0L;
        final long $ceylontmpstart20 = 1L;
        final long $ceylontmpend21 = 10L;
        final long $ceylontmpby22 = 3L;
        if ($ceylontmpby22 <= 0) throw new .ceylon.language.Exception(.ceylon.language.String.instance("step size must be greater than zero"), null);
        final boolean $ceylontmpincreasing23 = $ceylontmpstart20 <= $ceylontmpend21;
        final long $ceylontmpincr24 = $ceylontmpincreasing23 ? $ceylontmpby22 : -$ceylontmpby22;
        for (long $i$25 = $ceylontmpstart20; $ceylontmpincreasing23 ? $i$25 - $ceylontmpend21 <= 0L : $i$25 - $ceylontmpend21 >= 0L; $i$25 += $ceylontmpincr24) {
            final long i = $i$25;
            sum += i;
        }
        final long $ceylontmpstart26 = 1L;
        final long $ceylontmpend27 = 10L;
        final long $ceylontmpby28 = 3L;
        if ($ceylontmpby28 <= 0) throw new .ceylon.language.Exception(.ceylon.language.String.instance("step size must be greater than zero"), null);
        final boolean $ceylontmpincreasing29 = $ceylontmpstart26 <= $ceylontmpend27;
        final long $ceylontmpincr30 = $ceylontmpincreasing29 ? $ceylontmpby28 : -$ceylontmpby28;
        for (long $i$31 = $ceylontmpstart26; $ceylontmpincreasing29 ? $i$31 - $ceylontmpend27 <= 0L : $i$31 - $ceylontmpend27 >= 0L; $i$31 += $ceylontmpincr30) {
            final long i = $i$31;
            sum += i;
        }
    }
    
    private final void disabled() {
        long sum = 0L;
        .java.lang.Object $elem$32;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> $i$iter$33 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).getIterator(); !(($elem$32 = $i$iter$33.next()) instanceof .ceylon.language.Finished); ) {
            final long i = ((.ceylon.language.Integer)$elem$32).longValue();
            sum += i;
        }
        .java.lang.Object $elem$34;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> $i$iter$35 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).getIterator(); !(($elem$34 = $i$iter$35.next()) instanceof .ceylon.language.Finished); ) {
            final long i = ((.ceylon.language.Integer)$elem$34).longValue();
            sum += i;
        }
    }
    
    private final void flow() {
        long sum = 0L;
        final long $ceylontmpstart36 = 1L;
        final long $ceylontmpend37 = 10L;
        final boolean $ceylontmpincreasing38 = $ceylontmpstart36 <= $ceylontmpend37;
        final long $ceylontmpincr39 = $ceylontmpincreasing38 ? 1L : -1L;
        for (long $withElse$40 = $ceylontmpstart36; $ceylontmpincreasing38 ? $withElse$40 - $ceylontmpend37 <= 0L : $withElse$40 - $ceylontmpend37 >= 0L; $withElse$40 += $ceylontmpincr39) {
            final long withElse = $withElse$40;
            sum += withElse;
        }
        sum = 0L;
        final long $ceylontmpstart41 = 10L;
        final long $ceylontmpend42 = 1L;
        final boolean $ceylontmpincreasing43 = $ceylontmpstart41 <= $ceylontmpend42;
        final long $ceylontmpincr44 = $ceylontmpincreasing43 ? 1L : -1L;
        for (long $breaks$45 = $ceylontmpstart41; $ceylontmpincreasing43 ? $breaks$45 - $ceylontmpend42 <= 0L : $breaks$45 - $ceylontmpend42 >= 0L; $breaks$45 += $ceylontmpincr44) {
            final long breaks = $breaks$45;
            sum += breaks;
            break;
        }
        boolean $doforelse$46 = true;
        final long $ceylontmpstart47 = 10L;
        final long $ceylontmpend48 = 1L;
        final boolean $ceylontmpincreasing49 = $ceylontmpstart47 <= $ceylontmpend48;
        final long $ceylontmpincr50 = $ceylontmpincreasing49 ? 1L : -1L;
        for (long $breaksWithElse$51 = $ceylontmpstart47; $ceylontmpincreasing49 ? $breaksWithElse$51 - $ceylontmpend48 <= 0L : $breaksWithElse$51 - $ceylontmpend48 >= 0L; $breaksWithElse$51 += $ceylontmpincr50) {
            final long breaksWithElse = $breaksWithElse$51;
            sum += breaksWithElse;
            $doforelse$46 = false;
            break;
        }
        if ($doforelse$46) {
            sum = 0L;
        }
        boolean $doforelse$52 = true;
        final long $ceylontmpstart53 = 10L;
        final long $ceylontmpend54 = 1L;
        final boolean $ceylontmpincreasing55 = $ceylontmpstart53 <= $ceylontmpend54;
        final long $ceylontmpincr56 = $ceylontmpincreasing55 ? 1L : -1L;
        for (long $breaksWithElse$57 = $ceylontmpstart53; $ceylontmpincreasing55 ? $breaksWithElse$57 - $ceylontmpend54 <= 0L : $breaksWithElse$57 - $ceylontmpend54 >= 0L; $breaksWithElse$57 += $ceylontmpincr56) {
            final long breaksWithElse = $breaksWithElse$57;
            sum += breaksWithElse;
            if (breaksWithElse == 5L) {
                $doforelse$52 = false;
                break;
            }
        }
        if ($doforelse$52) {
            sum = 0L;
        }
        final long $ceylontmpstart59 = 10L;
        final long $ceylontmpend60 = 1L;
        final boolean $ceylontmpincreasing61 = $ceylontmpstart59 <= $ceylontmpend60;
        final long $ceylontmpincr62 = $ceylontmpincreasing61 ? 1L : -1L;
        for (long $returns$63 = $ceylontmpstart59; $ceylontmpincreasing61 ? $returns$63 - $ceylontmpend60 <= 0L : $returns$63 - $ceylontmpend60 >= 0L; $returns$63 += $ceylontmpincr62) {
            final long returns = $returns$63;
            sum += returns;
            return;
        }
        final long $ceylontmpstart64 = 10L;
        final long $ceylontmpend65 = 1L;
        final boolean $ceylontmpincreasing66 = $ceylontmpstart64 <= $ceylontmpend65;
        final long $ceylontmpincr67 = $ceylontmpincreasing66 ? 1L : -1L;
        for (long $returnsWithElse$68 = $ceylontmpstart64; $ceylontmpincreasing66 ? $returnsWithElse$68 - $ceylontmpend65 <= 0L : $returnsWithElse$68 - $ceylontmpend65 >= 0L; $returnsWithElse$68 += $ceylontmpincr67) {
            final long returnsWithElse = $returnsWithElse$68;
            sum += returnsWithElse;
            return;
        }
        sum = 0L;
        final long $ceylontmpstart69 = 10L;
        final long $ceylontmpend70 = 1L;
        final boolean $ceylontmpincreasing71 = $ceylontmpstart69 <= $ceylontmpend70;
        final long $ceylontmpincr72 = $ceylontmpincreasing71 ? 1L : -1L;
        for (long $returnsWithElse$73 = $ceylontmpstart69; $ceylontmpincreasing71 ? $returnsWithElse$73 - $ceylontmpend70 <= 0L : $returnsWithElse$73 - $ceylontmpend70 >= 0L; $returnsWithElse$73 += $ceylontmpincr72) {
            final long returnsWithElse = $returnsWithElse$73;
            sum += returnsWithElse;
            if (returnsWithElse == 5L) {
                return;
            }
        }
        sum = 0L;
        final long $ceylontmpstart75 = 10L;
        final long $ceylontmpend76 = 1L;
        final boolean $ceylontmpincreasing77 = $ceylontmpstart75 <= $ceylontmpend76;
        final long $ceylontmpincr78 = $ceylontmpincreasing77 ? 1L : -1L;
        for (long $throws$79 = $ceylontmpstart75; $ceylontmpincreasing77 ? $throws$79 - $ceylontmpend76 <= 0L : $throws$79 - $ceylontmpend76 >= 0L; $throws$79 += $ceylontmpincr78) {
            final long throws = $throws$79;
            sum += throws;
            return;
        }
        final long $ceylontmpstart80 = 10L;
        final long $ceylontmpend81 = 1L;
        final boolean $ceylontmpincreasing82 = $ceylontmpstart80 <= $ceylontmpend81;
        final long $ceylontmpincr83 = $ceylontmpincreasing82 ? 1L : -1L;
        for (long $throwsWithElse$84 = $ceylontmpstart80; $ceylontmpincreasing82 ? $throwsWithElse$84 - $ceylontmpend81 <= 0L : $throwsWithElse$84 - $ceylontmpend81 >= 0L; $throwsWithElse$84 += $ceylontmpincr83) {
            final long throwsWithElse = $throwsWithElse$84;
            sum += throwsWithElse;
            return;
        }
        sum = 0L;
        final long $ceylontmpstart85 = 10L;
        final long $ceylontmpend86 = 1L;
        final boolean $ceylontmpincreasing87 = $ceylontmpstart85 <= $ceylontmpend86;
        final long $ceylontmpincr88 = $ceylontmpincreasing87 ? 1L : -1L;
        for (long $throwsWithElse$89 = $ceylontmpstart85; $ceylontmpincreasing87 ? $throwsWithElse$89 - $ceylontmpend86 <= 0L : $throwsWithElse$89 - $ceylontmpend86 >= 0L; $throwsWithElse$89 += $ceylontmpincr88) {
            final long throwsWithElse = $throwsWithElse$89;
            sum += throwsWithElse;
            if (throwsWithElse == 5L) {
                return;
            }
        }
        sum = 0L;
    }
    
    private final void captured() {
        final long $ceylontmpstart91 = 0L;
        final long $ceylontmpend92 = 10L;
        final boolean $ceylontmpincreasing93 = $ceylontmpstart91 <= $ceylontmpend92;
        final long $ceylontmpincr94 = $ceylontmpincreasing93 ? 1L : -1L;
        for (long $i$95 = $ceylontmpstart91; $ceylontmpincreasing93 ? $i$95 - $ceylontmpend92 <= 0L : $i$95 - $ceylontmpend92 >= 0L; $i$95 += $ceylontmpincr94) {
            final long i = $i$95;
            
            final class x_ {
                
                private x_() {
                }
                
                long x() {
                    return i + 10L;
                }
            }
            final x_ x = new x_();
        }
    }
}