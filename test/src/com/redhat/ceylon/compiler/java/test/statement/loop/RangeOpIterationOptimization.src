package com.redhat.ceylon.compiler.java.test.statement.loop;

class OptimizedForWithRange implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OptimizedForWithRange(final long start, final long end) {
        this.start = start;
        this.end = end;
    }
    private final long start;
    
    private final long getStart$priv() {
        return start;
    }
    private final long end;
    
    private final long getEnd$priv() {
        return end;
    }
    
    private final void literals$priv() {
        long sum = 0L;
        final long $ceylontmpstart$0 = 1L;
        final long $ceylontmpend$1 = 10L;
        final boolean $ceylontmpincreasing$2 = $ceylontmpstart$0 <= $ceylontmpend$1;
        final long $ceylontmpincr$3 = $ceylontmpincreasing$2 ? 1L : -1L;
        for (long i$4 = $ceylontmpstart$0; $ceylontmpincreasing$2 ? i$4 - $ceylontmpend$1 <= 0L : i$4 - $ceylontmpend$1 >= 0L; i$4 += $ceylontmpincr$3) {
            final long i = i$4;
            sum += i;
        }
        final int $ceylontmpstart$5 = 97;
        final int $ceylontmpend$6 = 122;
        final boolean $ceylontmpincreasing$7 = $ceylontmpstart$5 <= $ceylontmpend$6;
        final int $ceylontmpincr$8 = $ceylontmpincreasing$7 ? 1 : -1;
        for (int c$9 = $ceylontmpstart$5; $ceylontmpincreasing$7 ? c$9 - $ceylontmpend$6 <= 0 : c$9 - $ceylontmpend$6 >= 0; c$9 += $ceylontmpincr$8) {
            final int c = c$9;
            sum += .ceylon.language.Character.getInteger(c);
        }
    }
    
    private final void expressions$priv() {
        long sum = 0L;
        final long $ceylontmpstart$10 = getStart$priv();
        final long $ceylontmpend$11 = getEnd$priv();
        final boolean $ceylontmpincreasing$12 = $ceylontmpstart$10 <= $ceylontmpend$11;
        final long $ceylontmpincr$13 = $ceylontmpincreasing$12 ? 1L : -1L;
        for (long i$14 = $ceylontmpstart$10; $ceylontmpincreasing$12 ? i$14 - $ceylontmpend$11 <= 0L : i$14 - $ceylontmpend$11 >= 0L; i$14 += $ceylontmpincr$13) {
            final long i = i$14;
            sum += i;
        }
        final long $ceylontmpstart$15 = getStart$priv() + 10L;
        final long $ceylontmpend$16 = getEnd$priv() + 10L;
        final boolean $ceylontmpincreasing$17 = $ceylontmpstart$15 <= $ceylontmpend$16;
        final long $ceylontmpincr$18 = $ceylontmpincreasing$17 ? 1L : -1L;
        for (long i$19 = $ceylontmpstart$15; $ceylontmpincreasing$17 ? i$19 - $ceylontmpend$16 <= 0L : i$19 - $ceylontmpend$16 >= 0L; i$19 += $ceylontmpincr$18) {
            final long i = i$19;
            sum += i;
        }
    }
    
    private final void by$priv() {
        long sum = 0L;
        final long $ceylontmpstart$20 = 1L;
        final long $ceylontmpend$21 = 10L;
        final long $ceylontmpby$22 = 3L;
        if ($ceylontmpby$22 <= 0) throw new .ceylon.language.AssertionException("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final boolean $ceylontmpincreasing$23 = $ceylontmpstart$20 <= $ceylontmpend$21;
        final long $ceylontmpincr$24 = $ceylontmpincreasing$23 ? $ceylontmpby$22 : -$ceylontmpby$22;
        for (long i$25 = $ceylontmpstart$20; $ceylontmpincreasing$23 ? i$25 - $ceylontmpend$21 <= 0L : i$25 - $ceylontmpend$21 >= 0L; i$25 += $ceylontmpincr$24) {
            final long i = i$25;
            sum += i;
        }
        final long $ceylontmpstart$26 = 1L;
        final long $ceylontmpend$27 = 10L;
        final long $ceylontmpby$28 = 3L;
        if ($ceylontmpby$28 <= 0) throw new .ceylon.language.AssertionException("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final boolean $ceylontmpincreasing$29 = $ceylontmpstart$26 <= $ceylontmpend$27;
        final long $ceylontmpincr$30 = $ceylontmpincreasing$29 ? $ceylontmpby$28 : -$ceylontmpby$28;
        for (long i$31 = $ceylontmpstart$26; $ceylontmpincreasing$29 ? i$31 - $ceylontmpend$27 <= 0L : i$31 - $ceylontmpend$27 >= 0L; i$31 += $ceylontmpincr$30) {
            final long i = i$31;
            sum += i;
        }
    }
    
    private final void disabled$priv() {
        long sum = 0L;
        .java.lang.Object elem$32;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iter$33 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator(); !((elem$32 = i$iter$33.next()) instanceof .ceylon.language.Finished); ) {
            final long i = ((.ceylon.language.Integer)elem$32).longValue();
            sum += i;
        }
        .java.lang.Object elem$34;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iter$35 = new .ceylon.language.Range<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator(); !((elem$34 = i$iter$35.next()) instanceof .ceylon.language.Finished); ) {
            final long i = ((.ceylon.language.Integer)elem$34).longValue();
            sum += i;
        }
    }
    
    private final void flow$priv() {
        long sum = 0L;
        final long $ceylontmpstart$36 = 1L;
        final long $ceylontmpend$37 = 10L;
        final boolean $ceylontmpincreasing$38 = $ceylontmpstart$36 <= $ceylontmpend$37;
        final long $ceylontmpincr$39 = $ceylontmpincreasing$38 ? 1L : -1L;
        for (long withElse$40 = $ceylontmpstart$36; $ceylontmpincreasing$38 ? withElse$40 - $ceylontmpend$37 <= 0L : withElse$40 - $ceylontmpend$37 >= 0L; withElse$40 += $ceylontmpincr$39) {
            final long withElse = withElse$40;
            sum += withElse;
        }
        sum = 0L;
        final long $ceylontmpstart$41 = 10L;
        final long $ceylontmpend$42 = 1L;
        final boolean $ceylontmpincreasing$43 = $ceylontmpstart$41 <= $ceylontmpend$42;
        final long $ceylontmpincr$44 = $ceylontmpincreasing$43 ? 1L : -1L;
        for (long breaks$45 = $ceylontmpstart$41; $ceylontmpincreasing$43 ? breaks$45 - $ceylontmpend$42 <= 0L : breaks$45 - $ceylontmpend$42 >= 0L; breaks$45 += $ceylontmpincr$44) {
            final long breaks = breaks$45;
            sum += breaks;
            break;
        }
        boolean doforelse$46 = true;
        final long $ceylontmpstart$47 = 10L;
        final long $ceylontmpend$48 = 1L;
        final boolean $ceylontmpincreasing$49 = $ceylontmpstart$47 <= $ceylontmpend$48;
        final long $ceylontmpincr$50 = $ceylontmpincreasing$49 ? 1L : -1L;
        for (long breaksWithElse$51 = $ceylontmpstart$47; $ceylontmpincreasing$49 ? breaksWithElse$51 - $ceylontmpend$48 <= 0L : breaksWithElse$51 - $ceylontmpend$48 >= 0L; breaksWithElse$51 += $ceylontmpincr$50) {
            final long breaksWithElse = breaksWithElse$51;
            sum += breaksWithElse;
            doforelse$46 = false;
            break;
        }
        if (doforelse$46) {
            sum = 0L;
        }
        boolean doforelse$52 = true;
        final long $ceylontmpstart$53 = 10L;
        final long $ceylontmpend$54 = 1L;
        final boolean $ceylontmpincreasing$55 = $ceylontmpstart$53 <= $ceylontmpend$54;
        final long $ceylontmpincr$56 = $ceylontmpincreasing$55 ? 1L : -1L;
        for (long breaksWithElse$57 = $ceylontmpstart$53; $ceylontmpincreasing$55 ? breaksWithElse$57 - $ceylontmpend$54 <= 0L : breaksWithElse$57 - $ceylontmpend$54 >= 0L; breaksWithElse$57 += $ceylontmpincr$56) {
            final long breaksWithElse = breaksWithElse$57;
            sum += breaksWithElse;
            if (breaksWithElse == 5L) {
                doforelse$52 = false;
                break;
            }
        }
        if (doforelse$52) {
            sum = 0L;
        }
        final long $ceylontmpstart$59 = 10L;
        final long $ceylontmpend$60 = 1L;
        final boolean $ceylontmpincreasing$61 = $ceylontmpstart$59 <= $ceylontmpend$60;
        final long $ceylontmpincr$62 = $ceylontmpincreasing$61 ? 1L : -1L;
        for (long returns$63 = $ceylontmpstart$59; $ceylontmpincreasing$61 ? returns$63 - $ceylontmpend$60 <= 0L : returns$63 - $ceylontmpend$60 >= 0L; returns$63 += $ceylontmpincr$62) {
            final long returns = returns$63;
            sum += returns;
            break;
        }
        boolean doforelse$64 = true;
        final long $ceylontmpstart$65 = 10L;
        final long $ceylontmpend$66 = 1L;
        final boolean $ceylontmpincreasing$67 = $ceylontmpstart$65 <= $ceylontmpend$66;
        final long $ceylontmpincr$68 = $ceylontmpincreasing$67 ? 1L : -1L;
        for (long returnsWithElse$69 = $ceylontmpstart$65; $ceylontmpincreasing$67 ? returnsWithElse$69 - $ceylontmpend$66 <= 0L : returnsWithElse$69 - $ceylontmpend$66 >= 0L; returnsWithElse$69 += $ceylontmpincr$68) {
            final long returnsWithElse = returnsWithElse$69;
            sum += returnsWithElse;
            doforelse$64 = false;
            break;
        }
        if (doforelse$64) {
            sum = 0L;
        }
        boolean doforelse$70 = true;
        final long $ceylontmpstart$71 = 10L;
        final long $ceylontmpend$72 = 1L;
        final boolean $ceylontmpincreasing$73 = $ceylontmpstart$71 <= $ceylontmpend$72;
        final long $ceylontmpincr$74 = $ceylontmpincreasing$73 ? 1L : -1L;
        for (long returnsWithElse$75 = $ceylontmpstart$71; $ceylontmpincreasing$73 ? returnsWithElse$75 - $ceylontmpend$72 <= 0L : returnsWithElse$75 - $ceylontmpend$72 >= 0L; returnsWithElse$75 += $ceylontmpincr$74) {
            final long returnsWithElse = returnsWithElse$75;
            sum += returnsWithElse;
            if (returnsWithElse == 5L) {
                doforelse$70 = false;
                break;
            }
        }
        if (doforelse$70) {
            sum = 0L;
        }
        final long $ceylontmpstart$77 = 10L;
        final long $ceylontmpend$78 = 1L;
        final boolean $ceylontmpincreasing$79 = $ceylontmpstart$77 <= $ceylontmpend$78;
        final long $ceylontmpincr$80 = $ceylontmpincreasing$79 ? 1L : -1L;
        for (long throws$81 = $ceylontmpstart$77; $ceylontmpincreasing$79 ? throws$81 - $ceylontmpend$78 <= 0L : throws$81 - $ceylontmpend$78 >= 0L; throws$81 += $ceylontmpincr$80) {
            final long throws = throws$81;
            sum += throws;
            break;
        }
        boolean doforelse$82 = true;
        final long $ceylontmpstart$83 = 10L;
        final long $ceylontmpend$84 = 1L;
        final boolean $ceylontmpincreasing$85 = $ceylontmpstart$83 <= $ceylontmpend$84;
        final long $ceylontmpincr$86 = $ceylontmpincreasing$85 ? 1L : -1L;
        for (long throwsWithElse$87 = $ceylontmpstart$83; $ceylontmpincreasing$85 ? throwsWithElse$87 - $ceylontmpend$84 <= 0L : throwsWithElse$87 - $ceylontmpend$84 >= 0L; throwsWithElse$87 += $ceylontmpincr$86) {
            final long throwsWithElse = throwsWithElse$87;
            sum += throwsWithElse;
            doforelse$82 = false;
            break;
        }
        if (doforelse$82) {
            sum = 0L;
        }
        boolean doforelse$88 = true;
        final long $ceylontmpstart$89 = 10L;
        final long $ceylontmpend$90 = 1L;
        final boolean $ceylontmpincreasing$91 = $ceylontmpstart$89 <= $ceylontmpend$90;
        final long $ceylontmpincr$92 = $ceylontmpincreasing$91 ? 1L : -1L;
        for (long throwsWithElse$93 = $ceylontmpstart$89; $ceylontmpincreasing$91 ? throwsWithElse$93 - $ceylontmpend$90 <= 0L : throwsWithElse$93 - $ceylontmpend$90 >= 0L; throwsWithElse$93 += $ceylontmpincr$92) {
            final long throwsWithElse = throwsWithElse$93;
            sum += throwsWithElse;
            if (throwsWithElse == 5L) {
                doforelse$88 = false;
                break;
            }
        }
        if (doforelse$88) {
            sum = 0L;
        }
    }
    
    private final void captured$priv() {
        final long $ceylontmpstart$95 = 0L;
        final long $ceylontmpend$96 = 10L;
        final boolean $ceylontmpincreasing$97 = $ceylontmpstart$95 <= $ceylontmpend$96;
        final long $ceylontmpincr$98 = $ceylontmpincreasing$97 ? 1L : -1L;
        for (long i$99 = $ceylontmpstart$95; $ceylontmpincreasing$97 ? i$99 - $ceylontmpend$96 <= 0L : i$99 - $ceylontmpend$96 >= 0L; i$99 += $ceylontmpincr$98) {
            final long i = i$99;
            
            final class x_ {
                
                private x_() {
                }
                
                long x() {
                    return i + 10L;
                }
            }
            final x_ x = new x_();
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.OptimizedForWithRange.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.OptimizedForWithRange.class);
}