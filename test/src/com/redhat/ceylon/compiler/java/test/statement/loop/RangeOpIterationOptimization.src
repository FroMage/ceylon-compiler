package com.redhat.ceylon.compiler.java.test.statement.loop;

class OptimizedForWithRange implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OptimizedForWithRange(final long start, final long end) {
        this.start = start;
        this.end = end;
    }
    private final long start;
    
    private final long getStart$priv() {
        return start;
    }
    private final long end;
    
    private final long getEnd$priv() {
        return end;
    }
    
    private final void literals$priv() {
        long sum = 0L;
        final long $ceylontmpstart0 = 1L;
        final long $ceylontmpend1 = 10L;
        final boolean $ceylontmpincreasing2 = $ceylontmpstart0 <= $ceylontmpend1;
        final long $ceylontmpincr3 = $ceylontmpincreasing2 ? 1L : -1L;
        for (long $i$4 = $ceylontmpstart0; $ceylontmpincreasing2 ? $i$4 - $ceylontmpend1 <= 0L : $i$4 - $ceylontmpend1 >= 0L; $i$4 += $ceylontmpincr3) {
            final long i = $i$4;
            sum += i;
        }
        final int $ceylontmpstart5 = 97;
        final int $ceylontmpend6 = 122;
        final boolean $ceylontmpincreasing7 = $ceylontmpstart5 <= $ceylontmpend6;
        final int $ceylontmpincr8 = $ceylontmpincreasing7 ? 1 : -1;
        for (int $c$9 = $ceylontmpstart5; $ceylontmpincreasing7 ? $c$9 - $ceylontmpend6 <= 0 : $c$9 - $ceylontmpend6 >= 0; $c$9 += $ceylontmpincr8) {
            final int c = $c$9;
            sum += .ceylon.language.Character.getInteger(c);
        }
    }
    
    private final void expressions$priv() {
        long sum = 0L;
        final long $ceylontmpstart10 = getStart$priv();
        final long $ceylontmpend11 = getEnd$priv();
        final boolean $ceylontmpincreasing12 = $ceylontmpstart10 <= $ceylontmpend11;
        final long $ceylontmpincr13 = $ceylontmpincreasing12 ? 1L : -1L;
        for (long $i$14 = $ceylontmpstart10; $ceylontmpincreasing12 ? $i$14 - $ceylontmpend11 <= 0L : $i$14 - $ceylontmpend11 >= 0L; $i$14 += $ceylontmpincr13) {
            final long i = $i$14;
            sum += i;
        }
        final long $ceylontmpstart15 = getStart$priv() + 10L;
        final long $ceylontmpend16 = getEnd$priv() + 10L;
        final boolean $ceylontmpincreasing17 = $ceylontmpstart15 <= $ceylontmpend16;
        final long $ceylontmpincr18 = $ceylontmpincreasing17 ? 1L : -1L;
        for (long $i$19 = $ceylontmpstart15; $ceylontmpincreasing17 ? $i$19 - $ceylontmpend16 <= 0L : $i$19 - $ceylontmpend16 >= 0L; $i$19 += $ceylontmpincr18) {
            final long i = $i$19;
            sum += i;
        }
    }
    
    private final void by$priv() {
        long sum = 0L;
        final long $ceylontmpstart20 = 1L;
        final long $ceylontmpend21 = 10L;
        final long $ceylontmpby22 = 3L;
        if ($ceylontmpby22 <= 0) throw new .ceylon.language.AssertionException("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final boolean $ceylontmpincreasing23 = $ceylontmpstart20 <= $ceylontmpend21;
        final long $ceylontmpincr24 = $ceylontmpincreasing23 ? $ceylontmpby22 : -$ceylontmpby22;
        for (long $i$25 = $ceylontmpstart20; $ceylontmpincreasing23 ? $i$25 - $ceylontmpend21 <= 0L : $i$25 - $ceylontmpend21 >= 0L; $i$25 += $ceylontmpincr24) {
            final long i = $i$25;
            sum += i;
        }
        final long $ceylontmpstart26 = 1L;
        final long $ceylontmpend27 = 10L;
        final long $ceylontmpby28 = 3L;
        if ($ceylontmpby28 <= 0) throw new .ceylon.language.AssertionException("Assertion failed" + ": step size must be greater than zero" + (.java.lang.System.lineSeparator() + "\tviolated " + "step > 0"));
        final boolean $ceylontmpincreasing29 = $ceylontmpstart26 <= $ceylontmpend27;
        final long $ceylontmpincr30 = $ceylontmpincreasing29 ? $ceylontmpby28 : -$ceylontmpby28;
        for (long $i$31 = $ceylontmpstart26; $ceylontmpincreasing29 ? $i$31 - $ceylontmpend27 <= 0L : $i$31 - $ceylontmpend27 >= 0L; $i$31 += $ceylontmpincr30) {
            final long i = $i$31;
            sum += i;
        }
    }
    
    private final void disabled$priv() {
        long sum = 0L;
        .java.lang.Object $elem$32;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> $i$iter$33 = new .ceylon.language.Range<.ceylon.language.Integer>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Range.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator(); !(($elem$32 = $i$iter$33.next()) instanceof .ceylon.language.Finished); ) {
            final long i = ((.ceylon.language.Integer)$elem$32).longValue();
            sum += i;
        }
        .java.lang.Object $elem$34;
        for (.ceylon.language.Iterator<? extends .ceylon.language.Integer> $i$iter$35 = new .ceylon.language.Range<.ceylon.language.Integer>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Range.class, .ceylon.language.Integer.$TypeDescriptor), .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator(); !(($elem$34 = $i$iter$35.next()) instanceof .ceylon.language.Finished); ) {
            final long i = ((.ceylon.language.Integer)$elem$34).longValue();
            sum += i;
        }
    }
    
    private final void flow$priv() {
        long sum = 0L;
        final long $ceylontmpstart36 = 1L;
        final long $ceylontmpend37 = 10L;
        final boolean $ceylontmpincreasing38 = $ceylontmpstart36 <= $ceylontmpend37;
        final long $ceylontmpincr39 = $ceylontmpincreasing38 ? 1L : -1L;
        for (long $withElse$40 = $ceylontmpstart36; $ceylontmpincreasing38 ? $withElse$40 - $ceylontmpend37 <= 0L : $withElse$40 - $ceylontmpend37 >= 0L; $withElse$40 += $ceylontmpincr39) {
            final long withElse = $withElse$40;
            sum += withElse;
        }
        sum = 0L;
        final long $ceylontmpstart41 = 10L;
        final long $ceylontmpend42 = 1L;
        final boolean $ceylontmpincreasing43 = $ceylontmpstart41 <= $ceylontmpend42;
        final long $ceylontmpincr44 = $ceylontmpincreasing43 ? 1L : -1L;
        for (long $breaks$45 = $ceylontmpstart41; $ceylontmpincreasing43 ? $breaks$45 - $ceylontmpend42 <= 0L : $breaks$45 - $ceylontmpend42 >= 0L; $breaks$45 += $ceylontmpincr44) {
            final long breaks = $breaks$45;
            sum += breaks;
            break;
        }
        boolean $doforelse$46 = true;
        final long $ceylontmpstart47 = 10L;
        final long $ceylontmpend48 = 1L;
        final boolean $ceylontmpincreasing49 = $ceylontmpstart47 <= $ceylontmpend48;
        final long $ceylontmpincr50 = $ceylontmpincreasing49 ? 1L : -1L;
        for (long $breaksWithElse$51 = $ceylontmpstart47; $ceylontmpincreasing49 ? $breaksWithElse$51 - $ceylontmpend48 <= 0L : $breaksWithElse$51 - $ceylontmpend48 >= 0L; $breaksWithElse$51 += $ceylontmpincr50) {
            final long breaksWithElse = $breaksWithElse$51;
            sum += breaksWithElse;
            $doforelse$46 = false;
            break;
        }
        if ($doforelse$46) {
            sum = 0L;
        }
        boolean $doforelse$52 = true;
        final long $ceylontmpstart53 = 10L;
        final long $ceylontmpend54 = 1L;
        final boolean $ceylontmpincreasing55 = $ceylontmpstart53 <= $ceylontmpend54;
        final long $ceylontmpincr56 = $ceylontmpincreasing55 ? 1L : -1L;
        for (long $breaksWithElse$57 = $ceylontmpstart53; $ceylontmpincreasing55 ? $breaksWithElse$57 - $ceylontmpend54 <= 0L : $breaksWithElse$57 - $ceylontmpend54 >= 0L; $breaksWithElse$57 += $ceylontmpincr56) {
            final long breaksWithElse = $breaksWithElse$57;
            sum += breaksWithElse;
            if (breaksWithElse == 5L) {
                $doforelse$52 = false;
                break;
            }
        }
        if ($doforelse$52) {
            sum = 0L;
        }
        final long $ceylontmpstart59 = 10L;
        final long $ceylontmpend60 = 1L;
        final boolean $ceylontmpincreasing61 = $ceylontmpstart59 <= $ceylontmpend60;
        final long $ceylontmpincr62 = $ceylontmpincreasing61 ? 1L : -1L;
        for (long $returns$63 = $ceylontmpstart59; $ceylontmpincreasing61 ? $returns$63 - $ceylontmpend60 <= 0L : $returns$63 - $ceylontmpend60 >= 0L; $returns$63 += $ceylontmpincr62) {
            final long returns = $returns$63;
            sum += returns;
            break;
        }
        boolean $doforelse$64 = true;
        final long $ceylontmpstart65 = 10L;
        final long $ceylontmpend66 = 1L;
        final boolean $ceylontmpincreasing67 = $ceylontmpstart65 <= $ceylontmpend66;
        final long $ceylontmpincr68 = $ceylontmpincreasing67 ? 1L : -1L;
        for (long $returnsWithElse$69 = $ceylontmpstart65; $ceylontmpincreasing67 ? $returnsWithElse$69 - $ceylontmpend66 <= 0L : $returnsWithElse$69 - $ceylontmpend66 >= 0L; $returnsWithElse$69 += $ceylontmpincr68) {
            final long returnsWithElse = $returnsWithElse$69;
            sum += returnsWithElse;
            $doforelse$64 = false;
            break;
        }
        if ($doforelse$64) {
            sum = 0L;
        }
        boolean $doforelse$70 = true;
        final long $ceylontmpstart71 = 10L;
        final long $ceylontmpend72 = 1L;
        final boolean $ceylontmpincreasing73 = $ceylontmpstart71 <= $ceylontmpend72;
        final long $ceylontmpincr74 = $ceylontmpincreasing73 ? 1L : -1L;
        for (long $returnsWithElse$75 = $ceylontmpstart71; $ceylontmpincreasing73 ? $returnsWithElse$75 - $ceylontmpend72 <= 0L : $returnsWithElse$75 - $ceylontmpend72 >= 0L; $returnsWithElse$75 += $ceylontmpincr74) {
            final long returnsWithElse = $returnsWithElse$75;
            sum += returnsWithElse;
            if (returnsWithElse == 5L) {
                $doforelse$70 = false;
                break;
            }
        }
        if ($doforelse$70) {
            sum = 0L;
        }
        final long $ceylontmpstart77 = 10L;
        final long $ceylontmpend78 = 1L;
        final boolean $ceylontmpincreasing79 = $ceylontmpstart77 <= $ceylontmpend78;
        final long $ceylontmpincr80 = $ceylontmpincreasing79 ? 1L : -1L;
        for (long $throws$81 = $ceylontmpstart77; $ceylontmpincreasing79 ? $throws$81 - $ceylontmpend78 <= 0L : $throws$81 - $ceylontmpend78 >= 0L; $throws$81 += $ceylontmpincr80) {
            final long throws = $throws$81;
            sum += throws;
            break;
        }
        boolean $doforelse$82 = true;
        final long $ceylontmpstart83 = 10L;
        final long $ceylontmpend84 = 1L;
        final boolean $ceylontmpincreasing85 = $ceylontmpstart83 <= $ceylontmpend84;
        final long $ceylontmpincr86 = $ceylontmpincreasing85 ? 1L : -1L;
        for (long $throwsWithElse$87 = $ceylontmpstart83; $ceylontmpincreasing85 ? $throwsWithElse$87 - $ceylontmpend84 <= 0L : $throwsWithElse$87 - $ceylontmpend84 >= 0L; $throwsWithElse$87 += $ceylontmpincr86) {
            final long throwsWithElse = $throwsWithElse$87;
            sum += throwsWithElse;
            $doforelse$82 = false;
            break;
        }
        if ($doforelse$82) {
            sum = 0L;
        }
        boolean $doforelse$88 = true;
        final long $ceylontmpstart89 = 10L;
        final long $ceylontmpend90 = 1L;
        final boolean $ceylontmpincreasing91 = $ceylontmpstart89 <= $ceylontmpend90;
        final long $ceylontmpincr92 = $ceylontmpincreasing91 ? 1L : -1L;
        for (long $throwsWithElse$93 = $ceylontmpstart89; $ceylontmpincreasing91 ? $throwsWithElse$93 - $ceylontmpend90 <= 0L : $throwsWithElse$93 - $ceylontmpend90 >= 0L; $throwsWithElse$93 += $ceylontmpincr92) {
            final long throwsWithElse = $throwsWithElse$93;
            sum += throwsWithElse;
            if (throwsWithElse == 5L) {
                $doforelse$88 = false;
                break;
            }
        }
        if ($doforelse$88) {
            sum = 0L;
        }
    }
    
    private final void captured$priv() {
        final long $ceylontmpstart95 = 0L;
        final long $ceylontmpend96 = 10L;
        final boolean $ceylontmpincreasing97 = $ceylontmpstart95 <= $ceylontmpend96;
        final long $ceylontmpincr98 = $ceylontmpincreasing97 ? 1L : -1L;
        for (long $i$99 = $ceylontmpstart95; $ceylontmpincreasing97 ? $i$99 - $ceylontmpend96 <= 0L : $i$99 - $ceylontmpend96 >= 0L; $i$99 += $ceylontmpincr98) {
            final long i = $i$99;
            
            final class x_ {
                
                private x_() {
                }
                
                long x() {
                    return i + 10L;
                }
            }
            final x_ x = new x_();
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.OptimizedForWithRange.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.OptimizedForWithRange.class);
}