package com.redhat.ceylon.compiler.java.test.structure.method;

class C<X> {
    
    C() {
    }
    
    public final <Y>X f(final X x, final Y y) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.method.C();
    }
}
class MethodSpecifyingTopLevelWithTypeParamMixed<S, T> {
    
    MethodSpecifyingTopLevelWithTypeParamMixed() {
    }
    
    public final .com.redhat.ceylon.compiler.java.test.structure.method.C<.ceylon.language.String> getC() {
        return new .com.redhat.ceylon.compiler.java.test.structure.method.C<.ceylon.language.String>();
    }
    
    public final .com.redhat.ceylon.compiler.java.test.structure.method.C<S> getC2() {
        return new .com.redhat.ceylon.compiler.java.test.structure.method.C<S>();
    }
    
    private final .java.lang.String foo(final .java.lang.String s, final long i) {
        return getC().<.ceylon.language.Integer>f(.ceylon.language.String.instance(s), .ceylon.language.Integer.instance(i)).toString();
    }
    
    private final S bar(final S x, final T y) {
        return getC2().<T>f(x, y);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.method.MethodSpecifyingTopLevelWithTypeParamMixed();
    }
}