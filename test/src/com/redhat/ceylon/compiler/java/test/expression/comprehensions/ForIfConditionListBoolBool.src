package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

class ForIfConditionListBoolBool implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    ForIfConditionListBoolBool() {
    }
    
    private final void m$priv(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> xs) {
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor, true, new .ceylon.language.Iterable[]{xs}){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor){
                    {
                        iter$0 = $getIterables()[0].iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0;
                    private .ceylon.language.Integer x;
                    private boolean x$exhausted;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmpitem$0 = iter$0.next();
                        x$exhausted = $ceylontmpitem$0 == .ceylon.language.finished_.get_();
                        if (x$exhausted) {
                            return false;
                        } else {
                            x = (.ceylon.language.Integer)$ceylontmpitem$0;
                            return true;
                        }
                    }
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.x()) break;
                            if (x.compare(.ceylon.language.Integer.instance(0L)).largerThan()) {
                                if (x.compare(.ceylon.language.Integer.instance(10L)).smallerThan()) {
                                    break;
                                }
                            }
                        }
                        return !x$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.next1()) {
                            final .ceylon.language.Integer x = this.x;
                            return x;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        });
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfConditionListBoolBool();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfConditionListBoolBool.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfConditionListBoolBool.class);
}