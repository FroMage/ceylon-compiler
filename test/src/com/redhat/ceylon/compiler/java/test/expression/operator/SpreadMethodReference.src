package com.redhat.ceylon.compiler.java.test.expression.operator;

class SpreadMethodReference {
    
    SpreadMethodReference() {
    }
    
    private final void m(final .ceylon.language.Sequential<? extends .ceylon.language.String> seq) {
        final .ceylon.language.Callable<? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> f = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Sequential<? extends .ceylon.language.String>>("String[](Integer)"){
            
            @.java.lang.Override
            public .ceylon.language.Sequential<? extends .ceylon.language.String> $call(final .java.lang.Object $param$0) {
                final long $$length = ((.ceylon.language.Integer)$param$0).longValue();
                return (
                    let
                    {
                        .ceylon.language.Iterable<? extends .ceylon.language.String, ?> $spread$1$iterable = seq;
                        .ceylon.language.SequenceBuilder<.ceylon.language.String> $spread$1$sequenceBuilder = new .ceylon.language.SequenceBuilder<.ceylon.language.String>();
                        .java.lang.Object $spread$1$iteration;
                        for (.ceylon.language.Iterator<? extends .ceylon.language.String> $spread$1$iterator = $spread$1$iterable.getIterator(); !(($spread$1$iteration = $spread$1$iterator.next()) instanceof .ceylon.language.Finished); ) {
                            .ceylon.language.String $spread$1$element = (.ceylon.language.String)$spread$1$iteration;
                            $spread$1$sequenceBuilder.append(.ceylon.language.String.instance($spread$1$element.initial($$length)));
                        }
                    }
                    returning $spread$1$sequenceBuilder.getSequence();
                );
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.SpreadMethodReference();
    }
}