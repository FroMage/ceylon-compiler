package com.redhat.ceylon.compiler.java.test.expression.operator;

class SpreadMethodReference implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SpreadMethodReference() {
    }
    
    private final void m$priv$(final .ceylon.language.Sequential<? extends .ceylon.language.String> seq) {
        final .ceylon.language.Callable<? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> f = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Sequential<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$), "String[](Integer)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Sequential<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final long $ceylontmp$length = ((.ceylon.language.Integer)$param$0).longValue();
                return (
                    let
                    {
                        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> spread$1$iterable$ = seq;
                    }
                    returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                        
                        @.java.lang.Override
                        public final .ceylon.language.Iterator<? extends .ceylon.language.String> iterator() {
                            return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                                final .ceylon.language.Iterator<? extends .ceylon.language.String> spread$1$iterator$ = spread$1$iterable$.iterator();
                                
                                @.java.lang.Override
                                public final .java.lang.Object next() {
                                    .java.lang.Object spread$1$element$;
                                    if (!((spread$1$element$ = spread$1$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                        spread$1$element$ = ((.ceylon.language.String)spread$1$element$).initial($ceylontmp$length);
                                    }
                                    return spread$1$element$;
                                }
                            };
                        }
                    }.sequence();
                );
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.SpreadMethodReference();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.SpreadMethodReference.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.SpreadMethodReference.class);
}