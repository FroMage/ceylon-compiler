package com.redhat.ceylon.compiler.java.test.expression.erasure;

interface TPETop {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPETop$impl();
    
    public abstract .java.lang.Object top();
    
    public abstract long getTopAttribute();
}
final class TPETop$impl {
    
    TPETop$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop $this;
    
    public final long getTopAttribute() {
        return $this.getTopAttribute();
    }
}
interface TPELeft extends .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPELeft$impl();
    
    public abstract .java.lang.Object left();
    
    public abstract long getLeftAttribute();
}
final class TPELeft$impl {
    
    TPELeft$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $this;
    
    public final long getLeftAttribute() {
        return $this.getLeftAttribute();
    }
}
interface TPERight extends .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop {
    
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPERight$impl();
    
    public abstract .java.lang.Object right();
    
    public abstract long getRightAttribute();
}
final class TPERight$impl {
    
    TPERight$impl(.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight $this) {
        this.$this = $this;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight $this;
    
    public final long getRightAttribute() {
        return $this.getRightAttribute();
    }
}
class TPECLeft implements .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft {
    
    TPECLeft() {
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$TPELeft$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft$impl(this);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$TPETop$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop$impl(this);
        this.topAttribute = 1L;
        this.leftAttribute = 1L;
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPELeft$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPELeft$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$TPELeft$this;
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPETop$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPETop$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$TPETop$this;
    }
    
    @.java.lang.Override
    public final .java.lang.Object left() {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object top() {
        return null;
    }
    private final long topAttribute;
    
    @.java.lang.Override
    public final long getTopAttribute() {
        return topAttribute;
    }
    private final long leftAttribute;
    
    @.java.lang.Override
    public final long getLeftAttribute() {
        return leftAttribute;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPECLeft();
    }
}
class TPECMiddle implements .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft, .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight {
    
    TPECMiddle() {
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$TPELeft$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft$impl(this);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$TPETop$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop$impl(this);
        this.$com$redhat$ceylon$compiler$java$test$expression$erasure$TPERight$this = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight$impl(this);
        this.topAttribute = 1L;
        this.leftAttribute = 1L;
        this.rightAttribute = 1L;
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPELeft$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPELeft$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$TPELeft$this;
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPETop$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.TPETop$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPETop$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$TPETop$this;
    }
    protected final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPERight$this;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight$impl $com$redhat$ceylon$compiler$java$test$expression$erasure$TPERight$impl() {
        return $com$redhat$ceylon$compiler$java$test$expression$erasure$TPERight$this;
    }
    
    @.java.lang.Override
    public final .java.lang.Object left() {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object top() {
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object right() {
        return null;
    }
    private final long topAttribute;
    
    @.java.lang.Override
    public final long getTopAttribute() {
        return topAttribute;
    }
    private final long leftAttribute;
    
    @.java.lang.Override
    public final long getLeftAttribute() {
        return leftAttribute;
    }
    private final long rightAttribute;
    
    @.java.lang.Override
    public final long getRightAttribute() {
        return rightAttribute;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPECMiddle();
    }
}
class TypeParameterErasure {
    
    TypeParameterErasure() {
    }
    
    private final <T>T parameterized(final T t) {
        return t;
    }
    
    private final <T extends .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight>T parameterizedWithBounds(final T t) {
        t.right();
        t.right();
        return t;
    }
    
    private final <T extends .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft & .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight>T parameterizedWithIntersectionBounds(final T t) {
        t.left();
        t.left();
        t.right();
        t.right();
        return t;
    }
    
    private final <T>T parameterizedWithErasedBounds(final T t) {
        t.equals(t);
        return t;
    }
    
    private final <T extends .ceylon.language.Ordinal<? extends T> & .ceylon.language.Comparable<? super T>>T parameterizedWithParameterizedBounds(final T t) {
        return t;
    }
    
    private final void testTypeParameters() {
        final long i = <.ceylon.language.Integer>parameterized(.ceylon.language.Integer.instance(2L)).longValue();
        final long i2 = <.ceylon.language.Integer>parameterized(.ceylon.language.Integer.instance(2L)).longValue();
        final long n = <.ceylon.language.Integer>parameterized(.ceylon.language.Integer.instance(2L)).longValue();
        final long n2 = <.ceylon.language.Integer>parameterized(.ceylon.language.Integer.instance(2L)).longValue();
        .java.lang.Object middle;
        .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft left;
        .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight right;
        middle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPECMiddle();
        left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)parameterized(middle);
        right = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)parameterized(middle);
        middle = parameterized(middle);
        left = <.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>parameterized((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle);
        right = <.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight>parameterized((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)middle);
        left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)parameterized(middle);
        right = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)parameterized(middle);
        middle = parameterized(middle);
        left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)parameterizedWithBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)middle);
        right = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)parameterizedWithBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)middle);
        middle = parameterizedWithBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)middle);
        left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)parameterizedWithIntersectionBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle);
        right = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)parameterizedWithIntersectionBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle);
        middle = parameterizedWithIntersectionBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle);
        final .java.lang.String s = <.ceylon.language.String>parameterizedWithErasedBounds(.ceylon.language.String.instance("")).toString();
        final .java.lang.String s2 = <.ceylon.language.String>parameterizedWithErasedBounds(.ceylon.language.String.instance("")).toString();
        final .java.lang.Object e = <.ceylon.language.String>parameterizedWithErasedBounds(.ceylon.language.String.instance(""));
        final .java.lang.Object e2 = parameterizedWithErasedBounds(.ceylon.language.String.instance(""));
        <.ceylon.language.Integer>parameterizedWithParameterizedBounds(.ceylon.language.Integer.instance(2L));
        <.ceylon.language.Integer>parameterizedWithParameterizedBounds(.ceylon.language.Integer.instance(2L));
    }
    
    private final void testTypeParametersNamedArguments() {
        final long i = (
            let
            {
                .ceylon.language.Integer $arg$3$0 = .ceylon.language.Integer.instance(2L);
            }
            returning <.ceylon.language.Integer>parameterized($arg$3$0);
        ).longValue();
        final long i2 = (
            let
            {
                .ceylon.language.Integer $arg$4$0 = .ceylon.language.Integer.instance(2L);
            }
            returning <.ceylon.language.Integer>parameterized($arg$4$0);
        ).longValue();
        final long n = (
            let
            {
                .ceylon.language.Integer $arg$5$0 = .ceylon.language.Integer.instance(2L);
            }
            returning <.ceylon.language.Integer>parameterized($arg$5$0);
        ).longValue();
        final long n2 = (
            let
            {
                .ceylon.language.Integer $arg$6$0 = .ceylon.language.Integer.instance(2L);
            }
            returning <.ceylon.language.Integer>parameterized($arg$6$0);
        ).longValue();
        .java.lang.Object middle;
        .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft left;
        .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight right;
        middle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPECMiddle();
        left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)(
            let
            {
                .java.lang.Object $arg$7$0 = middle;
            }
            returning parameterized($arg$7$0);
        );
        right = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)(
            let
            {
                .java.lang.Object $arg$8$0 = middle;
            }
            returning parameterized($arg$8$0);
        );
        middle = (
            let
            {
                .java.lang.Object $arg$9$0 = middle;
            }
            returning parameterized($arg$9$0);
        );
        left = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$10$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
            }
            returning <.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>parameterized($arg$10$0);
        );
        right = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight $arg$11$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)middle;
            }
            returning <.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight>parameterized($arg$11$0);
        );
        left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)(
            let
            {
                .java.lang.Object $arg$12$0 = middle;
            }
            returning parameterized($arg$12$0);
        );
        right = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)(
            let
            {
                .java.lang.Object $arg$13$0 = middle;
            }
            returning parameterized($arg$13$0);
        );
        middle = (
            let
            {
                .java.lang.Object $arg$14$0 = middle;
            }
            returning parameterized($arg$14$0);
        );
        left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)(
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight $arg$15$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)middle;
            }
            returning parameterizedWithBounds($arg$15$0);
        );
        right = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)(
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight $arg$16$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)middle;
            }
            returning parameterizedWithBounds($arg$16$0);
        );
        middle = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight $arg$17$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)middle;
            }
            returning parameterizedWithBounds($arg$17$0);
        );
        left = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)(
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$18$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
            }
            returning parameterizedWithIntersectionBounds($arg$18$0);
        );
        right = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight)(
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$19$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
            }
            returning parameterizedWithIntersectionBounds($arg$19$0);
        );
        middle = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$20$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
            }
            returning parameterizedWithIntersectionBounds($arg$20$0);
        );
        final .java.lang.String s = (
            let
            {
                .ceylon.language.String $arg$21$0 = .ceylon.language.String.instance("");
            }
            returning <.ceylon.language.String>parameterizedWithErasedBounds($arg$21$0);
        ).toString();
        final .java.lang.String s2 = (
            let
            {
                .ceylon.language.String $arg$22$0 = .ceylon.language.String.instance("");
            }
            returning <.ceylon.language.String>parameterizedWithErasedBounds($arg$22$0);
        ).toString();
        final .java.lang.Object e = (
            let
            {
                .ceylon.language.String $arg$23$0 = .ceylon.language.String.instance("");
            }
            returning <.ceylon.language.String>parameterizedWithErasedBounds($arg$23$0);
        );
        final .java.lang.Object e2 = (
            let
            {
                .java.lang.Object $arg$24$0 = .ceylon.language.String.instance("");
            }
            returning parameterizedWithErasedBounds($arg$24$0);
        );
        (
            let
            {
                .ceylon.language.Integer $arg$25$0 = .ceylon.language.Integer.instance(2L);
            }
            returning <.ceylon.language.Integer>parameterizedWithParameterizedBounds($arg$25$0);
        );
        (
            let
            {
                .ceylon.language.Integer $arg$26$0 = .ceylon.language.Integer.instance(2L);
            }
            returning <.ceylon.language.Integer>parameterizedWithParameterizedBounds($arg$26$0);
        );
    }
    
    class Parameterized<T> {
        
        Parameterized(final T t) {
        }
        
        public final <Inner>Inner parameterized(final Inner i, final T t) {
            return i;
        }
        
        public final <Inner extends .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>Inner parameterizedWithBounds(final Inner i, final T t) {
            i.left();
            i.left();
            return i;
        }
        
        public final <Inner extends .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft & .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight>Inner parameterizedWithIntersectionBounds(final Inner i, final T t) {
            i.left();
            i.left();
            i.right();
            i.right();
            return i;
        }
        
        public final <Inner>Inner parameterizedWithErasedBounds(final Inner i, final T t) {
            i.equals(i);
            return i;
        }
        
        public final <Inner extends .ceylon.language.Ordinal<? extends Inner> & .ceylon.language.Comparable<? super Inner>>Inner parameterizedWithParameterizedBounds(final Inner i, final T t) {
            i.compare(i);
            return i;
        }
    }
    
    class ParameterizedWithBounds<T extends .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft> {
        
        ParameterizedWithBounds(final T t) {
            t.left();
            t.left();
        }
    }
    
    class ParameterizedWithIntersectionBounds<T extends .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft & .com.redhat.ceylon.compiler.java.test.expression.erasure.TPERight> {
        
        ParameterizedWithIntersectionBounds(final T t) {
            t.left();
            t.left();
            t.right();
            t.right();
            final .java.lang.Object middle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPECMiddle();
            requiresCastLeft(t);
            (
                let
                {
                    .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$33$0 = t;
                    requiresCastLeft($arg$33$0);
                }
                returning null;
            );
            requiresCastLeft((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle);
            (
                let
                {
                    .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$34$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
                    requiresCastLeft($arg$34$0);
                }
                returning null;
            );
        }
        
        private final void requiresCastLeft(final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft l) {
        }
    }
    
    class ParameterizedWithErasedBounds<T> {
        
        ParameterizedWithErasedBounds(final T t) {
        }
    }
    
    class ParameterizedWithParameterizedBounds<T extends .ceylon.language.Ordinal<? extends T> & .ceylon.language.Comparable<? super T>> {
        
        ParameterizedWithParameterizedBounds(final T t) {
        }
    }
    
    private final void testTypeParameterInstantiations() {
        final .java.lang.Object middle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPECMiddle();
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft left = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPECLeft();
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized parameterizedMiddle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized(middle);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft> parameterizedLeft = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>(left);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized parameterizedExplicitMiddle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized(middle);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft> parameterizedExplicitLeft = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>(left);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithBounds parameterizedWithBoundsMiddle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithBounds<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft> parameterizedWithBoundsLeft = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithBounds<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>(left);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithIntersectionBounds parameterizedWithIntersectionBoundsMiddle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithIntersectionBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithIntersectionBounds parameterizedWithErasedExplicitBoundsMiddle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithIntersectionBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle);
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithErasedBounds<.ceylon.language.String> parameterizedWithErasedBoundsMiddle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithErasedBounds<.ceylon.language.String>(.ceylon.language.String.instance(""));
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithErasedBounds<.ceylon.language.String> parameterizedWithReallyErasedExplicitBoundsMiddle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithErasedBounds<.ceylon.language.String>(.ceylon.language.String.instance(""));
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithParameterizedBounds<.ceylon.language.Integer> parameterizedWithParameterizedBounds = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithParameterizedBounds<.ceylon.language.Integer>(.ceylon.language.Integer.instance(2L));
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithParameterizedBounds<.ceylon.language.Integer> parameterizedWithExplicitParameterizedBounds = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithParameterizedBounds<.ceylon.language.Integer>(.ceylon.language.Integer.instance(2L));
        parameterizedMiddle.<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>parameterized(left, middle);
        parameterizedMiddle.parameterized(middle, middle);
        parameterizedMiddle.<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>parameterized((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle, middle);
        parameterizedMiddle.parameterized(middle, middle);
        parameterizedMiddle.<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>parameterizedWithBounds(left, middle);
        parameterizedMiddle.parameterizedWithBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle, middle);
        parameterizedMiddle.parameterizedWithIntersectionBounds((.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle, middle);
        parameterizedMiddle.<.ceylon.language.String>parameterizedWithErasedBounds(.ceylon.language.String.instance(""), middle);
        parameterizedMiddle.parameterizedWithErasedBounds(.ceylon.language.String.instance(""), middle);
        parameterizedMiddle.<.ceylon.language.String>parameterizedWithErasedBounds(.ceylon.language.String.instance(""), middle);
        parameterizedMiddle.<.ceylon.language.Integer>parameterizedWithParameterizedBounds(.ceylon.language.Integer.instance(2L), middle);
        parameterizedMiddle.<.ceylon.language.Integer>parameterizedWithParameterizedBounds(.ceylon.language.Integer.instance(2L), middle);
    }
    
    private final void testTypeParameterInstantiationsNamedArguments() {
        final .java.lang.Object middle = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPECMiddle();
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft left = new .com.redhat.ceylon.compiler.java.test.expression.erasure.TPECLeft();
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized parameterizedMiddle = (
            let
            {
                .java.lang.Object $arg$35$0 = middle;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized($arg$35$0);
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft> parameterizedLeft = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$36$0 = left;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>($arg$36$0);
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized parameterizedExplicitMiddle = (
            let
            {
                .java.lang.Object $arg$37$0 = middle;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized($arg$37$0);
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft> parameterizedExplicitLeft = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$38$0 = left;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>($arg$38$0);
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithBounds parameterizedWithBoundsMiddle = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$39$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithBounds($arg$39$0);
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithBounds<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft> parameterizedWithBoundsLeft = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$40$0 = left;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithBounds<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>($arg$40$0);
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithIntersectionBounds parameterizedWithIntersectionBoundsMiddle = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$41$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithIntersectionBounds($arg$41$0);
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithIntersectionBounds parameterizedWithErasedExplicitBoundsMiddle = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$42$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithIntersectionBounds($arg$42$0);
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithParameterizedBounds<.ceylon.language.Integer> parameterizedWithParameterizedBounds = (
            let
            {
                .ceylon.language.Integer $arg$43$0 = .ceylon.language.Integer.instance(2L);
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithParameterizedBounds<.ceylon.language.Integer>($arg$43$0);
        );
        final .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithParameterizedBounds<.ceylon.language.Integer> parameterizedWithExplicitParameterizedBounds = (
            let
            {
                .ceylon.language.Integer $arg$44$0 = .ceylon.language.Integer.instance(2L);
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.ParameterizedWithParameterizedBounds<.ceylon.language.Integer>($arg$44$0);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$45$callable$ = parameterizedMiddle;
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$45$0 = left;
                .java.lang.Object $arg$45$1 = middle;
            }
            returning $arg$45$callable$.<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>parameterized($arg$45$0, $arg$45$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$46$callable$ = parameterizedMiddle;
                .java.lang.Object $arg$46$0 = middle;
                .java.lang.Object $arg$46$1 = middle;
            }
            returning $arg$46$callable$.parameterized($arg$46$0, $arg$46$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$47$callable$ = parameterizedMiddle;
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$47$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
                .java.lang.Object $arg$47$1 = middle;
            }
            returning $arg$47$callable$.<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>parameterized($arg$47$0, $arg$47$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$48$callable$ = parameterizedMiddle;
                .java.lang.Object $arg$48$0 = middle;
                .java.lang.Object $arg$48$1 = middle;
            }
            returning $arg$48$callable$.parameterized($arg$48$0, $arg$48$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$49$callable$ = parameterizedMiddle;
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$49$0 = left;
                .java.lang.Object $arg$49$1 = middle;
            }
            returning $arg$49$callable$.<.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft>parameterizedWithBounds($arg$49$0, $arg$49$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$50$callable$ = parameterizedMiddle;
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$50$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
                .java.lang.Object $arg$50$1 = middle;
            }
            returning $arg$50$callable$.parameterizedWithBounds($arg$50$0, $arg$50$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$51$callable$ = parameterizedMiddle;
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft $arg$51$0 = (.com.redhat.ceylon.compiler.java.test.expression.erasure.TPELeft)middle;
                .java.lang.Object $arg$51$1 = middle;
            }
            returning $arg$51$callable$.parameterizedWithIntersectionBounds($arg$51$0, $arg$51$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$52$callable$ = parameterizedMiddle;
                .ceylon.language.String $arg$52$0 = .ceylon.language.String.instance("");
                .java.lang.Object $arg$52$1 = middle;
            }
            returning $arg$52$callable$.<.ceylon.language.String>parameterizedWithErasedBounds($arg$52$0, $arg$52$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$53$callable$ = parameterizedMiddle;
                .java.lang.Object $arg$53$0 = .ceylon.language.String.instance("");
                .java.lang.Object $arg$53$1 = middle;
            }
            returning $arg$53$callable$.parameterizedWithErasedBounds($arg$53$0, $arg$53$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$54$callable$ = parameterizedMiddle;
                .ceylon.language.String $arg$54$0 = .ceylon.language.String.instance("");
                .java.lang.Object $arg$54$1 = middle;
            }
            returning $arg$54$callable$.<.ceylon.language.String>parameterizedWithErasedBounds($arg$54$0, $arg$54$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$55$callable$ = parameterizedMiddle;
                .ceylon.language.Integer $arg$55$0 = .ceylon.language.Integer.instance(2L);
                .java.lang.Object $arg$55$1 = middle;
            }
            returning $arg$55$callable$.<.ceylon.language.Integer>parameterizedWithParameterizedBounds($arg$55$0, $arg$55$1);
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure.Parameterized $arg$56$callable$ = parameterizedMiddle;
                .ceylon.language.Integer $arg$56$0 = .ceylon.language.Integer.instance(2L);
                .java.lang.Object $arg$56$1 = middle;
            }
            returning $arg$56$callable$.<.ceylon.language.Integer>parameterizedWithParameterizedBounds($arg$56$0, $arg$56$1);
        );
    }
    
    private final <T extends .ceylon.language.Integer>void testPrimitiveBound(final T init) {
        T n = init;
    }
    
    class TestPrimitiveBound<T extends .ceylon.language.Integer> {
        
        TestPrimitiveBound(final T init) {
            T n = init;
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.TypeParameterErasure();
    }
}