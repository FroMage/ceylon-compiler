package com.redhat.ceylon.compiler.java.test.interop;

final class fields_ {
    
    private fields_() {
    }
    
    static void fields() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaFields java = new .com.redhat.ceylon.compiler.java.test.interop.JavaFields();
        long sync;
        sync = java.readOnlyField;
        sync = java.readWriteField;
        java.readWriteField = 2L;
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.interop.JavaFields $ceylontmpopE0 = java;
                long $ceylontmpopV1 = $ceylontmpopE0.readWriteField;
                $ceylontmpopE0.readWriteField = $ceylontmpopV1 + 1;
            }
            returning $ceylontmpopV1;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.interop.JavaFields $ceylontmpopE2 = java;
                long $ceylontmpopV3 = $ceylontmpopE2.readWriteField + 1;
                $ceylontmpopE2.readWriteField = $ceylontmpopV3;
            }
            returning $ceylontmpopV3;
        );
        java.readWriteField = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.interop.JavaFields $ceylontmpopE4 = java;
                long $ceylontmpopV5 = java.readWriteField;
                $ceylontmpopE4.readWriteField = $ceylontmpopV5;
            }
            returning $ceylontmpopV5;
        );
        java.readWriteField = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.interop.JavaFields $ceylontmpopE6 = java;
                long $ceylontmpopV7 = $ceylontmpopE6.readWriteField + java.readWriteField;
                $ceylontmpopE6.readWriteField = $ceylontmpopV7;
            }
            returning $ceylontmpopV7;
        );
        sync = java.fieldWithNoGetter;
        java.setFieldWithNoGetter(2L);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.fields_.fields();
    }
}
class CeylonFields extends .com.redhat.ceylon.compiler.java.test.interop.JavaFields implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    CeylonFields() {
        super();
    }
    
    private final void f$priv() {
        final long i1 = readOnlyField;
        final long i2 = readWriteField;
        readWriteField = 2L;
        (
            let
            {
                long $ceylontmpop8 = readWriteField;
                readWriteField = $ceylontmpop8 + 1;
            }
            returning $ceylontmpop8;
        );
        (
            let
            {
                long $ceylontmpop9 = readWriteField + 1;
                readWriteField = $ceylontmpop9;
            }
            returning $ceylontmpop9;
        );
        readWriteField = (
            let
            {
                long $ceylontmpop10 = readWriteField;
                readWriteField = $ceylontmpop10;
            }
            returning $ceylontmpop10;
        );
        readWriteField = (
            let
            {
                long $ceylontmpop11 = readWriteField + readWriteField;
                readWriteField = $ceylontmpop11;
            }
            returning $ceylontmpop11;
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.interop.CeylonFields();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.interop.CeylonFields.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.CeylonFields.class);
}