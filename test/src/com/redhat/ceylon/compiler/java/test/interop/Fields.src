package com.redhat.ceylon.compiler.java.test.interop;

final class fields_ {
    
    private fields_() {
    }
    
    static void fields() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaFields java = new .com.redhat.ceylon.compiler.java.test.interop.JavaFields();
        long sync = 0L;
        sync = java.readOnlyField;
        sync = java.readWriteField;
        java.readWriteField = 2L;
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.interop.JavaFields $ceylontmpopE$0 = java;
                long $ceylontmpopV$1 = $ceylontmpopE$0.readWriteField;
                $ceylontmpopE$0.readWriteField = $ceylontmpopV$1 + 1;
            }
            returning $ceylontmpopV$1;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.interop.JavaFields $ceylontmpopE$2 = java;
                long $ceylontmpopV$3 = $ceylontmpopE$2.readWriteField + 1;
                $ceylontmpopE$2.readWriteField = $ceylontmpopV$3;
            }
            returning $ceylontmpopV$3;
        );
        java.readWriteField = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.interop.JavaFields $ceylontmpopE$4 = java;
                long $ceylontmpopV$5 = java.readWriteField;
                $ceylontmpopE$4.readWriteField = $ceylontmpopV$5;
            }
            returning $ceylontmpopV$5;
        );
        java.readWriteField = (
            let
            {
                .com.redhat.ceylon.compiler.java.test.interop.JavaFields $ceylontmpopE$6 = java;
                long $ceylontmpopV$7 = $ceylontmpopE$6.readWriteField + java.readWriteField;
                $ceylontmpopE$6.readWriteField = $ceylontmpopV$7;
            }
            returning $ceylontmpopV$7;
        );
        sync = java.fieldWithNoGetter;
        java.setFieldWithNoGetter(2L);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.fields_.fields();
    }
}
class CeylonFields extends .com.redhat.ceylon.compiler.java.test.interop.JavaFields implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    CeylonFields() {
        super();
    }
    
    private final void f$priv() {
        final long i1 = readOnlyField;
        final long i2 = readWriteField;
        readWriteField = 2L;
        (
            let
            {
                long $ceylontmpop$8 = readWriteField;
                readWriteField = $ceylontmpop$8 + 1;
            }
            returning $ceylontmpop$8;
        );
        (
            let
            {
                long $ceylontmpop$9 = readWriteField + 1;
                readWriteField = $ceylontmpop$9;
            }
            returning $ceylontmpop$9;
        );
        readWriteField = (
            let
            {
                long $ceylontmpop$10 = readWriteField;
                readWriteField = $ceylontmpop$10;
            }
            returning $ceylontmpop$10;
        );
        readWriteField = (
            let
            {
                long $ceylontmpop$11 = readWriteField + readWriteField;
                readWriteField = $ceylontmpop$11;
            }
            returning $ceylontmpop$11;
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.interop.CeylonFields();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.interop.CeylonFields.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.CeylonFields.class);
}