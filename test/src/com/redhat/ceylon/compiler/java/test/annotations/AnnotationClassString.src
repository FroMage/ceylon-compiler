package com.redhat.ceylon.compiler.java.test.annotations;

@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({})
@interface AnnotationClassString$annotation {
    
    public abstract .java.lang.String s();
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@interface AnnotationClassString$annotations {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation[] value();
}
@.ceylon.language.Annotation$annotation
class AnnotationClassString implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.metamodel.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> {
    
    AnnotationClassString(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation anno) {
        this(anno.s());
    }
    
    AnnotationClassString(final .java.lang.String s) {
        this.$ceylon$language$metamodel$SequencedAnnotation$this = new .ceylon.language.metamodel.SequencedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.metamodel.Type<? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.metamodel.Type.class, .ceylon.language.Anything.$TypeDescriptor), this);
        this.$ceylon$language$metamodel$ConstrainedAnnotation$this = new .ceylon.language.metamodel.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>, .ceylon.language.metamodel.Type<? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.metamodel.Type.class, .ceylon.language.Anything.$TypeDescriptor), this);
        this.$ceylon$language$metamodel$Annotation$this = new .ceylon.language.metamodel.Annotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor, this);
    }
    protected final .ceylon.language.metamodel.SequencedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> $ceylon$language$metamodel$SequencedAnnotation$this;
    
    @.java.lang.Override
    public .ceylon.language.metamodel.SequencedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> $ceylon$language$metamodel$SequencedAnnotation$impl() {
        return $ceylon$language$metamodel$SequencedAnnotation$this;
    }
    protected final .ceylon.language.metamodel.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> $ceylon$language$metamodel$ConstrainedAnnotation$this;
    
    @.java.lang.Override
    public .ceylon.language.metamodel.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> $ceylon$language$metamodel$ConstrainedAnnotation$impl() {
        return $ceylon$language$metamodel$ConstrainedAnnotation$this;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.metamodel.Annotated programElement) {
        return $ceylon$language$metamodel$ConstrainedAnnotation$this.occurs(programElement);
    }
    protected final .ceylon.language.metamodel.Annotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString> $ceylon$language$metamodel$Annotation$this;
    
    @.java.lang.Override
    public .ceylon.language.metamodel.Annotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString> $ceylon$language$metamodel$Annotation$impl() {
        return $ceylon$language$metamodel$Annotation$this;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({})
@interface AnnotationClassStringDefaulted$annotation {
    
    public abstract .java.lang.String s() default "foo";
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@interface AnnotationClassStringDefaulted$annotations {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted$annotation[] value();
}
@.ceylon.language.Annotation$annotation
class AnnotationClassStringDefaulted implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.metamodel.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> {
    
    AnnotationClassStringDefaulted() {
        (
            let
            {
                .java.lang.String $ceylontmp$s$1 = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.$init$s();
                this($ceylontmp$s$1);
            }
            returning null;
        );
    }
    
    AnnotationClassStringDefaulted(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted$annotation anno) {
        this(anno.s());
    }
    
    AnnotationClassStringDefaulted(final .java.lang.String s) {
        this.$ceylon$language$metamodel$SequencedAnnotation$this = new .ceylon.language.metamodel.SequencedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.metamodel.Type<? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.metamodel.Type.class, .ceylon.language.Anything.$TypeDescriptor), this);
        this.$ceylon$language$metamodel$ConstrainedAnnotation$this = new .ceylon.language.metamodel.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>, .ceylon.language.metamodel.Type<? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.metamodel.Type.class, .ceylon.language.Anything.$TypeDescriptor), this);
        this.$ceylon$language$metamodel$Annotation$this = new .ceylon.language.metamodel.Annotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.$TypeDescriptor, this);
    }
    
    static .java.lang.String $init$s() {
        return "foo";
    }
    protected final .ceylon.language.metamodel.SequencedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> $ceylon$language$metamodel$SequencedAnnotation$this;
    
    @.java.lang.Override
    public .ceylon.language.metamodel.SequencedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> $ceylon$language$metamodel$SequencedAnnotation$impl() {
        return $ceylon$language$metamodel$SequencedAnnotation$this;
    }
    protected final .ceylon.language.metamodel.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> $ceylon$language$metamodel$ConstrainedAnnotation$this;
    
    @.java.lang.Override
    public .ceylon.language.metamodel.ConstrainedAnnotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString, .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString>, .ceylon.language.metamodel.Type<? extends .java.lang.Object>> $ceylon$language$metamodel$ConstrainedAnnotation$impl() {
        return $ceylon$language$metamodel$ConstrainedAnnotation$this;
    }
    
    @.java.lang.Override
    public final boolean occurs(final .ceylon.language.metamodel.Annotated programElement) {
        return $ceylon$language$metamodel$ConstrainedAnnotation$this.occurs(programElement);
    }
    protected final .ceylon.language.metamodel.Annotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString> $ceylon$language$metamodel$Annotation$this;
    
    @.java.lang.Override
    public .ceylon.language.metamodel.Annotation$impl<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString> $ceylon$language$metamodel$Annotation$impl() {
        return $ceylon$language$metamodel$Annotation$this;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@interface AnnotationClassStringSequence$annotation {
    
    public abstract .java.lang.String[] s();
}
@.ceylon.language.Annotation$annotation
class AnnotationClassStringSequence implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    AnnotationClassStringSequence(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence$annotation anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialInstanceBoxed(anno.s()));
    }
    
    AnnotationClassStringSequence(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequence.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@interface AnnotationClassStringSequenceDefaulted$annotation {
    
    public abstract .java.lang.String[] s() default {"foo"};
}
@.ceylon.language.Annotation$annotation
class AnnotationClassStringSequenceDefaulted implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    AnnotationClassStringSequenceDefaulted() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$3 = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted.$init$s();
                this($ceylontmp$s$3);
            }
            returning null;
        );
    }
    
    AnnotationClassStringSequenceDefaulted(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted$annotation anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialInstanceBoxed(anno.s()));
    }
    
    AnnotationClassStringSequenceDefaulted(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
    }
    
    static .ceylon.language.Sequential<? extends .ceylon.language.String> $init$s() {
        return new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Empty>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.String.$TypeDescriptor, .ceylon.language.Empty.$TypeDescriptor, .ceylon.language.String.instance("foo"), .ceylon.language.empty_.$get());
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringSequenceDefaulted.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@interface AnnotationClassStringIterable$annotation {
    
    public abstract .java.lang.String[] s();
}
@.ceylon.language.Annotation$annotation
class AnnotationClassStringIterable implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    AnnotationClassStringIterable(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable$annotation anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialInstanceBoxed(anno.s()));
    }
    
    AnnotationClassStringIterable(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> s) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterable.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@interface AnnotationClassStringIterableDefaulted$annotation {
    
    public abstract .java.lang.String[] s() default {"foo"};
}
@.ceylon.language.Annotation$annotation
class AnnotationClassStringIterableDefaulted implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    AnnotationClassStringIterableDefaulted() {
        (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $ceylontmp$s$5 = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted.$init$s();
                this($ceylontmp$s$5);
            }
            returning null;
        );
    }
    
    AnnotationClassStringIterableDefaulted(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted$annotation anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialInstanceBoxed(anno.s()));
    }
    
    AnnotationClassStringIterableDefaulted(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> s) {
    }
    
    static .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> $init$s() {
        return .ceylon.language.ArraySequence.<.ceylon.language.String>instance(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{.ceylon.language.String.instance("foo")});
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringIterableDefaulted.class);
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@interface AnnotationClassStringVariadic$annotation {
    
    public abstract .java.lang.String[] s();
}
@.ceylon.language.Annotation$annotation
class AnnotationClassStringVariadic implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    AnnotationClassStringVariadic(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic$annotation anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialInstanceBoxed(anno.s()));
    }
    
    AnnotationClassStringVariadic(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> s) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringVariadic.class);
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {0},
        annotationClass = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class)
final class annotationClassString_ {
    
    private annotationClassString_() {
    }
    
    @.ceylon.language.Annotation$annotation
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString annotationClassString(final .java.lang.String s) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString(s);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {-32768},
        annotationClass = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class)
final class annotationClassStringStatic_ {
    
    private annotationClassStringStatic_() {
    }
    static final .java.lang.String s = "bar";
    
    @.ceylon.language.Annotation$annotation
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString annotationClassStringStatic() {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString("bar");
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.annotations.annotationClassStringStatic_.annotationClassStringStatic();
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {0},
        annotationClass = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class)
final class annotationClassStringDropped_ {
    
    private annotationClassStringDropped_() {
    }
    
    @.ceylon.language.Annotation$annotation
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString annotationClassStringDropped(final .java.lang.String s, final .java.lang.String t) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString(s);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {1},
        annotationClass = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString.class)
final class annotationClassStringDropped2_ {
    
    private annotationClassStringDropped2_() {
    }
    
    @.ceylon.language.Annotation$annotation
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString annotationClassStringDropped2(final .java.lang.String t, final .java.lang.String s) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString(s);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {},
        annotationClass = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted.class)
final class annotationClassStringDefaulted_ {
    
    private annotationClassStringDefaulted_() {
    }
    
    @.ceylon.language.Annotation$annotation
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted annotationClassStringDefaulted() {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.annotations.annotationClassStringDefaulted_.annotationClassStringDefaulted();
    }
}
@.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotations({
        @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation(s = "baz"),
        @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation(s = .com.redhat.ceylon.compiler.java.test.annotations.annotationClassStringStatic_.s),
        @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation(s = "yes"),
        @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString$annotation(s = "yes")})
@.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted$annotations({@.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassStringDefaulted$annotation})
class AnnotationClassString_callsite implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    AnnotationClassString_callsite() {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.$get().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString_callsite();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString_callsite.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationClassString_callsite.class);
}