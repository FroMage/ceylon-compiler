package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

final class nonemptyCond_ {
    
    private nonemptyCond_() {
    }
    
    static void nonemptyCond() {
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer> ints = new .com.redhat.ceylon.compiler.java.language.ArraySequence<.ceylon.language.Integer>(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L), .ceylon.language.Integer.instance(4L), .ceylon.language.Integer.instance(5L));
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer>(){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> getIterator() {
                return new .ceylon.language.Iterator<.ceylon.language.Integer>(){
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0 = ints.getIterator();
                    private .ceylon.language.Integer x;
                    private boolean x$exhausted;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmpitem0 = iter$0.next();
                        x$exhausted = $ceylontmpitem0 == .ceylon.language.exhausted_.getExhausted();
                        if (x$exhausted) {
                            return false;
                        } else {
                            x = (.ceylon.language.Integer)$ceylontmpitem0;
                        }
                        return true;
                    }
                    private .ceylon.language.Sequence<? extends .ceylon.language.Integer> $ints$1;
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.x()) break;
                            .ceylon.language.Iterable<? extends .ceylon.language.Integer> $ints$2 = null;
                            if (($ints$2 = ints) instanceof .ceylon.language.FixedSized && !((.ceylon.language.FixedSized)$ints$2).getEmpty()) {
                                $ints$1 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)$ints$2;
                                break;
                            }
                        }
                        return !x$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        return this.next1() ? $ints$1.getFirst() : .ceylon.language.exhausted_.getExhausted();
                    }
                };
            }
        }.getSequence());
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.comprehensions.nonemptyCond_.nonemptyCond();
    }
}