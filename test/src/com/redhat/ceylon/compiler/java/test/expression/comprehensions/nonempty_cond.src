package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

final class nonemptyCond_ {
    
    private nonemptyCond_() {
    }
    
    static void nonemptyCond() {
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ints = new .ceylon.language.Tuple<.ceylon.language.Integer, .ceylon.language.Integer, .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Tuple<.ceylon.language.Integer, ? extends .ceylon.language.Integer, ? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>>>>>>(.ceylon.language.Integer.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L),
                .ceylon.language.Integer.instance(5L)});
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor, new .ceylon.language.Iterable[]{ints}){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor){
                    {
                        iter$0 = $getIterables()[0].iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iter$0;
                    private .ceylon.language.Integer x;
                    private boolean x$exhausted;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmpitem0 = iter$0.next();
                        x$exhausted = $ceylontmpitem0 == .ceylon.language.finished_.get_();
                        if (x$exhausted) {
                            return false;
                        } else {
                            x = (.ceylon.language.Integer)$ceylontmpitem0;
                            return true;
                        }
                    }
                    private .ceylon.language.Sequence<? extends .ceylon.language.Integer> $ints$2;
                    
                    private final boolean next1() {
                        while (true) {
                            if (!this.x()) break;
                            .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ints$1 = null;
                            if (($ints$1 = ints) instanceof .ceylon.language.Sequence) {
                                $ints$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)$ints$1;
                                break;
                            }
                        }
                        return !x$exhausted;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.next1()) {
                            final .ceylon.language.Integer x = this.x;
                            return $ints$2.getFirst();
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        });
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.comprehensions.nonemptyCond_.nonemptyCond();
    }
}