package com.redhat.ceylon.compiler.java.test.expression.invoke;

final class defaultFunctionReference_ {
    
    private defaultFunctionReference_() {
    }
    
    static final void defaultFunctionReference() {
        (
            let
            {
                .ceylon.language.Callable<? extends .java.lang.Object> $ceylontmp$f$1 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference_.defaultFunctionReference$f();
                defaultFunctionReference($ceylontmp$f$1);
            }
            returning null;
        );
    }
    
    static final .ceylon.language.Callable<? extends .java.lang.Object> defaultFunctionReference$f() {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>("Anything(Object)"){
            
            @.java.lang.Override
            public .java.lang.Object $call(final .java.lang.Object $param$0) {
                final .java.lang.Object o = $param$0;
                return (
                    let
                    {
                        .ceylon.language.print_.print(o);
                    }
                    returning null;
                );
            }
        };
    }
    
    static void defaultFunctionReference(final .ceylon.language.Callable<? extends .java.lang.Object> f) {
        f.$call(.ceylon.language.Integer.instance(1L));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference_.defaultFunctionReference();
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 4)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class defaultFunctionReference2_ {
    
    private defaultFunctionReference2_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static final void defaultFunctionReference2() {
        (
            let
            {
                .java.lang.String $ceylontmp$s$3 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference2_.defaultFunctionReference2$s();
                .ceylon.language.Callable<? extends .java.lang.Object> $ceylontmp$f$4 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference2_.defaultFunctionReference2$f($ceylontmp$s$3);
                defaultFunctionReference2($ceylontmp$s$3, $ceylontmp$f$4);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static final .java.lang.String defaultFunctionReference2$s() {
        return "hi";
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static final void defaultFunctionReference2(final .java.lang.String s) {
        (
            let
            {
                .ceylon.language.Callable<? extends .java.lang.Object> $ceylontmp$f$6 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference2_.defaultFunctionReference2$f(s);
                defaultFunctionReference2(s, $ceylontmp$f$6);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static final .ceylon.language.Callable<? extends .java.lang.Object> defaultFunctionReference2$f(final .java.lang.String s) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>("Anything(Object*)"){
            
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            private final .ceylon.language.Sequential<? extends .java.lang.Object> $$o() {
                return (.ceylon.language.Sequential).ceylon.language.empty_.getEmpty$();
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call() {
                final .ceylon.language.Sequential<? extends .java.lang.Object> o = $$o();
                return $call$typed(o);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call(final .java.lang.Object $param$0) {
                final .ceylon.language.Sequential<? extends .java.lang.Object> o = (.ceylon.language.Sequential<? extends .java.lang.Object>)(.ceylon.language.Sequential)$param$0;
                return $call$typed(o);
            }
            
            private .java.lang.Object $call$typed(.ceylon.language.Sequential<? extends .java.lang.Object> o) {
                return (
                    let
                    {
                        .ceylon.language.print_.print(.ceylon.language.String.instance(s + o.toString()));
                    }
                    returning null;
                );
            }
        };
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void defaultFunctionReference2(@.com.redhat.ceylon.compiler.java.metadata.Name("s")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String")
    final .java.lang.String s, @.com.redhat.ceylon.compiler.java.metadata.Name("f")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Callable<ceylon.language::Anything,ceylon.language::Sequential<ceylon.language::Object>>")
    final .ceylon.language.Callable<? extends .java.lang.Object> f) {
        f.$call(.ceylon.language.ArraySequence.<.java.lang.Object>instance(.ceylon.language.Object.$TypeDescriptor, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}));
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference2_.defaultFunctionReference2();
    }
}
final class defaultFunctionReference_call_ {
    
    private defaultFunctionReference_call_() {
    }
    
    static void defaultFunctionReference_call() {
        .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference_.defaultFunctionReference();
        .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference2_.defaultFunctionReference2();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference_call_.defaultFunctionReference_call();
    }
}