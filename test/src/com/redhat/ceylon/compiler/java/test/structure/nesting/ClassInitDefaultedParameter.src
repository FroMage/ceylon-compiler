package com.redhat.ceylon.compiler.java.test.structure.nesting;

class C1 implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    C1() {
        (
            let
            {
                long $ceylontmp$i$1 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C1.$init$i();
                this($ceylontmp$i$1);
            }
            returning null;
        );
    }
    
    C1(final long i) {
    }
    
    static long $init$i() {
        return 1L;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C1();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.structure.nesting.C1.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.C1.class);
}
class C3 implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    C3() {
        (
            let
            {
                long $ceylontmp$i$3 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C3.$init$i();
                long $ceylontmp$n$4 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C3.$init$n($ceylontmp$i$3);
                this($ceylontmp$i$3, $ceylontmp$n$4);
            }
            returning null;
        );
    }
    
    C3(final long i) {
        (
            let
            {
                long $ceylontmp$n$6 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C3.$init$n(i);
                this(i, $ceylontmp$n$6);
            }
            returning null;
        );
    }
    
    C3(final long i, final long n) {
    }
    
    static long $init$i() {
        return 1L;
    }
    
    static long $init$n(final long i) {
        return 2L * i;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C3();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.structure.nesting.C3.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.C3.class);
}
class C4 implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    C4(final long i) {
        (
            let
            {
                long $ceylontmp$n$8 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C4.$init$n(i);
                this(i, $ceylontmp$n$8);
            }
            returning null;
        );
    }
    
    C4(final long i, final long n) {
    }
    
    static long $init$n(final long i) {
        return 2L * i;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.structure.nesting.C4.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.C4.class);
}
class C5<U> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    C5(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedU, final long i) {
        (
            let
            {
                U $ceylontmp$u$10 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C5.<U>$init$u($reifiedU, i);
                this($reifiedU, i, $ceylontmp$u$10);
            }
            returning null;
        );
    }
    
    C5(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedU, final long i, final U u) {
        this.$reifiedU = $reifiedU;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedU;
    
    static <U>U $init$u(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedU, final long i) {
        return null;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.nesting.C5.class, $reifiedU);
    }
}
final class positional_ {
    
    private positional_() {
    }
    
    static void positional() {
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C1();
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C1(1L);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C3();
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C3(1L);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C3(1L, 2L);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C4(1L);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C4(1L, 2L);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C5<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, 1L);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.C5<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor, 1L, .ceylon.language.String.instance(""));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.structure.nesting.positional_.positional();
    }
}
final class named_ {
    
    private named_() {
    }
    
    static void named() {
        (
            let
            {
                long $arg$11$0 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C1.$init$i();
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C1($arg$11$0);
        );
        (
            let
            {
                long $arg$12$0 = 1L;
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C1($arg$12$0);
        );
        (
            let
            {
                long $arg$13$0 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C3.$init$i();
                long $arg$13$1 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C3.$init$n($arg$13$0);
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C3($arg$13$0, $arg$13$1);
        );
        (
            let
            {
                long $arg$14$0 = 10L;
                long $arg$14$1 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C3.$init$n($arg$14$0);
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C3($arg$14$0, $arg$14$1);
        );
        (
            let
            {
                long $arg$15$0 = 10L;
                long $arg$15$1 = 20L;
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C3($arg$15$0, $arg$15$1);
        );
        (
            let
            {
                long $arg$16$1 = 20L;
                long $arg$16$0 = 10L;
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C3($arg$16$0, $arg$16$1);
        );
        (
            let
            {
                long $arg$17$1 = 10L;
                long $arg$17$0 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C3.$init$i();
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C3($arg$17$0, $arg$17$1);
        );
        (
            let
            {
                long $arg$18$1 = 20L;
                long $arg$18$0 = 10L;
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C4($arg$18$0, $arg$18$1);
        );
        (
            let
            {
                long $arg$19$0 = 10L;
                long $arg$19$1 = 20L;
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C4($arg$19$0, $arg$19$1);
        );
        (
            let
            {
                long $arg$20$0 = 10L;
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $arg$20$reified$0 = .ceylon.language.String.$TypeDescriptor;
                .ceylon.language.String $arg$20$1 = .com.redhat.ceylon.compiler.java.test.structure.nesting.C5.$init$u($arg$20$reified$0, $arg$20$0);
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C5<.ceylon.language.String>($arg$20$reified$0, $arg$20$0, $arg$20$1);
        );
        (
            let
            {
                long $arg$21$0 = 10L;
                .ceylon.language.String $arg$21$1 = .ceylon.language.String.instance("");
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $arg$21$reified$0 = .ceylon.language.String.$TypeDescriptor;
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C5<.ceylon.language.String>($arg$21$reified$0, $arg$21$0, $arg$21$1);
        );
        (
            let
            {
                .ceylon.language.String $arg$22$1 = .ceylon.language.String.instance("");
                long $arg$22$0 = 10L;
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $arg$22$reified$0 = .ceylon.language.String.$TypeDescriptor;
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.nesting.C5<.ceylon.language.String>($arg$22$reified$0, $arg$22$0, $arg$22$1);
        );
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.getProcess$().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.structure.nesting.named_.named();
    }
}