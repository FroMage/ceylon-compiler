package com.redhat.ceylon.compiler.java.test.expression.literal;

class SequenceLiteral implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SequenceLiteral() {
    }
    
    public final void m() {
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequence = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")});
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> iterable = .ceylon.language.ArraySequence.<.ceylon.language.String>instance(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")});
        final .ceylon.language.Empty empty = .ceylon.language.empty_.get_();
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> iterableComp = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor){
                    {
                        iter$0 = sequence.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> iter$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmpitem0 = iter$0.next();
                        s$exhausted = $ceylontmpitem0 == .ceylon.language.finished_.get_();
                        if (s$exhausted) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmpitem0;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return s;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        };
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequenceComp = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor){
                    {
                        iter$0 = sequence.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> iter$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmpitem1 = iter$0.next();
                        s$exhausted = $ceylontmpitem1 == .ceylon.language.finished_.get_();
                        if (s$exhausted) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmpitem1;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return s;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.getSequence();
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> iterableComp2 = .com.redhat.ceylon.compiler.java.language.ArrayIterable.<.ceylon.language.String>instance(.ceylon.language.String.$TypeDescriptor, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor){
                    {
                        iter$0 = sequence.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> iter$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmpitem2 = iter$0.next();
                        s$exhausted = $ceylontmpitem2 == .ceylon.language.finished_.get_();
                        if (s$exhausted) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmpitem2;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return s;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }, .ceylon.language.String.instance("a"));
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequenceComp2 = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Sequential<? extends .ceylon.language.String>>(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{.ceylon.language.String.instance("a")}, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor, .ceylon.language.Null.$TypeDescriptor){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor){
                    {
                        iter$0 = sequence.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> iter$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmpitem3 = iter$0.next();
                        s$exhausted = $ceylontmpitem3 == .ceylon.language.finished_.get_();
                        if (s$exhausted) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmpitem3;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return s;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.getSequence());
        final .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>> triplet = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>>>>(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{
                .ceylon.language.String.instance("hello"),
                .ceylon.language.String.instance("world"),
                .ceylon.language.String.instance("goodbye")});
        final .ceylon.language.Tuple<.ceylon.language.String, ? extends .ceylon.language.String, ? extends .ceylon.language.Sequential<? extends .ceylon.language.String>> spreadSequence = new .ceylon.language.Tuple<.ceylon.language.String, .ceylon.language.String, .ceylon.language.Sequential<? extends .ceylon.language.String>>(.ceylon.language.String.$TypeDescriptor, new .java.lang.Object[]{.ceylon.language.String.instance("hello")}, sequence);
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> spreadIterable = .com.redhat.ceylon.compiler.java.language.ArrayIterable.<.ceylon.language.String>instance(.ceylon.language.String.$TypeDescriptor, iterable, .ceylon.language.String.instance("hello"));
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.literal.SequenceLiteral();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType() {
        return .com.redhat.ceylon.compiler.java.test.expression.literal.SequenceLiteral.$TypeDescriptor;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.literal.SequenceLiteral.class);
}